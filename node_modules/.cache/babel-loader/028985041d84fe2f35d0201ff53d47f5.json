{"ast":null,"code":"import { colorPresets } from \"./colorPresets\";\nexport const colorToRGBA = (inputColor, opacity = 1) => {\n  const cleanedColor = inputColor.trim();\n\n  if (cleanedColor.startsWith(\"#\")) {\n    return hexToRGBA(cleanedColor, opacity);\n  }\n\n  if (cleanedColor.startsWith(\"rgba\")) {\n    return cleanedColor;\n  }\n\n  if (cleanedColor.startsWith(\"rgb\")) {\n    return rgbToRGBA(cleanedColor, opacity);\n  }\n\n  if (/^\\w+$/.exec(cleanedColor)) {\n    return presetToRGB(cleanedColor, opacity);\n  }\n\n  return cleanedColor;\n};\n\nconst presetToRGB = (inputPreset, opacity) => {\n  const lowercasePreset = inputPreset.toLowerCase();\n\n  if (!colorPresets.hasOwnProperty(lowercasePreset)) {\n    throw new Error(`preset color does not exist: ${inputPreset}`);\n  }\n\n  const color = colorPresets[lowercasePreset];\n  return hexToRGBA(color, opacity);\n};\n\nconst rgbToRGBA = (inputRGB, opacity) => {\n  const expression = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i;\n  const searchResults = expression.exec(inputRGB);\n\n  if (!searchResults) {\n    throw new Error(`invalid rgb color: ${inputRGB}`);\n  }\n\n  const [, r, g, b] = searchResults;\n  return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n};\n\nconst hexToRGBA = (inputHex, opacity) => {\n  const hex = inputHex.replace(\"#\", \"\");\n  const multiplier = hex.length === 3 ? 1 : 2;\n  const r = parseInt(hex.substring(0, 1 * multiplier), 16);\n  const g = parseInt(hex.substring(1 * multiplier, 2 * multiplier), 16);\n  const b = parseInt(hex.substring(2 * multiplier, 3 * multiplier), 16);\n  const result = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n  return result;\n};","map":{"version":3,"sources":["../../src/utils/colors.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAM,WAAW,GAAG,CAAC,UAAD,EAAqB,OAAA,GAAkB,CAAvC,KAA4C;AAEnE,QAAM,YAAY,GAAG,UAAU,CAAC,IAAX,EAArB;;AAEA,MAAI,YAAY,CAAC,UAAb,CAAwB,GAAxB,CAAJ,EAAkC;AAC9B,WAAO,SAAS,CAAC,YAAD,EAAe,OAAf,CAAhB;AACH;;AAED,MAAI,YAAY,CAAC,UAAb,CAAwB,MAAxB,CAAJ,EAAqC;AACjC,WAAO,YAAP;AACH;;AAED,MAAI,YAAY,CAAC,UAAb,CAAwB,KAAxB,CAAJ,EAAoC;AAChC,WAAO,SAAS,CAAC,YAAD,EAAe,OAAf,CAAhB;AACH;;AAED,MAAI,QAAQ,IAAR,CAAa,YAAb,CAAJ,EAAgC;AAC5B,WAAO,WAAW,CAAC,YAAD,EAAe,OAAf,CAAlB;AACH;;AAED,SAAO,YAAP;AACH,CArBM;;AAuBP,MAAM,WAAW,GAAG,CAAC,WAAD,EAAsB,OAAtB,KAAyC;AACzD,QAAM,eAAe,GAAG,WAAW,CAAC,WAAZ,EAAxB;;AACA,MAAI,CAAC,YAAY,CAAC,cAAb,CAA4B,eAA5B,CAAL,EAAmD;AAC/C,UAAM,IAAI,KAAJ,CAAU,gCAAgC,WAAW,EAArD,CAAN;AACH;;AAED,QAAM,KAAK,GAAG,YAAY,CAAC,eAAD,CAA1B;AAEA,SAAO,SAAS,CAAC,KAAD,EAAQ,OAAR,CAAhB;AACH,CATD;;AAWA,MAAM,SAAS,GAAG,CAAC,QAAD,EAAmB,OAAnB,KAAsC;AACpD,QAAM,UAAU,GAAG,6DAAnB;AACA,QAAM,aAAa,GAAG,UAAU,CAAC,IAAX,CAAgB,QAAhB,CAAtB;;AACA,MAAI,CAAC,aAAL,EAAoB;AAChB,UAAM,IAAI,KAAJ,CAAU,sBAAsB,QAAQ,EAAxC,CAAN;AACH;;AAED,QAAM,GAAG,CAAH,EAAM,CAAN,EAAS,CAAT,IAAc,aAApB;AAEA,SAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,OAAO,GAAxC;AACH,CAVD;;AAYA,MAAM,SAAS,GAAG,CAAC,QAAD,EAAmB,OAAnB,KAAsC;AAEpD,QAAM,GAAG,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAZ;AAEA,QAAM,UAAU,GAAI,GAAG,CAAC,MAAJ,KAAe,CAAhB,GAAqB,CAArB,GAAyB,CAA5C;AAEA,QAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,IAAI,UAArB,CAAD,EAAmC,EAAnC,CAAlB;AACA,QAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAJ,CAAc,IAAI,UAAlB,EAA8B,IAAI,UAAlC,CAAD,EAAgD,EAAhD,CAAlB;AACA,QAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAJ,CAAc,IAAI,UAAlB,EAA8B,IAAI,UAAlC,CAAD,EAAgD,EAAhD,CAAlB;AAEA,QAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,OAAO,GAAhD;AAEA,SAAO,MAAP;AACH,CAbD","sourceRoot":"","sourcesContent":["import { colorPresets } from \"./colorPresets\";\nexport const colorToRGBA = (inputColor, opacity = 1) => {\n    const cleanedColor = inputColor.trim();\n    if (cleanedColor.startsWith(\"#\")) {\n        return hexToRGBA(cleanedColor, opacity);\n    }\n    if (cleanedColor.startsWith(\"rgba\")) {\n        return cleanedColor;\n    }\n    if (cleanedColor.startsWith(\"rgb\")) {\n        return rgbToRGBA(cleanedColor, opacity);\n    }\n    if (/^\\w+$/.exec(cleanedColor)) {\n        return presetToRGB(cleanedColor, opacity);\n    }\n    return cleanedColor;\n};\nconst presetToRGB = (inputPreset, opacity) => {\n    const lowercasePreset = inputPreset.toLowerCase();\n    if (!colorPresets.hasOwnProperty(lowercasePreset)) {\n        throw new Error(`preset color does not exist: ${inputPreset}`);\n    }\n    const color = colorPresets[lowercasePreset];\n    return hexToRGBA(color, opacity);\n};\nconst rgbToRGBA = (inputRGB, opacity) => {\n    const expression = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i;\n    const searchResults = expression.exec(inputRGB);\n    if (!searchResults) {\n        throw new Error(`invalid rgb color: ${inputRGB}`);\n    }\n    const [, r, g, b] = searchResults;\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n};\nconst hexToRGBA = (inputHex, opacity) => {\n    const hex = inputHex.replace(\"#\", \"\");\n    const multiplier = (hex.length === 3) ? 1 : 2;\n    const r = parseInt(hex.substring(0, 1 * multiplier), 16);\n    const g = parseInt(hex.substring(1 * multiplier, 2 * multiplier), 16);\n    const b = parseInt(hex.substring(2 * multiplier, 3 * multiplier), 16);\n    const result = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    return result;\n};\n//# sourceMappingURL=colors.js.map"]},"metadata":{},"sourceType":"module"}