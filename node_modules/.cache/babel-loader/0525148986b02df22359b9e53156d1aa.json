{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { event as d3Event, mouse, select, touches } from \"d3-selection\";\nimport * as React from \"react\";\nimport { d3Window, getTouchProps, isDefined, MOUSEENTER, MOUSELEAVE, MOUSEMOVE, mousePosition, MOUSEUP, noop, TOUCHEND, TOUCHMOVE, touchPosition } from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\";\nexport class EventCapture extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dx = 0;\n    this.dy = 0;\n    this.mouseInside = false;\n    this.mouseInteraction = true;\n    this.ref = React.createRef();\n\n    this.handleEnter = () => {\n      const {\n        onMouseEnter\n      } = this.props;\n\n      if (onMouseEnter === undefined) {\n        return;\n      }\n\n      const e = d3Event;\n      this.mouseInside = true;\n\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        const win = d3Window(this.ref.current);\n        select(win).on(MOUSEMOVE, this.handleMouseMove);\n      }\n\n      onMouseEnter(e);\n    };\n\n    this.handleLeave = e => {\n      const {\n        onMouseLeave\n      } = this.props;\n\n      if (onMouseLeave === undefined) {\n        return;\n      }\n\n      this.mouseInside = false;\n\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        const win = d3Window(this.ref.current);\n        select(win).on(MOUSEMOVE, null);\n      }\n\n      onMouseLeave(e);\n    };\n\n    this.handleWheel = e => {\n      const {\n        zoom,\n        onZoom\n      } = this.props;\n      const {\n        panInProgress\n      } = this.state;\n      const yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0;\n      const mouseXY = mousePosition(e);\n      e.preventDefault();\n\n      if (zoom && this.focus && yZoom && !panInProgress) {\n        const zoomDir = e.deltaY > 0 ? 1 : -1;\n\n        if (onZoom !== undefined) {\n          onZoom(zoomDir, mouseXY, e);\n        }\n      } else if (this.focus) {\n        if (this.shouldPan()) {\n          // pan already in progress\n          const {\n            panStartXScale,\n            chartsToPan\n          } = this.state.panStart;\n          this.lastNewPos = mouseXY;\n          this.panHappened = true;\n          this.dx -= e.deltaX;\n          this.dy += e.deltaY;\n          const dxdy = {\n            dx: this.dx,\n            dy: this.dy\n          };\n          this.props.onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n        } else {\n          const {\n            xScale,\n            chartConfig\n          } = this.props;\n          const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n          this.dx = 0;\n          this.dy = 0;\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n        }\n\n        this.queuePanEnd();\n      }\n    };\n\n    this.handleMouseMove = () => {\n      const e = d3Event;\n      const {\n        onMouseMove,\n        mouseMove\n      } = this.props;\n\n      if (this.mouseInteraction && mouseMove && !this.state.panInProgress) {\n        const newPos = mouse(this.ref.current);\n\n        if (onMouseMove !== undefined) {\n          onMouseMove(newPos, \"mouse\", e);\n        }\n      }\n    };\n\n    this.handleClick = e => {\n      const mouseXY = mousePosition(e);\n      const {\n        onClick,\n        onDoubleClick\n      } = this.props;\n\n      if (!this.panHappened && !this.dragHappened) {\n        if (this.clicked && onDoubleClick !== undefined) {\n          onDoubleClick(mouseXY, e);\n          this.clicked = false;\n        } else if (onClick !== undefined) {\n          onClick(mouseXY, e);\n          this.clicked = true;\n          setTimeout(() => {\n            if (this.clicked) {\n              this.clicked = false;\n            }\n          }, 400);\n        }\n      }\n    };\n\n    this.handleRightClick = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      const {\n        onContextMenu,\n        onPanEnd\n      } = this.props;\n      const mouseXY = mousePosition(e, this.ref.current.getBoundingClientRect());\n\n      if (isDefined(this.state.panStart)) {\n        const {\n          panStartXScale,\n          panOrigin,\n          chartsToPan\n        } = this.state.panStart;\n\n        if (this.panHappened) {\n          onPanEnd(mouseXY, panStartXScale, panOrigin, chartsToPan, e);\n        }\n\n        const win = d3Window(this.ref.current);\n        select(win).on(MOUSEMOVE, null).on(MOUSEUP, null);\n        this.setState({\n          panInProgress: false,\n          panStart: null\n        });\n      }\n\n      if (onContextMenu !== undefined) {\n        onContextMenu(mouseXY, e);\n      }\n    };\n\n    this.handleDrag = () => {\n      const e = d3Event;\n\n      if (this.props.onDrag) {\n        this.dragHappened = true;\n        const mouseXY = mouse(this.ref.current);\n        this.props.onDrag({\n          startPos: this.state.dragStartPosition,\n          mouseXY\n        }, e);\n      }\n    };\n\n    this.handleDragEnd = () => {\n      const e = d3Event;\n      const mouseXY = mouse(this.ref.current);\n      const win = d3Window(this.ref.current);\n      select(win) // @ts-ignore\n      .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n\n      if (this.dragHappened) {\n        const {\n          onDragComplete\n        } = this.props;\n\n        if (onDragComplete !== undefined) {\n          onDragComplete({\n            mouseXY\n          }, e);\n        }\n      }\n\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    };\n\n    this.canPan = () => {\n      const {\n        getAllPanConditions\n      } = this.props;\n      const {\n        pan: initialPanEnabled\n      } = this.props;\n      const {\n        panEnabled,\n        draggable: somethingSelected\n      } = getAllPanConditions().reduce((returnObj, a) => {\n        return {\n          draggable: returnObj.draggable || a.draggable,\n          panEnabled: returnObj.panEnabled && a.panEnabled\n        };\n      }, {\n        draggable: false,\n        panEnabled: initialPanEnabled\n      });\n      return {\n        panEnabled,\n        somethingSelected\n      };\n    };\n\n    this.handleMouseDown = e => {\n      if (e.button !== 0) {\n        return;\n      }\n\n      const {\n        xScale,\n        chartConfig,\n        onMouseDown\n      } = this.props;\n      this.panHappened = false;\n      this.dragHappened = false;\n      this.focus = true;\n\n      if (!this.state.panInProgress && this.mouseInteraction) {\n        const mouseXY = mousePosition(e);\n        const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        const {\n          panEnabled,\n          somethingSelected\n        } = this.canPan();\n        const pan = panEnabled && !somethingSelected;\n\n        if (pan) {\n          this.setState({\n            panInProgress: pan,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n          const win = d3Window(this.ref.current);\n          select(win).on(MOUSEMOVE, this.handlePan).on(MOUSEUP, this.handlePanEnd);\n        } else if (somethingSelected) {\n          this.setState({\n            panInProgress: false,\n            dragInProgress: true,\n            panStart: null,\n            dragStartPosition: mouseXY\n          });\n          const {\n            onDragStart\n          } = this.props;\n\n          if (onDragStart !== undefined) {\n            onDragStart({\n              startPos: mouseXY\n            }, e);\n          }\n\n          const win = d3Window(this.ref.current);\n          select(win).on(MOUSEMOVE, this.handleDrag).on(MOUSEUP, this.handleDragEnd);\n        }\n\n        if (onMouseDown !== undefined) {\n          onMouseDown(mouseXY, currentCharts, e);\n        }\n      }\n\n      e.preventDefault();\n    };\n\n    this.shouldPan = () => {\n      const {\n        pan: panEnabled,\n        onPan\n      } = this.props;\n      return panEnabled && onPan && isDefined(this.state.panStart);\n    };\n\n    this.handlePan = () => {\n      const e = d3Event;\n\n      if (this.shouldPan()) {\n        this.panHappened = true;\n        const {\n          panStartXScale,\n          panOrigin,\n          chartsToPan\n        } = this.state.panStart;\n        let dx;\n        let dy;\n        let mouseXY;\n\n        if (this.mouseInteraction) {\n          mouseXY = mouse(this.ref.current);\n          this.lastNewPos = mouseXY;\n          dx = mouseXY[0] - panOrigin[0];\n          dy = mouseXY[1] - panOrigin[1];\n        } else {\n          mouseXY = touches(this.ref.current)[0];\n          this.lastNewPos = mouseXY;\n          dx = panOrigin[0] - mouseXY[0];\n          dy = panOrigin[1] - mouseXY[1];\n        }\n\n        this.dx = dx;\n        this.dy = dy;\n        this.props.onPan(mouseXY, panStartXScale, {\n          dx,\n          dy\n        }, chartsToPan, e);\n      }\n    };\n\n    this.handlePanEnd = () => {\n      const e = d3Event;\n      const {\n        pan: panEnabled,\n        onPanEnd\n      } = this.props;\n\n      if (isDefined(this.state.panStart)) {\n        const {\n          panStartXScale,\n          chartsToPan\n        } = this.state.panStart;\n        const win = d3Window(this.ref.current);\n        select(win) // @ts-ignore\n        .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, null).on(TOUCHEND, null);\n\n        if (this.panHappened && panEnabled && onPanEnd) {\n          const {\n            dx,\n            dy\n          } = this;\n          delete this.dx;\n          delete this.dy;\n          onPanEnd(this.lastNewPos, panStartXScale, {\n            dx,\n            dy\n          }, chartsToPan, e);\n        }\n\n        this.setState({\n          panInProgress: false,\n          panStart: null\n        });\n      }\n    };\n\n    this.handleTouchMove = e => {\n      const {\n        onMouseMove\n      } = this.props;\n\n      if (onMouseMove === undefined) {\n        return;\n      }\n\n      const touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n      onMouseMove(touchXY, \"touch\", e);\n    };\n\n    this.handleTouchStart = e => {\n      this.mouseInteraction = false;\n      const {\n        pan: panEnabled,\n        chartConfig,\n        onMouseMove\n      } = this.props;\n      const {\n        xScale,\n        onPanEnd\n      } = this.props;\n\n      if (e.touches.length === 1) {\n        this.panHappened = false;\n        const touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n\n        if (onMouseMove !== undefined) {\n          onMouseMove(touchXY, \"touch\", e);\n        }\n\n        if (panEnabled) {\n          const currentCharts = getCurrentCharts(chartConfig, touchXY);\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: touchXY,\n              chartsToPan: currentCharts\n            }\n          });\n          const win = d3Window(this.ref.current);\n          select(win).on(TOUCHMOVE, this.handlePan, false).on(TOUCHEND, this.handlePanEnd, false);\n        }\n      } else if (e.touches.length === 2) {\n        // pinch zoom begin\n        // do nothing pinch zoom is handled in handleTouchMove\n        const {\n          panInProgress,\n          panStart\n        } = this.state;\n\n        if (panInProgress && panEnabled && onPanEnd) {\n          const {\n            panStartXScale,\n            panOrigin,\n            chartsToPan\n          } = panStart;\n          const win = d3Window(this.ref.current);\n          select(win) // @ts-ignore\n          .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, this.handlePinchZoom, false).on(TOUCHEND, this.handlePinchZoomEnd, false);\n          const touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n          const touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n\n          if (this.panHappened && panEnabled && onPanEnd) {\n            onPanEnd(this.lastNewPos, panStartXScale, panOrigin, chartsToPan, e);\n          }\n\n          this.setState({\n            panInProgress: false,\n            pinchZoomStart: {\n              xScale,\n              touch1Pos,\n              touch2Pos,\n              range: xScale.range(),\n              chartsToPan\n            }\n          });\n        }\n      }\n    };\n\n    this.handlePinchZoom = () => {\n      const e = d3Event;\n      const [touch1Pos, touch2Pos] = touches(this.ref.current);\n      const {\n        xScale,\n        zoom: zoomEnabled,\n        onPinchZoom\n      } = this.props;\n\n      const _a = this.state.pinchZoomStart,\n            {\n        chartsToPan\n      } = _a,\n            initialPinch = __rest(_a, [\"chartsToPan\"]);\n\n      if (zoomEnabled && onPinchZoom) {\n        onPinchZoom(initialPinch, {\n          touch1Pos,\n          touch2Pos,\n          xScale\n        }, e);\n      }\n    };\n\n    this.handlePinchZoomEnd = () => {\n      const e = d3Event;\n      const win = d3Window(this.ref.current);\n      select(win).on(TOUCHMOVE, null).on(TOUCHEND, null);\n      const {\n        zoom: zoomEnabled,\n        onPinchZoomEnd\n      } = this.props;\n\n      const _a = this.state.pinchZoomStart,\n            {\n        chartsToPan\n      } = _a,\n            initialPinch = __rest(_a, [\"chartsToPan\"]);\n\n      if (zoomEnabled && onPinchZoomEnd) {\n        onPinchZoomEnd(initialPinch, e);\n      }\n\n      this.setState({\n        pinchZoomStart: undefined\n      });\n    };\n\n    this.setCursorClass = cursorOverrideClass => {\n      if (cursorOverrideClass !== this.state.cursorOverrideClass) {\n        this.setState({\n          cursorOverrideClass\n        });\n      }\n    };\n\n    this.focus = props.focus;\n    this.state = {\n      panInProgress: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      disableInteraction\n    } = this.props;\n    const {\n      current\n    } = this.ref;\n\n    if (current === null) {\n      return;\n    }\n\n    if (!disableInteraction) {\n      select(current).on(MOUSEENTER, this.handleEnter).on(MOUSELEAVE, this.handleLeave); // @ts-ignore\n\n      current.addEventListener(\"wheel\", this.handleWheel, {\n        passive: false\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.componentDidMount();\n  }\n\n  componentWillUnmount() {\n    const {\n      disableInteraction\n    } = this.props;\n    const {\n      current\n    } = this.ref;\n\n    if (current === null) {\n      return;\n    }\n\n    if (!disableInteraction) {\n      select(current).on(MOUSEENTER, null).on(MOUSELEAVE, null);\n      const win = d3Window(current);\n      select(win).on(MOUSEMOVE, null); // @ts-ignore\n\n      current.removeEventListener(\"wheel\", this.handleWheel, {\n        passive: false\n      });\n    }\n  }\n\n  queuePanEnd() {\n    if (isDefined(this.panEndTimeout)) {\n      clearTimeout(this.panEndTimeout);\n    }\n\n    this.panEndTimeout = setTimeout(() => {\n      this.handlePanEnd();\n    }, 100);\n  }\n\n  cancelDrag() {\n    const win = d3Window(this.ref.current);\n    select(win) // @ts-ignore\n    .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n    this.setState({\n      dragInProgress: false\n    });\n    this.mouseInteraction = true;\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      disableInteraction,\n      useCrossHairStyleCursor\n    } = this.props;\n    const className = disableInteraction ? undefined : this.state.cursorOverrideClass !== undefined ? this.state.cursorOverrideClass : !useCrossHairStyleCursor ? undefined : this.state.panInProgress ? \"react-financial-charts-grabbing-cursor\" : \"react-financial-charts-crosshair-cursor\";\n    const interactionProps = disableInteraction || {\n      onMouseDown: this.handleMouseDown,\n      onClick: this.handleClick,\n      onContextMenu: this.handleRightClick,\n      onTouchStart: this.handleTouchStart,\n      onTouchMove: this.handleTouchMove\n    };\n    return React.createElement(\"rect\", Object.assign({\n      ref: this.ref,\n      className: className,\n      width: width,\n      height: height,\n      style: {\n        opacity: 0\n      }\n    }, interactionProps));\n  }\n\n}\nEventCapture.defaultProps = {\n  mouseMove: false,\n  zoom: false,\n  pan: false,\n  panSpeedMultiplier: 1,\n  focus: false,\n  onDragComplete: noop,\n  disableInteraction: false\n};","map":{"version":3,"sources":["../src/EventCapture.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { event as d3Event, mouse, select, touches } from \"d3-selection\";\nimport * as React from \"react\";\nimport { d3Window, getTouchProps, isDefined, MOUSEENTER, MOUSELEAVE, MOUSEMOVE, mousePosition, MOUSEUP, noop, TOUCHEND, TOUCHMOVE, touchPosition, } from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\";\nexport class EventCapture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dx = 0;\n        this.dy = 0;\n        this.mouseInside = false;\n        this.mouseInteraction = true;\n        this.ref = React.createRef();\n        this.handleEnter = () => {\n            const { onMouseEnter } = this.props;\n            if (onMouseEnter === undefined) {\n                return;\n            }\n            const e = d3Event;\n            this.mouseInside = true;\n            if (!this.state.panInProgress\n                && !this.state.dragInProgress) {\n                const win = d3Window(this.ref.current);\n                select(win)\n                    .on(MOUSEMOVE, this.handleMouseMove);\n            }\n            onMouseEnter(e);\n        };\n        this.handleLeave = (e) => {\n            const { onMouseLeave } = this.props;\n            if (onMouseLeave === undefined) {\n                return;\n            }\n            this.mouseInside = false;\n            if (!this.state.panInProgress\n                && !this.state.dragInProgress) {\n                const win = d3Window(this.ref.current);\n                select(win)\n                    .on(MOUSEMOVE, null);\n            }\n            onMouseLeave(e);\n        };\n        this.handleWheel = (e) => {\n            const { zoom, onZoom } = this.props;\n            const { panInProgress } = this.state;\n            const yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0;\n            const mouseXY = mousePosition(e);\n            e.preventDefault();\n            if (zoom && this.focus && yZoom && !panInProgress) {\n                const zoomDir = e.deltaY > 0 ? 1 : -1;\n                if (onZoom !== undefined) {\n                    onZoom(zoomDir, mouseXY, e);\n                }\n            }\n            else if (this.focus) {\n                if (this.shouldPan()) {\n                    // pan already in progress\n                    const { panStartXScale, chartsToPan, } = this.state.panStart;\n                    this.lastNewPos = mouseXY;\n                    this.panHappened = true;\n                    this.dx -= e.deltaX;\n                    this.dy += e.deltaY;\n                    const dxdy = { dx: this.dx, dy: this.dy };\n                    this.props.onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n                }\n                else {\n                    const { xScale, chartConfig } = this.props;\n                    const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n                    this.dx = 0;\n                    this.dy = 0;\n                    this.setState({\n                        panInProgress: true,\n                        panStart: {\n                            panStartXScale: xScale,\n                            panOrigin: mouseXY,\n                            chartsToPan: currentCharts,\n                        },\n                    });\n                }\n                this.queuePanEnd();\n            }\n        };\n        this.handleMouseMove = () => {\n            const e = d3Event;\n            const { onMouseMove, mouseMove } = this.props;\n            if (this.mouseInteraction &&\n                mouseMove &&\n                !this.state.panInProgress) {\n                const newPos = mouse(this.ref.current);\n                if (onMouseMove !== undefined) {\n                    onMouseMove(newPos, \"mouse\", e);\n                }\n            }\n        };\n        this.handleClick = (e) => {\n            const mouseXY = mousePosition(e);\n            const { onClick, onDoubleClick } = this.props;\n            if (!this.panHappened && !this.dragHappened) {\n                if (this.clicked && onDoubleClick !== undefined) {\n                    onDoubleClick(mouseXY, e);\n                    this.clicked = false;\n                }\n                else if (onClick !== undefined) {\n                    onClick(mouseXY, e);\n                    this.clicked = true;\n                    setTimeout(() => {\n                        if (this.clicked) {\n                            this.clicked = false;\n                        }\n                    }, 400);\n                }\n            }\n        };\n        this.handleRightClick = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            const { onContextMenu, onPanEnd } = this.props;\n            const mouseXY = mousePosition(e, this.ref.current.getBoundingClientRect());\n            if (isDefined(this.state.panStart)) {\n                const { panStartXScale, panOrigin, chartsToPan } = this.state.panStart;\n                if (this.panHappened) {\n                    onPanEnd(mouseXY, panStartXScale, panOrigin, chartsToPan, e);\n                }\n                const win = d3Window(this.ref.current);\n                select(win)\n                    .on(MOUSEMOVE, null)\n                    .on(MOUSEUP, null);\n                this.setState({\n                    panInProgress: false,\n                    panStart: null,\n                });\n            }\n            if (onContextMenu !== undefined) {\n                onContextMenu(mouseXY, e);\n            }\n        };\n        this.handleDrag = () => {\n            const e = d3Event;\n            if (this.props.onDrag) {\n                this.dragHappened = true;\n                const mouseXY = mouse(this.ref.current);\n                this.props.onDrag({\n                    startPos: this.state.dragStartPosition,\n                    mouseXY,\n                }, e);\n            }\n        };\n        this.handleDragEnd = () => {\n            const e = d3Event;\n            const mouseXY = mouse(this.ref.current);\n            const win = d3Window(this.ref.current);\n            select(win)\n                // @ts-ignore\n                .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n                .on(MOUSEUP, null);\n            if (this.dragHappened) {\n                const { onDragComplete } = this.props;\n                if (onDragComplete !== undefined) {\n                    onDragComplete({ mouseXY }, e);\n                }\n            }\n            this.setState({\n                dragInProgress: false,\n            });\n            this.mouseInteraction = true;\n        };\n        this.canPan = () => {\n            const { getAllPanConditions } = this.props;\n            const { pan: initialPanEnabled } = this.props;\n            const { panEnabled, draggable: somethingSelected, } = getAllPanConditions()\n                .reduce((returnObj, a) => {\n                return {\n                    draggable: returnObj.draggable || a.draggable,\n                    panEnabled: returnObj.panEnabled && a.panEnabled,\n                };\n            }, {\n                draggable: false,\n                panEnabled: initialPanEnabled,\n            });\n            return {\n                panEnabled,\n                somethingSelected,\n            };\n        };\n        this.handleMouseDown = (e) => {\n            if (e.button !== 0) {\n                return;\n            }\n            const { xScale, chartConfig, onMouseDown } = this.props;\n            this.panHappened = false;\n            this.dragHappened = false;\n            this.focus = true;\n            if (!this.state.panInProgress\n                && this.mouseInteraction) {\n                const mouseXY = mousePosition(e);\n                const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n                const { panEnabled, somethingSelected, } = this.canPan();\n                const pan = panEnabled && !somethingSelected;\n                if (pan) {\n                    this.setState({\n                        panInProgress: pan,\n                        panStart: {\n                            panStartXScale: xScale,\n                            panOrigin: mouseXY,\n                            chartsToPan: currentCharts,\n                        },\n                    });\n                    const win = d3Window(this.ref.current);\n                    select(win)\n                        .on(MOUSEMOVE, this.handlePan)\n                        .on(MOUSEUP, this.handlePanEnd);\n                }\n                else if (somethingSelected) {\n                    this.setState({\n                        panInProgress: false,\n                        dragInProgress: true,\n                        panStart: null,\n                        dragStartPosition: mouseXY,\n                    });\n                    const { onDragStart } = this.props;\n                    if (onDragStart !== undefined) {\n                        onDragStart({ startPos: mouseXY }, e);\n                    }\n                    const win = d3Window(this.ref.current);\n                    select(win)\n                        .on(MOUSEMOVE, this.handleDrag)\n                        .on(MOUSEUP, this.handleDragEnd);\n                }\n                if (onMouseDown !== undefined) {\n                    onMouseDown(mouseXY, currentCharts, e);\n                }\n            }\n            e.preventDefault();\n        };\n        this.shouldPan = () => {\n            const { pan: panEnabled, onPan } = this.props;\n            return panEnabled\n                && onPan\n                && isDefined(this.state.panStart);\n        };\n        this.handlePan = () => {\n            const e = d3Event;\n            if (this.shouldPan()) {\n                this.panHappened = true;\n                const { panStartXScale, panOrigin, chartsToPan } = this.state.panStart;\n                let dx;\n                let dy;\n                let mouseXY;\n                if (this.mouseInteraction) {\n                    mouseXY = mouse(this.ref.current);\n                    this.lastNewPos = mouseXY;\n                    dx = mouseXY[0] - panOrigin[0];\n                    dy = mouseXY[1] - panOrigin[1];\n                }\n                else {\n                    mouseXY = touches(this.ref.current)[0];\n                    this.lastNewPos = mouseXY;\n                    dx = panOrigin[0] - mouseXY[0];\n                    dy = panOrigin[1] - mouseXY[1];\n                }\n                this.dx = dx;\n                this.dy = dy;\n                this.props.onPan(mouseXY, panStartXScale, { dx, dy }, chartsToPan, e);\n            }\n        };\n        this.handlePanEnd = () => {\n            const e = d3Event;\n            const { pan: panEnabled, onPanEnd } = this.props;\n            if (isDefined(this.state.panStart)) {\n                const { panStartXScale, chartsToPan } = this.state.panStart;\n                const win = d3Window(this.ref.current);\n                select(win)\n                    // @ts-ignore\n                    .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n                    .on(MOUSEUP, null)\n                    .on(TOUCHMOVE, null)\n                    .on(TOUCHEND, null);\n                if (this.panHappened\n                    && panEnabled\n                    && onPanEnd) {\n                    const { dx, dy } = this;\n                    delete this.dx;\n                    delete this.dy;\n                    onPanEnd(this.lastNewPos, panStartXScale, { dx, dy }, chartsToPan, e);\n                }\n                this.setState({\n                    panInProgress: false,\n                    panStart: null,\n                });\n            }\n        };\n        this.handleTouchMove = (e) => {\n            const { onMouseMove } = this.props;\n            if (onMouseMove === undefined) {\n                return;\n            }\n            const touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n            onMouseMove(touchXY, \"touch\", e);\n        };\n        this.handleTouchStart = (e) => {\n            this.mouseInteraction = false;\n            const { pan: panEnabled, chartConfig, onMouseMove } = this.props;\n            const { xScale, onPanEnd } = this.props;\n            if (e.touches.length === 1) {\n                this.panHappened = false;\n                const touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n                if (onMouseMove !== undefined) {\n                    onMouseMove(touchXY, \"touch\", e);\n                }\n                if (panEnabled) {\n                    const currentCharts = getCurrentCharts(chartConfig, touchXY);\n                    this.setState({\n                        panInProgress: true,\n                        panStart: {\n                            panStartXScale: xScale,\n                            panOrigin: touchXY,\n                            chartsToPan: currentCharts,\n                        },\n                    });\n                    const win = d3Window(this.ref.current);\n                    select(win)\n                        .on(TOUCHMOVE, this.handlePan, false)\n                        .on(TOUCHEND, this.handlePanEnd, false);\n                }\n            }\n            else if (e.touches.length === 2) {\n                // pinch zoom begin\n                // do nothing pinch zoom is handled in handleTouchMove\n                const { panInProgress, panStart } = this.state;\n                if (panInProgress && panEnabled && onPanEnd) {\n                    const { panStartXScale, panOrigin, chartsToPan } = panStart;\n                    const win = d3Window(this.ref.current);\n                    select(win)\n                        // @ts-ignore\n                        .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n                        .on(MOUSEUP, null)\n                        .on(TOUCHMOVE, this.handlePinchZoom, false)\n                        .on(TOUCHEND, this.handlePinchZoomEnd, false);\n                    const touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n                    const touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n                    if (this.panHappened\n                        && panEnabled\n                        && onPanEnd) {\n                        onPanEnd(this.lastNewPos, panStartXScale, panOrigin, chartsToPan, e);\n                    }\n                    this.setState({\n                        panInProgress: false,\n                        pinchZoomStart: {\n                            xScale,\n                            touch1Pos,\n                            touch2Pos,\n                            range: xScale.range(),\n                            chartsToPan,\n                        },\n                    });\n                }\n            }\n        };\n        this.handlePinchZoom = () => {\n            const e = d3Event;\n            const [touch1Pos, touch2Pos] = touches(this.ref.current);\n            const { xScale, zoom: zoomEnabled, onPinchZoom } = this.props;\n            const _a = this.state.pinchZoomStart, { chartsToPan } = _a, initialPinch = __rest(_a, [\"chartsToPan\"]);\n            if (zoomEnabled && onPinchZoom) {\n                onPinchZoom(initialPinch, {\n                    touch1Pos,\n                    touch2Pos,\n                    xScale,\n                }, e);\n            }\n        };\n        this.handlePinchZoomEnd = () => {\n            const e = d3Event;\n            const win = d3Window(this.ref.current);\n            select(win)\n                .on(TOUCHMOVE, null)\n                .on(TOUCHEND, null);\n            const { zoom: zoomEnabled, onPinchZoomEnd } = this.props;\n            const _a = this.state.pinchZoomStart, { chartsToPan } = _a, initialPinch = __rest(_a, [\"chartsToPan\"]);\n            if (zoomEnabled && onPinchZoomEnd) {\n                onPinchZoomEnd(initialPinch, e);\n            }\n            this.setState({\n                pinchZoomStart: undefined,\n            });\n        };\n        this.setCursorClass = (cursorOverrideClass) => {\n            if (cursorOverrideClass !== this.state.cursorOverrideClass) {\n                this.setState({\n                    cursorOverrideClass,\n                });\n            }\n        };\n        this.focus = props.focus;\n        this.state = {\n            panInProgress: false,\n        };\n    }\n    componentDidMount() {\n        const { disableInteraction } = this.props;\n        const { current } = this.ref;\n        if (current === null) {\n            return;\n        }\n        if (!disableInteraction) {\n            select(current)\n                .on(MOUSEENTER, this.handleEnter)\n                .on(MOUSELEAVE, this.handleLeave);\n            // @ts-ignore\n            current.addEventListener(\"wheel\", this.handleWheel, { passive: false });\n        }\n    }\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n    componentWillUnmount() {\n        const { disableInteraction } = this.props;\n        const { current } = this.ref;\n        if (current === null) {\n            return;\n        }\n        if (!disableInteraction) {\n            select(current)\n                .on(MOUSEENTER, null)\n                .on(MOUSELEAVE, null);\n            const win = d3Window(current);\n            select(win)\n                .on(MOUSEMOVE, null);\n            // @ts-ignore\n            current.removeEventListener(\"wheel\", this.handleWheel, { passive: false });\n        }\n    }\n    queuePanEnd() {\n        if (isDefined(this.panEndTimeout)) {\n            clearTimeout(this.panEndTimeout);\n        }\n        this.panEndTimeout = setTimeout(() => {\n            this.handlePanEnd();\n        }, 100);\n    }\n    cancelDrag() {\n        const win = d3Window(this.ref.current);\n        select(win)\n            // @ts-ignore\n            .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n            .on(MOUSEUP, null);\n        this.setState({\n            dragInProgress: false,\n        });\n        this.mouseInteraction = true;\n    }\n    render() {\n        const { height, width, disableInteraction, useCrossHairStyleCursor } = this.props;\n        const className = disableInteraction ? undefined :\n            this.state.cursorOverrideClass !== undefined\n                ? this.state.cursorOverrideClass\n                : !useCrossHairStyleCursor ? undefined : this.state.panInProgress\n                    ? \"react-financial-charts-grabbing-cursor\"\n                    : \"react-financial-charts-crosshair-cursor\";\n        const interactionProps = disableInteraction || {\n            onMouseDown: this.handleMouseDown,\n            onClick: this.handleClick,\n            onContextMenu: this.handleRightClick,\n            onTouchStart: this.handleTouchStart,\n            onTouchMove: this.handleTouchMove,\n        };\n        return (React.createElement(\"rect\", Object.assign({ ref: this.ref, className: className, width: width, height: height, style: { opacity: 0 } }, interactionProps)));\n    }\n}\nEventCapture.defaultProps = {\n    mouseMove: false,\n    zoom: false,\n    pan: false,\n    panSpeedMultiplier: 1,\n    focus: false,\n    onDragComplete: noop,\n    disableInteraction: false,\n};\n//# sourceMappingURL=EventCapture.js.map"]},"metadata":{},"sourceType":"module"}