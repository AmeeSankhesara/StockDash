{"ast":null,"code":"import { extent } from \"d3-array\";\nimport flattenDeep from \"lodash.flattendeep\";\nimport * as React from \"react\";\nimport { Chart } from \"../Chart\";\nimport { find, functor, getClosestItem, isDefined, isNotDefined, isObject, last, mapObject, shallowEqual, zipper } from \"./index\";\nexport function getChartOrigin(origin, contextWidth, contextHeight) {\n  const originCoordinates = typeof origin === \"function\" ? origin(contextWidth, contextHeight) : origin;\n  return originCoordinates;\n}\nexport function getDimensions({\n  width,\n  height\n}, chartProps) {\n  const chartHeight = chartProps.height || height;\n  return {\n    availableHeight: height,\n    width,\n    height: chartHeight\n  };\n}\n\nfunction values(func) {\n  return d => {\n    const obj = func(d);\n\n    if (isObject(obj)) {\n      return mapObject(obj);\n    }\n\n    return obj;\n  };\n}\n\nfunction isArraySize2AndNumber(yExtentsProp) {\n  if (Array.isArray(yExtentsProp) && yExtentsProp.length === 2) {\n    const [a, b] = yExtentsProp;\n    return typeof a === \"number\" && typeof b === \"number\";\n  }\n\n  return false;\n}\n\nexport function getNewChartConfig(innerDimension, children, existingChartConfig = []) {\n  return React.Children.map(children, each => {\n    if (each && each.type.toString() === Chart.toString()) {\n      const chartProps = Object.assign(Object.assign({}, Chart.defaultProps), each.props);\n      const {\n        id,\n        origin,\n        padding,\n        yExtents: yExtentsProp,\n        yScale: yScaleProp,\n        flipYScale,\n        yExtentsCalculator\n      } = chartProps;\n      const yScale = yScaleProp.copy();\n      const {\n        width,\n        height,\n        availableHeight\n      } = getDimensions(innerDimension, chartProps);\n      const {\n        yPan\n      } = chartProps;\n      let {\n        yPanEnabled\n      } = chartProps;\n      const yExtents = isDefined(yExtentsProp) ? (Array.isArray(yExtentsProp) ? yExtentsProp : [yExtentsProp]).map(functor) : undefined;\n      const prevChartConfig = find(existingChartConfig, d => d.id === id);\n\n      if (isArraySize2AndNumber(yExtentsProp)) {\n        if (isDefined(prevChartConfig) && prevChartConfig.yPan && prevChartConfig.yPanEnabled && yPan && yPanEnabled && shallowEqual(prevChartConfig.originalYExtentsProp, yExtentsProp)) {\n          // console.log(prevChartConfig.originalYExtentsProp, yExtentsProp)\n          // console.log(prevChartConfig.yScale.domain())\n          yScale.domain(prevChartConfig.yScale.domain());\n        } else {\n          const [a, b] = yExtentsProp;\n          yScale.domain([a, b]);\n        }\n      } else if (isDefined(prevChartConfig) && prevChartConfig.yPanEnabled) {\n        if (isArraySize2AndNumber(prevChartConfig.originalYExtentsProp)) {// do nothing\n        } else {\n          yScale.domain(prevChartConfig.yScale.domain());\n          yPanEnabled = true;\n        }\n      }\n\n      return {\n        id,\n        origin: functor(origin)(width, availableHeight),\n        padding,\n        originalYExtentsProp: yExtentsProp,\n        yExtents,\n        yExtentsCalculator,\n        flipYScale,\n        // yScale: setRange(yScale.copy(), height, padding, flipYScale),\n        yScale,\n        yPan,\n        yPanEnabled,\n        // mouseCoordinates,\n        width,\n        height\n      };\n    }\n\n    return undefined;\n  }).filter(each => isDefined(each));\n}\nexport function getCurrentCharts(chartConfig, mouseXY) {\n  const currentCharts = chartConfig.filter(eachConfig => {\n    const top = eachConfig.origin[1];\n    const bottom = top + eachConfig.height;\n    return mouseXY[1] > top && mouseXY[1] < bottom;\n  }).map(config => config.id);\n  return currentCharts;\n}\n\nfunction setRange(scale, height, padding, flipYScale) {\n  if (scale.rangeRoundPoints || isNotDefined(scale.invert)) {\n    if (isNaN(padding)) {\n      throw new Error(\"padding has to be a number for ordinal scale\");\n    }\n\n    if (scale.rangeRoundPoints) {\n      scale.rangeRoundPoints(flipYScale ? [0, height] : [height, 0], padding);\n    }\n\n    if (scale.rangeRound) {\n      scale.range(flipYScale ? [0, height] : [height, 0]).padding(padding);\n    }\n  } else {\n    const {\n      top,\n      bottom\n    } = isNaN(padding) ? padding : {\n      top: padding,\n      bottom: padding\n    };\n    scale.range(flipYScale ? [top, height - bottom] : [height - bottom, top]);\n  }\n\n  return scale;\n}\n\nfunction yDomainFromYExtents(yExtents, yScale, plotData) {\n  const yValues = yExtents.map(eachExtent => plotData.map(values(eachExtent)));\n  const allYValues = flattenDeep(yValues);\n  const realYDomain = yScale.invert ? extent(allYValues) : [...new Set(allYValues).values()];\n  return realYDomain;\n}\n\nexport function getChartConfigWithUpdatedYScales(chartConfig, {\n  plotData,\n  xAccessor,\n  displayXAccessor,\n  fullData\n}, xDomain, dy, chartsToPan) {\n  const yDomains = chartConfig.map(({\n    yExtentsCalculator,\n    yExtents,\n    yScale\n  }) => {\n    const realYDomain = isDefined(yExtentsCalculator) ? yExtentsCalculator({\n      plotData,\n      xDomain,\n      xAccessor,\n      displayXAccessor,\n      fullData\n    }) : yDomainFromYExtents(yExtents, yScale, plotData);\n    const yDomainDY = isDefined(dy) ? yScale.range().map(each => each - dy).map(yScale.invert) : yScale.domain();\n    return {\n      realYDomain,\n      yDomainDY,\n      prevYDomain: yScale.domain()\n    };\n  });\n  const combine = zipper().combine((config, {\n    realYDomain,\n    yDomainDY,\n    prevYDomain\n  }) => {\n    const {\n      id,\n      padding,\n      height,\n      yScale,\n      yPan,\n      flipYScale,\n      yPanEnabled = false\n    } = config;\n    const another = isDefined(chartsToPan) ? chartsToPan.indexOf(id) > -1 : true;\n    const domain = yPan && yPanEnabled ? another ? yDomainDY : prevYDomain : realYDomain;\n    const newYScale = setRange(yScale.copy().domain(domain), height, padding, flipYScale);\n    return Object.assign(Object.assign({}, config), {\n      yScale: newYScale,\n      realYDomain\n    });\n  }); // @ts-ignore\n\n  const updatedChartConfig = combine(chartConfig, yDomains);\n  return updatedChartConfig;\n}\nexport function getCurrentItem(xScale, xAccessor, mouseXY, plotData) {\n  let xValue;\n  let item;\n\n  if (xScale.invert) {\n    xValue = xScale.invert(mouseXY[0]);\n    item = getClosestItem(plotData, xValue, xAccessor);\n  } else {\n    const dr = xScale.range().map((d, idx) => ({\n      x: Math.abs(d - mouseXY[0]),\n      idx\n    })).reduce((a, b) => a.x < b.x ? a : b);\n    item = isDefined(dr) ? plotData[dr.idx] : plotData[0];\n  }\n\n  return item;\n}\nexport function getXValue(xScale, xAccessor, mouseXY, plotData) {\n  let xValue;\n  let item;\n\n  if (xScale.invert) {\n    xValue = xScale.invert(mouseXY[0]);\n\n    if (xValue > xAccessor(last(plotData)) && xScale.value) {\n      return Math.round(xValue);\n    } else {\n      item = getClosestItem(plotData, xValue, xAccessor);\n    }\n  } else {\n    const dr = xScale.range().map((d, idx) => ({\n      x: Math.abs(d - mouseXY[0]),\n      idx\n    })).reduce((a, b) => a.x < b.x ? a : b);\n    item = isDefined(dr) ? plotData[dr.idx] : plotData[0];\n  }\n\n  return xAccessor(item);\n}","map":{"version":3,"sources":["../../src/utils/ChartDataUtil.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { extent } from \"d3-array\";\nimport flattenDeep from \"lodash.flattendeep\";\nimport * as React from \"react\";\nimport { Chart } from \"../Chart\";\nimport { find, functor, getClosestItem, isDefined, isNotDefined, isObject, last, mapObject, shallowEqual, zipper, } from \"./index\";\nexport function getChartOrigin(origin, contextWidth, contextHeight) {\n    const originCoordinates = typeof origin === \"function\"\n        ? origin(contextWidth, contextHeight)\n        : origin;\n    return originCoordinates;\n}\nexport function getDimensions({ width, height }, chartProps) {\n    const chartHeight = (chartProps.height || height);\n    return {\n        availableHeight: height,\n        width,\n        height: chartHeight,\n    };\n}\nfunction values(func) {\n    return (d) => {\n        const obj = func(d);\n        if (isObject(obj)) {\n            return mapObject(obj);\n        }\n        return obj;\n    };\n}\nfunction isArraySize2AndNumber(yExtentsProp) {\n    if (Array.isArray(yExtentsProp) && yExtentsProp.length === 2) {\n        const [a, b] = yExtentsProp;\n        return (typeof a === \"number\" && typeof b === \"number\");\n    }\n    return false;\n}\nexport function getNewChartConfig(innerDimension, children, existingChartConfig = []) {\n    return React.Children.map(children, (each) => {\n        if (each && each.type.toString() === Chart.toString()) {\n            const chartProps = Object.assign(Object.assign({}, Chart.defaultProps), each.props);\n            const { id, origin, padding, yExtents: yExtentsProp, yScale: yScaleProp, flipYScale, yExtentsCalculator, } = chartProps;\n            const yScale = yScaleProp.copy();\n            const { width, height, availableHeight, } = getDimensions(innerDimension, chartProps);\n            const { yPan } = chartProps;\n            let { yPanEnabled } = chartProps;\n            const yExtents = isDefined(yExtentsProp)\n                ? (Array.isArray(yExtentsProp) ? yExtentsProp : [yExtentsProp]).map(functor)\n                : undefined;\n            const prevChartConfig = find(existingChartConfig, (d) => d.id === id);\n            if (isArraySize2AndNumber(yExtentsProp)) {\n                if (isDefined(prevChartConfig)\n                    && prevChartConfig.yPan\n                    && prevChartConfig.yPanEnabled\n                    && yPan\n                    && yPanEnabled\n                    && shallowEqual(prevChartConfig.originalYExtentsProp, yExtentsProp)) {\n                    // console.log(prevChartConfig.originalYExtentsProp, yExtentsProp)\n                    // console.log(prevChartConfig.yScale.domain())\n                    yScale.domain(prevChartConfig.yScale.domain());\n                }\n                else {\n                    const [a, b] = yExtentsProp;\n                    yScale.domain([a, b]);\n                }\n            }\n            else if (isDefined(prevChartConfig) && prevChartConfig.yPanEnabled) {\n                if (isArraySize2AndNumber(prevChartConfig.originalYExtentsProp)) {\n                    // do nothing\n                }\n                else {\n                    yScale.domain(prevChartConfig.yScale.domain());\n                    yPanEnabled = true;\n                }\n            }\n            return {\n                id,\n                origin: functor(origin)(width, availableHeight),\n                padding,\n                originalYExtentsProp: yExtentsProp,\n                yExtents,\n                yExtentsCalculator,\n                flipYScale,\n                // yScale: setRange(yScale.copy(), height, padding, flipYScale),\n                yScale,\n                yPan,\n                yPanEnabled,\n                // mouseCoordinates,\n                width,\n                height,\n            };\n        }\n        return undefined;\n    }).filter((each) => isDefined(each));\n}\nexport function getCurrentCharts(chartConfig, mouseXY) {\n    const currentCharts = chartConfig.filter((eachConfig) => {\n        const top = eachConfig.origin[1];\n        const bottom = top + eachConfig.height;\n        return (mouseXY[1] > top && mouseXY[1] < bottom);\n    }).map((config) => config.id);\n    return currentCharts;\n}\nfunction setRange(scale, height, padding, flipYScale) {\n    if (scale.rangeRoundPoints || isNotDefined(scale.invert)) {\n        if (isNaN(padding)) {\n            throw new Error(\"padding has to be a number for ordinal scale\");\n        }\n        if (scale.rangeRoundPoints) {\n            scale.rangeRoundPoints(flipYScale ? [0, height] : [height, 0], padding);\n        }\n        if (scale.rangeRound) {\n            scale.range(flipYScale ? [0, height] : [height, 0]).padding(padding);\n        }\n    }\n    else {\n        const { top, bottom } = isNaN(padding)\n            ? padding\n            : { top: padding, bottom: padding };\n        scale.range(flipYScale ? [top, height - bottom] : [height - bottom, top]);\n    }\n    return scale;\n}\nfunction yDomainFromYExtents(yExtents, yScale, plotData) {\n    const yValues = yExtents.map((eachExtent) => plotData.map(values(eachExtent)));\n    const allYValues = flattenDeep(yValues);\n    const realYDomain = (yScale.invert)\n        ? extent(allYValues)\n        : [...new Set(allYValues).values()];\n    return realYDomain;\n}\nexport function getChartConfigWithUpdatedYScales(chartConfig, { plotData, xAccessor, displayXAccessor, fullData }, xDomain, dy, chartsToPan) {\n    const yDomains = chartConfig\n        .map(({ yExtentsCalculator, yExtents, yScale }) => {\n        const realYDomain = isDefined(yExtentsCalculator)\n            ? yExtentsCalculator({ plotData, xDomain, xAccessor, displayXAccessor, fullData })\n            : yDomainFromYExtents(yExtents, yScale, plotData);\n        const yDomainDY = isDefined(dy)\n            ? yScale.range().map((each) => each - dy).map(yScale.invert)\n            : yScale.domain();\n        return {\n            realYDomain,\n            yDomainDY,\n            prevYDomain: yScale.domain(),\n        };\n    });\n    const combine = zipper()\n        .combine((config, { realYDomain, yDomainDY, prevYDomain }) => {\n        const { id, padding, height, yScale, yPan, flipYScale, yPanEnabled = false } = config;\n        const another = isDefined(chartsToPan)\n            ? chartsToPan.indexOf(id) > -1\n            : true;\n        const domain = yPan && yPanEnabled\n            ? another ? yDomainDY : prevYDomain\n            : realYDomain;\n        const newYScale = setRange(yScale.copy().domain(domain), height, padding, flipYScale);\n        return Object.assign(Object.assign({}, config), { yScale: newYScale, realYDomain });\n    });\n    // @ts-ignore\n    const updatedChartConfig = combine(chartConfig, yDomains);\n    return updatedChartConfig;\n}\nexport function getCurrentItem(xScale, xAccessor, mouseXY, plotData) {\n    let xValue;\n    let item;\n    if (xScale.invert) {\n        xValue = xScale.invert(mouseXY[0]);\n        item = getClosestItem(plotData, xValue, xAccessor);\n    }\n    else {\n        const dr = xScale\n            .range()\n            .map((d, idx) => ({ x: Math.abs(d - mouseXY[0]), idx }))\n            .reduce((a, b) => a.x < b.x ? a : b);\n        item = isDefined(dr) ? plotData[dr.idx] : plotData[0];\n    }\n    return item;\n}\nexport function getXValue(xScale, xAccessor, mouseXY, plotData) {\n    let xValue;\n    let item;\n    if (xScale.invert) {\n        xValue = xScale.invert(mouseXY[0]);\n        if (xValue > xAccessor(last(plotData)) && xScale.value) {\n            return Math.round(xValue);\n        }\n        else {\n            item = getClosestItem(plotData, xValue, xAccessor);\n        }\n    }\n    else {\n        const dr = xScale\n            .range()\n            .map((d, idx) => ({ x: Math.abs(d - mouseXY[0]), idx }))\n            .reduce((a, b) => a.x < b.x ? a : b);\n        item = isDefined(dr) ? plotData[dr.idx] : plotData[0];\n    }\n    return xAccessor(item);\n}\n//# sourceMappingURL=ChartDataUtil.js.map"]},"metadata":{},"sourceType":"module"}