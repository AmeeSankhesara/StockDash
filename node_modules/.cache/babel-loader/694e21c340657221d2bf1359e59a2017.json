{"ast":null,"code":"var _jsxFileName = \"/Users/ameesankhesara/Desktop/CourseWork/Spring-2020/StockDash/src/SearchBar.js\";\nimport React, { Component } from \"react\";\nimport \"./SearchBar.css\";\nimport { loadLatestQuote, getCompanyProfile, logo, symbols_company, sector_perf, getFullHistoricalData } from \"./RestApiCalls\";\nimport constructLatestQuote from \"./ConstructLatestQuote\";\nimport LoadLatestQuote from \"./LoadLatestQuote\";\nimport LoadCompanyProfile from \"./LoadCompanyProfile\";\nimport SectorPerformance from \"./SectorPerformance\";\nimport StockChartBar from \"./StockChartBar\";\nimport LoadStockTable from \"./LoadStockTable\"; //Search Bar (AutoComplete Textbox) with all results.\n\nclass SearchBar extends Component {\n  constructor(property) {\n    super(property);\n\n    this.onTextChanged = e => {\n      const value = e.target.value;\n\n      if (value.length === 0) {\n        this.setState({\n          text: ''\n        });\n        this.setState({\n          suggestions: []\n        });\n        this.setState({\n          companyName: ''\n        }, this.GetStock_MainFunction);\n      }\n\n      let suggest = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(`^${value}`, 'i');\n        suggest = this.state.companyNamesFromJSON.sort().filter(v => regex.test(v));\n      }\n\n      this.setState({\n        suggestions: suggest,\n        text: value\n      });\n    };\n\n    this.state = {\n      suggestions: [],\n      text: '',\n      companyNamesFromJSON: [],\n      company_symbol_json: [],\n      latestQuote: null,\n      companyName: \"\",\n      logo_img: null,\n      quote: null,\n      companyprofile: null,\n      sector_data: null,\n      stockPrice: []\n    };\n    this.symbol = {\n      value: \"\"\n    };\n    this.GetStock_MainFunction = this.GetStock_MainFunction.bind(this);\n    this.onTextChanged = this.onTextChanged.bind(this);\n    this.renderSuggestion = this.renderSuggestion.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.getCompanyNames = this.getCompanyNames.bind(this);\n  } //On Detecting change in textbox value, populate the company name suggestions\n  //If text is empty, reset the states.\n\n\n  //On selecting the company name from the drop down, call the main function: Get Stock\n  suggestionsSelected(value) {\n    this.setState({\n      text: value\n    });\n    this.setState({\n      suggestions: []\n    });\n    this.setState({\n      companyName: value\n    }, this.GetStock_MainFunction);\n  } //Renders company name suggestions in a list\n\n\n  renderSuggestion() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    var i = 0;\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      key: i++,\n      onClick: () => this.suggestionsSelected(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 40\n      }\n    }, item)));\n  } //Given the company name, find the symbol to use in subsequent requests\n\n\n  GetSymbol(companyName) {\n    for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n      if (this.state.company_symbol_json[i].name.toLowerCase().includes(companyName.toLowerCase())) {\n        this.symbol.value = this.state.company_symbol_json[i].symbol;\n        return;\n      }\n    }\n  } //Main Function: Get response from all APIS: Latest Quote, Company Profile, Logo\n\n\n  GetStock_MainFunction() {\n    if (this.state.companyName === undefined || this.state.companyName.length === 0) {\n      this.setState({\n        latestQuote: null\n      });\n      this.setState({\n        logo_img: null\n      });\n      this.setState({\n        quote: null\n      });\n      this.setState({\n        companyprofile: null\n      });\n    } else {\n      this.GetSymbol(this.state.companyName);\n      Promise.all([loadLatestQuote(this.symbol.value), getCompanyProfile(this.symbol.value), logo(this.symbol.value), getFullHistoricalData(this.symbol.value)]).then(values => {\n        let quote_data = values[0];\n        this.setState({\n          latestQuote: constructLatestQuote(quote_data)\n        });\n        this.setState({\n          logo_img: values[2]\n        });\n        let quote_temp = { ...this.state.latestQuote,\n          logo_img: this.state.logo_img\n        };\n        this.setState({\n          quote: quote_temp\n        });\n        this.setState({\n          companyprofile: values[1]['profile']\n        });\n      });\n    }\n  } //Populate all the company Names to use for suggestions later\n\n\n  getCompanyNames() {\n    var data = [];\n\n    for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n      if (this.state.company_symbol_json[i].name.length !== 0) {\n        data.push(this.state.company_symbol_json[i].name);\n      }\n    }\n\n    this.setState({\n      companyNamesFromJSON: data\n    });\n  } //Executed on load: Symbols and Company mapping data, Sector Performance\n\n\n  async componentDidMount() {\n    Promise.all([symbols_company(), sector_perf()]).then(values => {\n      this.setState({\n        company_symbol_json: values[0]\n      }, this.getCompanyNames);\n      let data_temp = {};\n      data_temp = {\n        basicMaterials: values[1]['sectorPerformance'][0].changesPercentage,\n        CommunicationServices: values[1]['sectorPerformance'][1].changesPercentage,\n        Conglomerates: values[1]['sectorPerformance'][2].changesPercentage,\n        ConsumerCyclical: values[1]['sectorPerformance'][3].changesPercentage,\n        ConsumerDefensive: values[1]['sectorPerformance'][4].changesPercentage,\n        Energy: values[1]['sectorPerformance'][5].changesPercentage,\n        Financial: values[1]['sectorPerformance'][6].changesPercentage,\n        FinancialServices: values[1]['sectorPerformance'][7].changesPercentage,\n        Healthcare: values[1]['sectorPerformance'][8].changesPercentage,\n        IndustrialGoods: values[1]['sectorPerformance'][9].changesPercentage,\n        Industrials: values[1]['sectorPerformance'][10].changesPercentage,\n        RealEstate: values[1]['sectorPerformance'][11].changesPercentage,\n        Services: values[1]['sectorPerformance'][12].changesPercentage,\n        Technology: values[1]['sectorPerformance'][13].changesPercentage,\n        Utilities: values[1]['sectorPerformance'][14].changesPercentage\n      };\n      this.setState({\n        sector_data: data_temp\n      });\n    });\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoComplete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: text,\n      placeholder: \"Enter name of organization\",\n      onChange: this.onTextChanged,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }), this.renderSuggestion()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block_latestquote\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, this.state.quote == null ? this.state.sector_data == null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 83\n      }\n    }) : /*#__PURE__*/React.createElement(SectorPerformance, Object.assign({}, this.state.sector_data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 124\n      }\n    })) : /*#__PURE__*/React.createElement(LoadLatestQuote, Object.assign({}, this.state.quote, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 176\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block_latestquote\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, this.state.companyprofile == null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 58\n      }\n    }) : /*#__PURE__*/React.createElement(LoadCompanyProfile, Object.assign({}, this.state.companyprofile, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 99\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StockChartBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, this.state.stockPrice == null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 50\n      }\n    }) : /*#__PURE__*/React.createElement(LoadStockTable, {\n      stockprice: this.state.stockPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 91\n      }\n    })));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/ameesankhesara/Desktop/CourseWork/Spring-2020/StockDash/src/SearchBar.js"],"names":["React","Component","loadLatestQuote","getCompanyProfile","logo","symbols_company","sector_perf","getFullHistoricalData","constructLatestQuote","LoadLatestQuote","LoadCompanyProfile","SectorPerformance","StockChartBar","LoadStockTable","SearchBar","constructor","property","onTextChanged","e","value","target","length","setState","text","suggestions","companyName","GetStock_MainFunction","suggest","regex","RegExp","state","companyNamesFromJSON","sort","filter","v","test","company_symbol_json","latestQuote","logo_img","quote","companyprofile","sector_data","stockPrice","symbol","bind","renderSuggestion","suggestionsSelected","getCompanyNames","i","map","item","GetSymbol","name","toLowerCase","includes","undefined","Promise","all","then","values","quote_data","quote_temp","data","push","componentDidMount","data_temp","basicMaterials","changesPercentage","CommunicationServices","Conglomerates","ConsumerCyclical","ConsumerDefensive","Energy","Financial","FinancialServices","Healthcare","IndustrialGoods","Industrials","RealEstate","Services","Technology","Utilities","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./SearchBar.css\";\nimport { loadLatestQuote, getCompanyProfile, logo, symbols_company, sector_perf, getFullHistoricalData } from \"./RestApiCalls\";\nimport constructLatestQuote from \"./ConstructLatestQuote\";\nimport LoadLatestQuote from \"./LoadLatestQuote\";\nimport LoadCompanyProfile from \"./LoadCompanyProfile\";\nimport SectorPerformance from \"./SectorPerformance\";\nimport StockChartBar from \"./StockChartBar\";\nimport LoadStockTable from \"./LoadStockTable\";\n \n//Search Bar (AutoComplete Textbox) with all results.\nclass SearchBar extends Component {\n\n    constructor(property) {\n        super(property);\n        this.state = { suggestions: [], text: '', companyNamesFromJSON: [], company_symbol_json: [], latestQuote: null, companyName: \"\", logo_img: null, quote: null, companyprofile: null, sector_data: null, stockPrice:[] };\n        this.symbol = { value: \"\" };\n        this.GetStock_MainFunction = this.GetStock_MainFunction.bind(this);\n        this.onTextChanged = this.onTextChanged.bind(this);\n        this.renderSuggestion = this.renderSuggestion.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.getCompanyNames = this.getCompanyNames.bind(this);\n\n    }\n\n    //On Detecting change in textbox value, populate the company name suggestions\n    //If text is empty, reset the states.\n    onTextChanged = (e) => {\n        const value = e.target.value;\n        if (value.length === 0) {\n            this.setState({ text: '' });\n            this.setState({ suggestions: [] });\n            this.setState({ companyName: '' }, this.GetStock_MainFunction);\n        }\n        let suggest = [];\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            suggest = this.state.companyNamesFromJSON.sort().filter(v => regex.test(v));\n        }\n        this.setState({ suggestions: suggest, text: value });\n\n    }\n\n    //On selecting the company name from the drop down, call the main function: Get Stock\n    suggestionsSelected(value) {\n        this.setState({ text: value });\n        this.setState({ suggestions: [] });\n        this.setState({ companyName: value }, this.GetStock_MainFunction);\n    }\n\n    //Renders company name suggestions in a list\n    renderSuggestion() {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        var i = 0;\n        return (<ul>\n            {suggestions.map((item) => <li key={i++} onClick={() => this.suggestionsSelected(item)}>{item}</li>)}\n        </ul>)\n    }\n\n    //Given the company name, find the symbol to use in subsequent requests\n    GetSymbol(companyName) {\n        for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n            if (\n                this.state.company_symbol_json[i].name\n                    .toLowerCase()\n                    .includes(companyName.toLowerCase())\n            ) {\n                this.symbol.value = this.state.company_symbol_json[i].symbol;\n                return;\n            }\n        }\n    }\n\n    //Main Function: Get response from all APIS: Latest Quote, Company Profile, Logo\n    GetStock_MainFunction() {\n        if (this.state.companyName === undefined || this.state.companyName.length === 0) {\n            this.setState({ latestQuote: null });\n            this.setState({ logo_img: null });\n            this.setState({ quote: null });\n            this.setState({ companyprofile: null });\n        } else {\n            this.GetSymbol(this.state.companyName);\n            Promise.all([\n                loadLatestQuote(this.symbol.value),\n                getCompanyProfile(this.symbol.value),\n                logo(this.symbol.value),\n                getFullHistoricalData(this.symbol.value)\n            ]).then((values) => {\n                let quote_data = values[0];\n                this.setState({ latestQuote: constructLatestQuote(quote_data) });\n                this.setState({ logo_img: values[2] });\n                let quote_temp = { ...this.state.latestQuote, logo_img: this.state.logo_img };\n                this.setState({ quote: quote_temp });\n                this.setState({ companyprofile: values[1]['profile'] });\n            });\n        }\n    }\n\n    //Populate all the company Names to use for suggestions later\n    getCompanyNames() {\n        var data = []\n        for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n            if (this.state.company_symbol_json[i].name.length !== 0) {\n                data.push(this.state.company_symbol_json[i].name);\n            }\n        }\n        this.setState({ companyNamesFromJSON: data });\n    }\n\n    //Executed on load: Symbols and Company mapping data, Sector Performance\n    async componentDidMount() {\n        Promise.all([\n            symbols_company(),\n            sector_perf()\n        ]).then((values) => {\n            this.setState({ company_symbol_json: values[0] }, this.getCompanyNames);\n            let data_temp = {}\n            data_temp = {\n                basicMaterials: values[1]['sectorPerformance'][0].changesPercentage,\n                CommunicationServices: values[1]['sectorPerformance'][1].changesPercentage,\n                Conglomerates: values[1]['sectorPerformance'][2].changesPercentage,\n                ConsumerCyclical: values[1]['sectorPerformance'][3].changesPercentage,\n                ConsumerDefensive: values[1]['sectorPerformance'][4].changesPercentage,\n                Energy: values[1]['sectorPerformance'][5].changesPercentage,\n                Financial: values[1]['sectorPerformance'][6].changesPercentage,\n                FinancialServices: values[1]['sectorPerformance'][7].changesPercentage,\n                Healthcare: values[1]['sectorPerformance'][8].changesPercentage,\n                IndustrialGoods: values[1]['sectorPerformance'][9].changesPercentage,\n                Industrials: values[1]['sectorPerformance'][10].changesPercentage,\n                RealEstate: values[1]['sectorPerformance'][11].changesPercentage,\n                Services: values[1]['sectorPerformance'][12].changesPercentage,\n                Technology: values[1]['sectorPerformance'][13].changesPercentage,\n                Utilities: values[1]['sectorPerformance'][14].changesPercentage\n            }\n            this.setState({ sector_data: data_temp });\n        });\n    }\n\n    render() {\n        const { text } = this.state;\n        return (\n            <div>\n                <div className=\"AutoComplete\">\n                    <input value={text} placeholder=\"Enter name of organization\" onChange={this.onTextChanged} type=\"text\" />\n                    {this.renderSuggestion()}\n                </div>\n                <div className=\"block_latestquote\">\n                    {this.state.quote == null ? (this.state.sector_data == null ? <div className=\"null_condition\"></div> : <SectorPerformance{...this.state.sector_data} />) : <LoadLatestQuote{...this.state.quote} />}\n                </div>\n                <div className=\"block_latestquote\">\n                    {this.state.companyprofile == null ? <div className=\"null_condition\"></div> : <LoadCompanyProfile{...this.state.companyprofile} />}\n                </div>\n                <div>\n                    <StockChartBar />\n                </div>\n                <div>\n                {this.state.stockPrice == null ? <div className=\"null_condition\"></div> : <LoadStockTable stockprice={this.state.stockPrice}/>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}