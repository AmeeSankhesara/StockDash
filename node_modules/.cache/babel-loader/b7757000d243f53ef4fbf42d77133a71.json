{"ast":null,"code":"import identity from \"./identity\";\nimport { functor } from \"./index\";\nimport noop from \"./noop\";\nexport default function () {\n  let undefinedValue;\n  let windowSize = 10;\n  let accumulator = noop;\n  let source = identity;\n  let skipInitial = 0;\n\n  const mappedSlidingWindow = function (data) {\n    // @ts-ignore\n    const size = functor(windowSize).apply(this, arguments);\n    const windowData = [];\n    let accumulatorIdx = 0;\n    const undef = functor(undefinedValue);\n    const result = [];\n    data.forEach(function (d, i) {\n      let mapped;\n\n      if (i < skipInitial + size - 1) {\n        mapped = undef(d, i);\n        result.push(mapped);\n        windowData.push(mapped);\n        return;\n      }\n\n      if (i >= skipInitial + size) {\n        windowData.shift();\n      } // @ts-ignore\n\n\n      windowData.push(source(d, i)); // @ts-ignore\n\n      mapped = accumulator(windowData, i, accumulatorIdx++);\n      result.push(mapped);\n      windowData.pop();\n      windowData.push(mapped);\n      return;\n    });\n    return result;\n  };\n\n  mappedSlidingWindow.undefinedValue = function (x) {\n    if (!arguments.length) {\n      return undefinedValue;\n    }\n\n    undefinedValue = x;\n    return mappedSlidingWindow;\n  };\n\n  mappedSlidingWindow.windowSize = function (x) {\n    if (!arguments.length) {\n      return windowSize;\n    }\n\n    windowSize = x;\n    return mappedSlidingWindow;\n  };\n\n  mappedSlidingWindow.accumulator = function (x) {\n    if (!arguments.length) {\n      return accumulator;\n    }\n\n    accumulator = x;\n    return mappedSlidingWindow;\n  };\n\n  mappedSlidingWindow.skipInitial = function (x) {\n    if (!arguments.length) {\n      return skipInitial;\n    }\n\n    skipInitial = x;\n    return mappedSlidingWindow;\n  };\n\n  mappedSlidingWindow.source = function (x) {\n    if (!arguments.length) {\n      return source;\n    }\n\n    source = x;\n    return mappedSlidingWindow;\n  };\n\n  return mappedSlidingWindow;\n}","map":{"version":3,"sources":["../../src/utils/mappedSlidingWindow.ts"],"names":[],"mappings":"AACA,OAAO,QAAP,MAAqB,YAArB;AACA,SAAS,OAAT,QAAwB,SAAxB;AACA,OAAO,IAAP,MAAiB,QAAjB;AAEA,eAAc,YAAA;AAEV,MAAI,cAAJ;AACA,MAAI,UAAU,GAAG,EAAjB;AACA,MAAI,WAAW,GAAG,IAAlB;AACA,MAAI,MAAM,GAAG,QAAb;AACA,MAAI,WAAW,GAAG,CAAlB;;AAEA,QAAM,mBAAmB,GAAG,UAAU,IAAV,EAAc;AACtC;AACA,UAAM,IAAI,GAAG,OAAO,CAAC,UAAD,CAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,SAAhC,CAAb;AACA,UAAM,UAAU,GAAU,EAA1B;AACA,QAAI,cAAc,GAAG,CAArB;AACA,UAAM,KAAK,GAAG,OAAO,CAAC,cAAD,CAArB;AACA,UAAM,MAAM,GAAU,EAAtB;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,UAAU,CAAV,EAAa,CAAb,EAAc;AACvB,UAAI,MAAJ;;AACA,UAAI,CAAC,GAAI,WAAW,GAAG,IAAd,GAAqB,CAA9B,EAAkC;AAC9B,QAAA,MAAM,GAAG,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAd;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,MAAhB;AACA;AACH;;AACD,UAAI,CAAC,IAAK,WAAW,GAAG,IAAxB,EAA+B;AAC3B,QAAA,UAAU,CAAC,KAAX;AACH,OAVsB,CAWvB;;;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAtB,EAZuB,CAcvB;;AACA,MAAA,MAAM,GAAG,WAAW,CAAC,UAAD,EAAa,CAAb,EAAgB,cAAc,EAA9B,CAApB;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AACA,MAAA,UAAU,CAAC,GAAX;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,MAAhB;AACA;AACH,KApBD;AAqBA,WAAO,MAAP;AACH,GA7BD;;AA+BA,EAAA,mBAAmB,CAAC,cAApB,GAAqC,UAAU,CAAV,EAAW;AAC5C,QAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACnB,aAAO,cAAP;AACH;;AACD,IAAA,cAAc,GAAG,CAAjB;AACA,WAAO,mBAAP;AACH,GAND;;AAOA,EAAA,mBAAmB,CAAC,UAApB,GAAiC,UAAU,CAAV,EAAW;AACxC,QAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACnB,aAAO,UAAP;AACH;;AACD,IAAA,UAAU,GAAG,CAAb;AACA,WAAO,mBAAP;AACH,GAND;;AAOA,EAAA,mBAAmB,CAAC,WAApB,GAAkC,UAAU,CAAV,EAAW;AACzC,QAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACnB,aAAO,WAAP;AACH;;AACD,IAAA,WAAW,GAAG,CAAd;AACA,WAAO,mBAAP;AACH,GAND;;AAOA,EAAA,mBAAmB,CAAC,WAApB,GAAkC,UAAU,CAAV,EAAW;AACzC,QAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACnB,aAAO,WAAP;AACH;;AACD,IAAA,WAAW,GAAG,CAAd;AACA,WAAO,mBAAP;AACH,GAND;;AAOA,EAAA,mBAAmB,CAAC,MAApB,GAA6B,UAAU,CAAV,EAAW;AACpC,QAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACnB,aAAO,MAAP;AACH;;AACD,IAAA,MAAM,GAAG,CAAT;AACA,WAAO,mBAAP;AACH,GAND;;AAQA,SAAO,mBAAP;AACH","sourceRoot":"","sourcesContent":["import identity from \"./identity\";\nimport { functor } from \"./index\";\nimport noop from \"./noop\";\nexport default function () {\n    let undefinedValue;\n    let windowSize = 10;\n    let accumulator = noop;\n    let source = identity;\n    let skipInitial = 0;\n    const mappedSlidingWindow = function (data) {\n        // @ts-ignore\n        const size = functor(windowSize).apply(this, arguments);\n        const windowData = [];\n        let accumulatorIdx = 0;\n        const undef = functor(undefinedValue);\n        const result = [];\n        data.forEach(function (d, i) {\n            let mapped;\n            if (i < (skipInitial + size - 1)) {\n                mapped = undef(d, i);\n                result.push(mapped);\n                windowData.push(mapped);\n                return;\n            }\n            if (i >= (skipInitial + size)) {\n                windowData.shift();\n            }\n            // @ts-ignore\n            windowData.push(source(d, i));\n            // @ts-ignore\n            mapped = accumulator(windowData, i, accumulatorIdx++);\n            result.push(mapped);\n            windowData.pop();\n            windowData.push(mapped);\n            return;\n        });\n        return result;\n    };\n    mappedSlidingWindow.undefinedValue = function (x) {\n        if (!arguments.length) {\n            return undefinedValue;\n        }\n        undefinedValue = x;\n        return mappedSlidingWindow;\n    };\n    mappedSlidingWindow.windowSize = function (x) {\n        if (!arguments.length) {\n            return windowSize;\n        }\n        windowSize = x;\n        return mappedSlidingWindow;\n    };\n    mappedSlidingWindow.accumulator = function (x) {\n        if (!arguments.length) {\n            return accumulator;\n        }\n        accumulator = x;\n        return mappedSlidingWindow;\n    };\n    mappedSlidingWindow.skipInitial = function (x) {\n        if (!arguments.length) {\n            return skipInitial;\n        }\n        skipInitial = x;\n        return mappedSlidingWindow;\n    };\n    mappedSlidingWindow.source = function (x) {\n        if (!arguments.length) {\n            return source;\n        }\n        source = x;\n        return mappedSlidingWindow;\n    };\n    return mappedSlidingWindow;\n}\n//# sourceMappingURL=mappedSlidingWindow.js.map"]},"metadata":{},"sourceType":"module"}