{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { extent as d3Extent, max, min } from \"d3-array\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { clearCanvas, functor, head, identity, isDefined, isNotDefined, last, noop, shallowEqual } from \"./utils\";\nimport { mouseBasedZoomAnchor } from \"./utils/zoomBehavior\";\nimport { getChartConfigWithUpdatedYScales, getCurrentCharts, getCurrentItem, getNewChartConfig } from \"./utils/ChartDataUtil\";\nimport { EventCapture } from \"./EventCapture\";\nimport { CanvasContainer } from \"./CanvasContainer\";\nimport evaluator from \"./scale/evaluator\";\nconst CANDIDATES_FOR_RESET = [\"seriesName\"];\n\nfunction shouldResetChart(thisProps, nextProps) {\n  return !CANDIDATES_FOR_RESET.every(key => {\n    const result = shallowEqual(thisProps[key], nextProps[key]); // console.log(key, result);\n\n    return result;\n  });\n}\n\nfunction getCursorStyle() {\n  const tooltipStyle = `\n\t.react-financial-charts-grabbing-cursor {\n\t\tpointer-events: all;\n\t\tcursor: -moz-grabbing;\n\t\tcursor: -webkit-grabbing;\n\t\tcursor: grabbing;\n\t}\n\t.react-financial-charts-crosshair-cursor {\n\t\tpointer-events: all;\n\t\tcursor: crosshair;\n\t}\n\t.react-financial-charts-tooltip-hover {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-financial-charts-avoid-interaction {\n\t\tpointer-events: none;\n\t}\n\t.react-financial-charts-enable-interaction {\n\t\tpointer-events: all;\n\t}\n\t.react-financial-charts-tooltip {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-financial-charts-default-cursor {\n\t\tcursor: default;\n\t}\n\t.react-financial-charts-move-cursor {\n\t\tcursor: move;\n\t}\n\t.react-financial-charts-pointer-cursor {\n\t\tcursor: pointer;\n\t}\n\t.react-financial-charts-ns-resize-cursor {\n\t\tcursor: ns-resize;\n\t}\n\t.react-financial-charts-ew-resize-cursor {\n\t\tcursor: ew-resize;\n\t}`;\n  return React.createElement(\"style\", {\n    type: \"text/css\"\n  }, tooltipStyle);\n}\n\nfunction getDimensions(props) {\n  return {\n    height: props.height - props.margin.top - props.margin.bottom,\n    width: props.width - props.margin.left - props.margin.right\n  };\n}\n\nfunction getXScaleDirection(flipXScale) {\n  return flipXScale ? -1 : 1;\n}\n\nfunction calculateFullData(props) {\n  const {\n    data: fullData,\n    plotFull,\n    xScale,\n    clamp,\n    pointsPerPxThreshold,\n    flipXScale\n  } = props;\n  const {\n    xAccessor,\n    displayXAccessor,\n    minPointsPerPxThreshold\n  } = props;\n  const useWholeData = isDefined(plotFull) ? plotFull : xAccessor === identity;\n  const {\n    filterData\n  } = evaluator({\n    xScale,\n    useWholeData,\n    clamp,\n    pointsPerPxThreshold,\n    minPointsPerPxThreshold,\n    flipXScale\n  });\n  return {\n    xAccessor,\n    displayXAccessor: displayXAccessor || xAccessor,\n    xScale: xScale.copy(),\n    fullData,\n    filterData\n  };\n}\n\nfunction resetChart(props, firstCalculation = false) {\n  const state = calculateState(props);\n  const {\n    xAccessor,\n    displayXAccessor,\n    fullData\n  } = state;\n  const {\n    plotData: initialPlotData,\n    xScale\n  } = state;\n  const {\n    postCalculator,\n    children\n  } = props;\n  const plotData = postCalculator(initialPlotData);\n  const dimensions = getDimensions(props); // @ts-ignore\n\n  const chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children), {\n    plotData,\n    xAccessor,\n    displayXAccessor,\n    fullData\n  }, xScale.domain());\n  return Object.assign(Object.assign({}, state), {\n    xScale,\n    plotData,\n    chartConfig\n  });\n}\n\nfunction updateChart(newState, initialXScale, props, lastItemWasVisible, initialChartConfig) {\n  const {\n    fullData,\n    xScale,\n    xAccessor,\n    displayXAccessor,\n    filterData\n  } = newState;\n  const lastItem = last(fullData);\n  const [start, end] = initialXScale.domain();\n  const {\n    postCalculator,\n    children,\n    padding,\n    flipXScale\n  } = props;\n  const {\n    maintainPointsPerPixelOnResize\n  } = props;\n  const direction = getXScaleDirection(flipXScale);\n  const dimensions = getDimensions(props);\n  const updatedXScale = setXRange(xScale, dimensions, padding, direction); // console.log(\"lastItemWasVisible =\", lastItemWasVisible, end, xAccessor(lastItem), end >= xAccessor(lastItem));\n\n  let initialPlotData;\n\n  if (!lastItemWasVisible || end >= xAccessor(lastItem)) {\n    // resize comes here...\n    // get plotData between [start, end] and do not change the domain\n    const [rangeStart, rangeEnd] = initialXScale.range();\n    const [newRangeStart, newRangeEnd] = updatedXScale.range();\n    const newDomainExtent = (newRangeEnd - newRangeStart) / (rangeEnd - rangeStart) * (end - start);\n    const newStart = maintainPointsPerPixelOnResize ? end - newDomainExtent : start;\n    const lastItemX = initialXScale(xAccessor(lastItem)); // console.log(\"pointsPerPixel => \", newStart, start, end, updatedXScale(end));\n\n    const response = filterData(fullData, [newStart, end], xAccessor, updatedXScale, {\n      fallbackStart: start,\n      fallbackEnd: {\n        lastItem,\n        lastItemX\n      }\n    });\n    initialPlotData = response.plotData;\n    updatedXScale.domain(response.domain); // console.log(\"HERE!!!!!\", start, end);\n  } else if (lastItemWasVisible && end < xAccessor(lastItem)) {\n    // this is when a new item is added and last item was visible\n    // so slide over and show the new item also\n    // get plotData between [xAccessor(l) - (end - start), xAccessor(l)] and DO change the domain\n    const dx = initialXScale(xAccessor(lastItem)) - initialXScale.range()[1];\n    const [newStart, newEnd] = initialXScale.range().map(x => x + dx).map(initialXScale.invert);\n    const response = filterData(fullData, [newStart, newEnd], xAccessor, updatedXScale);\n    initialPlotData = response.plotData;\n    updatedXScale.domain(response.domain); // if last item was visible, then shift\n  } // plotData = getDataOfLength(fullData, showingInterval, plotData.length)\n\n\n  const plotData = postCalculator(initialPlotData); // @ts-ignore\n\n  const chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children, initialChartConfig), {\n    plotData,\n    xAccessor,\n    displayXAccessor,\n    fullData\n  }, updatedXScale.domain());\n  return {\n    xScale: updatedXScale,\n    xAccessor,\n    chartConfig,\n    plotData,\n    fullData,\n    filterData\n  };\n}\n\nfunction calculateState(props) {\n  const {\n    xAccessor: inputXAccesor,\n    xExtents: xExtentsProp,\n    data,\n    padding,\n    flipXScale\n  } = props;\n\n  if (process.env.NODE_ENV !== \"production\" && isDefined(props.xScale.invert)) {\n    for (let i = 1; i < data.length; i++) {\n      const prev = data[i - 1];\n      const curr = data[i];\n\n      if (inputXAccesor(prev) > inputXAccesor(curr)) {\n        throw new Error(\"'data' is not sorted on 'xAccessor', send 'data' sorted in ascending order of 'xAccessor'\");\n      }\n    }\n  }\n\n  const direction = getXScaleDirection(flipXScale);\n  const dimensions = getDimensions(props);\n  const extent = typeof xExtentsProp === \"function\" ? xExtentsProp(data) : d3Extent(xExtentsProp.map(d => functor(d)).map(each => each(data, inputXAccesor)));\n  const {\n    xAccessor,\n    displayXAccessor,\n    xScale,\n    fullData,\n    filterData\n  } = calculateFullData(props);\n  const updatedXScale = setXRange(xScale, dimensions, padding, direction);\n  const {\n    plotData,\n    domain\n  } = filterData(fullData, extent, inputXAccesor, updatedXScale);\n\n  if (process.env.NODE_ENV !== \"production\" && plotData.length <= 1) {\n    throw new Error(`Showing ${plotData.length} datapoints, review the 'xExtents' prop of ChartCanvas`);\n  }\n\n  return {\n    plotData,\n    xScale: updatedXScale.domain(domain),\n    xAccessor,\n    displayXAccessor,\n    fullData,\n    filterData\n  };\n}\n\nfunction setXRange(xScale, dimensions, padding, direction = 1) {\n  if (xScale.rangeRoundPoints) {\n    if (isNaN(padding)) {\n      throw new Error(\"padding has to be a number for ordinal scale\");\n    }\n\n    xScale.rangeRoundPoints([0, dimensions.width], padding);\n  } else if (xScale.padding) {\n    if (isNaN(padding)) {\n      throw new Error(\"padding has to be a number for ordinal scale\");\n    }\n\n    xScale.range([0, dimensions.width]);\n    xScale.padding(padding / 2);\n  } else {\n    const {\n      left,\n      right\n    } = isNaN(padding) ? padding : {\n      left: padding,\n      right: padding\n    };\n\n    if (direction > 0) {\n      xScale.range([left, dimensions.width - right]);\n    } else {\n      xScale.range([dimensions.width - right, left]);\n    }\n  }\n\n  return xScale;\n}\n\nfunction pinchCoordinates(pinch) {\n  const {\n    touch1Pos,\n    touch2Pos\n  } = pinch;\n  return {\n    topLeft: [Math.min(touch1Pos[0], touch2Pos[0]), Math.min(touch1Pos[1], touch2Pos[1])],\n    bottomRight: [Math.max(touch1Pos[0], touch2Pos[0]), Math.max(touch1Pos[1], touch2Pos[1])]\n  };\n}\n\nfunction isInteractionEnabled(xScale, xAccessor, data) {\n  const interaction = !isNaN(xScale(xAccessor(head(data)))) && isDefined(xScale.invert);\n  return interaction;\n}\n\nexport class ChartCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getDataInfo = this.getDataInfo.bind(this);\n    this.getCanvasContexts = this.getCanvasContexts.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleZoom = this.handleZoom.bind(this);\n    this.handlePinchZoom = this.handlePinchZoom.bind(this);\n    this.handlePinchZoomEnd = this.handlePinchZoomEnd.bind(this);\n    this.handlePan = this.handlePan.bind(this);\n    this.handlePanEnd = this.handlePanEnd.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleContextMenu = this.handleContextMenu.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.panHelper = this.panHelper.bind(this);\n    this.pinchZoomHelper = this.pinchZoomHelper.bind(this);\n    this.xAxisZoom = this.xAxisZoom.bind(this);\n    this.yAxisZoom = this.yAxisZoom.bind(this);\n    this.resetYDomain = this.resetYDomain.bind(this);\n    this.calculateStateForDomain = this.calculateStateForDomain.bind(this);\n    this.generateSubscriptionId = this.generateSubscriptionId.bind(this);\n    this.draw = this.draw.bind(this);\n    this.redraw = this.redraw.bind(this);\n    this.getAllPanConditions = this.getAllPanConditions.bind(this);\n    this.subscriptions = [];\n    this.subscribe = this.subscribe.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this);\n    this.amIOnTop = this.amIOnTop.bind(this);\n    this.saveEventCaptureNode = this.saveEventCaptureNode.bind(this);\n    this.saveCanvasContainerNode = this.saveCanvasContainerNode.bind(this);\n    this.setCursorClass = this.setCursorClass.bind(this);\n    this.getMutableState = this.getMutableState.bind(this);\n    this.panInProgress = false;\n    this.state = {};\n    this.mutableState = {};\n    this.lastSubscriptionId = 0;\n\n    const _a = resetChart(props, true),\n          {\n      fullData\n    } = _a,\n          state = __rest(_a, [\"fullData\"]);\n\n    this.state = state;\n    this.fullData = fullData;\n  }\n\n  saveEventCaptureNode(node) {\n    this.eventCaptureNode = node;\n  }\n\n  saveCanvasContainerNode(node) {\n    this.canvasContainerNode = node;\n  }\n\n  getMutableState() {\n    return this.mutableState;\n  }\n\n  getDataInfo() {\n    return Object.assign(Object.assign({}, this.state), {\n      fullData: this.fullData\n    });\n  }\n\n  getCanvasContexts() {\n    if (this.canvasContainerNode) {\n      return this.canvasContainerNode.getCanvasContexts();\n    }\n  }\n\n  generateSubscriptionId() {\n    this.lastSubscriptionId++;\n    return this.lastSubscriptionId;\n  }\n\n  clearBothCanvas() {\n    const canvases = this.getCanvasContexts();\n\n    if (canvases && canvases.axes) {\n      clearCanvas([canvases.axes, canvases.mouseCoord], this.props.ratio);\n    }\n  }\n\n  clearMouseCanvas() {\n    const canvases = this.getCanvasContexts();\n\n    if (canvases && canvases.mouseCoord) {\n      clearCanvas([canvases.mouseCoord], this.props.ratio);\n    }\n  }\n\n  clearThreeCanvas() {\n    const canvases = this.getCanvasContexts();\n\n    if (canvases && canvases.axes) {\n      clearCanvas([canvases.axes, canvases.mouseCoord, canvases.bg], this.props.ratio);\n    }\n  }\n\n  subscribe(id, rest) {\n    const {\n      getPanConditions = functor({\n        draggable: false,\n        panEnabled: true\n      })\n    } = rest;\n    this.subscriptions = this.subscriptions.concat(Object.assign(Object.assign({\n      id\n    }, rest), {\n      getPanConditions\n    }));\n  }\n\n  unsubscribe(id) {\n    this.subscriptions = this.subscriptions.filter(each => each.id !== id);\n  }\n\n  getAllPanConditions() {\n    return this.subscriptions.map(each => each.getPanConditions());\n  }\n\n  setCursorClass(className) {\n    if (this.eventCaptureNode != null) {\n      this.eventCaptureNode.setCursorClass(className);\n    }\n  }\n\n  amIOnTop(id) {\n    const dragableComponents = this.subscriptions.filter(each => each.getPanConditions().draggable);\n    return dragableComponents.length > 0 && last(dragableComponents).id === id;\n  }\n\n  handleContextMenu(mouseXY, e) {\n    const {\n      xAccessor,\n      chartConfig,\n      plotData,\n      xScale\n    } = this.state;\n    const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n    const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n    this.triggerEvent(\"contextmenu\", {\n      mouseXY,\n      currentItem,\n      currentCharts\n    }, e);\n  }\n\n  calculateStateForDomain(newDomain) {\n    const {\n      xAccessor,\n      displayXAccessor,\n      xScale: initialXScale,\n      chartConfig: initialChartConfig,\n      plotData: initialPlotData\n    } = this.state;\n    const {\n      filterData\n    } = this.state;\n    const {\n      fullData\n    } = this;\n    const {\n      postCalculator\n    } = this.props;\n    const {\n      plotData: beforePlotData,\n      domain\n    } = filterData(fullData, newDomain, xAccessor, initialXScale, {\n      currentPlotData: initialPlotData,\n      currentDomain: initialXScale.domain()\n    });\n    const plotData = postCalculator(beforePlotData);\n    const updatedScale = initialXScale.copy().domain(domain); // @ts-ignore\n\n    const chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n      plotData,\n      xAccessor,\n      displayXAccessor,\n      fullData\n    }, updatedScale.domain());\n    return {\n      xScale: updatedScale,\n      plotData,\n      chartConfig\n    };\n  }\n\n  pinchZoomHelper(initialPinch, finalPinch) {\n    const {\n      xScale: initialPinchXScale\n    } = initialPinch;\n    const {\n      xScale: initialXScale,\n      chartConfig: initialChartConfig,\n      plotData: initialPlotData,\n      xAccessor,\n      displayXAccessor\n    } = this.state;\n    const {\n      filterData\n    } = this.state;\n    const {\n      fullData\n    } = this;\n    const {\n      postCalculator\n    } = this.props;\n    const {\n      topLeft: iTL,\n      bottomRight: iBR\n    } = pinchCoordinates(initialPinch);\n    const {\n      topLeft: fTL,\n      bottomRight: fBR\n    } = pinchCoordinates(finalPinch);\n    const e = initialPinchXScale.range()[1];\n    const xDash = Math.round(-(iBR[0] * fTL[0] - iTL[0] * fBR[0]) / (iTL[0] - iBR[0]));\n    const yDash = Math.round(e + ((e - iBR[0]) * (e - fTL[0]) - (e - iTL[0]) * (e - fBR[0])) / (e - iTL[0] - (e - iBR[0])));\n    const x = Math.round(-xDash * iTL[0] / (-xDash + fTL[0]));\n    const y = Math.round(e - (yDash - e) * (e - iTL[0]) / (yDash + (e - fTL[0])));\n    const newDomain = [x, y].map(initialPinchXScale.invert); // var domainR = initial.right + right;\n\n    const {\n      plotData: beforePlotData,\n      domain\n    } = filterData(fullData, newDomain, xAccessor, initialPinchXScale, {\n      currentPlotData: initialPlotData,\n      currentDomain: initialXScale.domain()\n    });\n    const plotData = postCalculator(beforePlotData);\n    const updatedScale = initialXScale.copy().domain(domain);\n    const mouseXY = finalPinch.touch1Pos; // @ts-ignore\n\n    const chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n      plotData,\n      xAccessor,\n      displayXAccessor,\n      fullData\n    }, updatedScale.domain());\n    const currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n    return {\n      chartConfig,\n      xScale: updatedScale,\n      plotData,\n      mouseXY,\n      currentItem\n    };\n  }\n\n  cancelDrag() {\n    this.eventCaptureNode.cancelDrag();\n    this.triggerEvent(\"dragcancel\");\n  }\n\n  handlePinchZoom(initialPinch, finalPinch, e) {\n    if (!this.waitingForPinchZoomAnimationFrame) {\n      this.waitingForPinchZoomAnimationFrame = true;\n      const state = this.pinchZoomHelper(initialPinch, finalPinch);\n      this.triggerEvent(\"pinchzoom\", state, e);\n      this.finalPinch = finalPinch;\n      requestAnimationFrame(() => {\n        this.clearBothCanvas();\n        this.draw({\n          trigger: \"pinchzoom\"\n        });\n        this.waitingForPinchZoomAnimationFrame = false;\n      });\n    }\n  }\n\n  handlePinchZoomEnd(initialPinch, e) {\n    const {\n      xAccessor\n    } = this.state;\n\n    if (this.finalPinch) {\n      const state = this.pinchZoomHelper(initialPinch, this.finalPinch);\n      const {\n        xScale\n      } = state;\n      this.triggerEvent(\"pinchzoom\", state, e);\n      this.finalPinch = undefined;\n      this.clearThreeCanvas();\n      const {\n        fullData\n      } = this;\n      const firstItem = head(fullData);\n      const start = head(xScale.domain());\n      const end = xAccessor(firstItem);\n      const {\n        onLoadMore\n      } = this.props;\n      this.setState(state, () => {\n        if (start < end) {\n          onLoadMore(start, end);\n        }\n      });\n    }\n  }\n\n  handleZoom(zoomDirection, mouseXY, e) {\n    if (this.panInProgress) {\n      return;\n    }\n\n    const {\n      xAccessor,\n      xScale: initialXScale,\n      plotData: initialPlotData\n    } = this.state;\n    const {\n      zoomMultiplier = ChartCanvas.defaultProps.zoomMultiplier,\n      zoomAnchor\n    } = this.props;\n    const {\n      fullData\n    } = this;\n    const item = zoomAnchor({\n      xScale: initialXScale,\n      xAccessor,\n      mouseXY,\n      plotData: initialPlotData,\n      fullData\n    });\n    const cx = initialXScale(item);\n    const c = zoomDirection > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n    const newDomain = initialXScale.range().map(x => cx + (x - cx) * c).map(initialXScale.invert);\n    const {\n      xScale,\n      plotData,\n      chartConfig\n    } = this.calculateStateForDomain(newDomain);\n    const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n    const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n    this.clearThreeCanvas();\n    const firstItem = head(fullData);\n    const start = head(xScale.domain());\n    const end = xAccessor(firstItem);\n    const {\n      onLoadMore\n    } = this.props;\n    this.mutableState = {\n      mouseXY,\n      currentItem,\n      currentCharts\n    };\n    this.triggerEvent(\"zoom\", {\n      xScale,\n      plotData,\n      chartConfig,\n      mouseXY,\n      currentCharts,\n      currentItem,\n      show: true\n    }, e);\n    this.setState({\n      xScale,\n      plotData,\n      chartConfig\n    }, () => {\n      if (start < end) {\n        onLoadMore(start, end);\n      }\n    });\n  }\n\n  xAxisZoom(newDomain) {\n    const {\n      xScale,\n      plotData,\n      chartConfig\n    } = this.calculateStateForDomain(newDomain);\n    this.clearThreeCanvas();\n    const {\n      xAccessor\n    } = this.state;\n    const {\n      fullData\n    } = this;\n    const firstItem = head(fullData);\n    const start = head(xScale.domain());\n    const end = xAccessor(firstItem);\n    const {\n      onLoadMore\n    } = this.props;\n    this.setState({\n      xScale,\n      plotData,\n      chartConfig\n    }, () => {\n      if (start < end) {\n        onLoadMore(start, end);\n      }\n    });\n  }\n\n  yAxisZoom(chartId, newDomain) {\n    this.clearThreeCanvas();\n    const {\n      chartConfig: initialChartConfig\n    } = this.state;\n    const chartConfig = initialChartConfig.map(each => {\n      if (each.id === chartId) {\n        const {\n          yScale\n        } = each;\n        return Object.assign(Object.assign({}, each), {\n          yScale: yScale.copy().domain(newDomain),\n          yPanEnabled: true\n        });\n      } else {\n        return each;\n      }\n    });\n    this.setState({\n      chartConfig\n    });\n  }\n\n  triggerEvent(type, props, e) {\n    this.subscriptions.forEach(each => {\n      const state = Object.assign(Object.assign({}, this.state), {\n        fullData: this.fullData,\n        subscriptions: this.subscriptions\n      });\n      each.listener(type, props, state, e);\n    });\n  }\n\n  draw(props) {\n    this.subscriptions.forEach(each => {\n      if (isDefined(each.draw)) {\n        each.draw(props);\n      }\n    });\n  }\n\n  redraw() {\n    this.clearThreeCanvas();\n    this.draw({\n      force: true\n    });\n  }\n\n  panHelper(mouseXY, initialXScale, {\n    dx,\n    dy\n  }, chartsToPan) {\n    const {\n      xAccessor,\n      displayXAccessor,\n      chartConfig: initialChartConfig\n    } = this.state;\n    const {\n      filterData\n    } = this.state;\n    const {\n      fullData\n    } = this;\n    const {\n      postCalculator\n    } = this.props;\n\n    if (isNotDefined(initialXScale.invert)) {\n      throw new Error(\"xScale provided does not have an invert() method.\" + \"You are likely using an ordinal scale. This scale does not support zoom, pan\");\n    }\n\n    const newDomain = initialXScale.range().map(x => x - dx).map(initialXScale.invert);\n    const {\n      plotData: beforePlotData,\n      domain\n    } = filterData(fullData, newDomain, xAccessor, initialXScale, {\n      currentPlotData: this.hackyWayToStopPanBeyondBounds__plotData,\n      currentDomain: this.hackyWayToStopPanBeyondBounds__domain\n    });\n    const updatedScale = initialXScale.copy().domain(domain);\n    const plotData = postCalculator(beforePlotData);\n    const currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n    const chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, {\n      plotData,\n      xAccessor,\n      displayXAccessor,\n      fullData\n    }, updatedScale.domain(), dy, chartsToPan);\n    const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n    return {\n      xScale: updatedScale,\n      plotData,\n      chartConfig,\n      mouseXY,\n      currentCharts,\n      currentItem\n    };\n  }\n\n  handlePan(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n    if (!this.waitingForPanAnimationFrame) {\n      this.waitingForPanAnimationFrame = true;\n      this.hackyWayToStopPanBeyondBounds__plotData = this.hackyWayToStopPanBeyondBounds__plotData || this.state.plotData;\n      this.hackyWayToStopPanBeyondBounds__domain = this.hackyWayToStopPanBeyondBounds__domain || this.state.xScale.domain();\n      const state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n      this.hackyWayToStopPanBeyondBounds__plotData = state.plotData;\n      this.hackyWayToStopPanBeyondBounds__domain = state.xScale.domain();\n      this.panInProgress = true;\n      this.triggerEvent(\"pan\", state, e);\n      this.mutableState = {\n        mouseXY: state.mouseXY,\n        currentItem: state.currentItem,\n        currentCharts: state.currentCharts\n      };\n      requestAnimationFrame(() => {\n        this.waitingForPanAnimationFrame = false;\n        this.clearBothCanvas();\n        this.draw({\n          trigger: \"pan\"\n        });\n      });\n    }\n  }\n\n  handlePanEnd(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n    const state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n    this.hackyWayToStopPanBeyondBounds__plotData = null;\n    this.hackyWayToStopPanBeyondBounds__domain = null;\n    this.panInProgress = false;\n    const {\n      xScale,\n      plotData,\n      chartConfig\n    } = state;\n    this.triggerEvent(\"panend\", state, e);\n    requestAnimationFrame(() => {\n      const {\n        xAccessor\n      } = this.state;\n      const {\n        fullData\n      } = this;\n      const firstItem = head(fullData);\n      const start = head(xScale.domain());\n      const end = xAccessor(firstItem);\n      const {\n        onLoadMore\n      } = this.props;\n      this.clearThreeCanvas();\n      this.setState({\n        xScale,\n        plotData,\n        chartConfig\n      }, () => {\n        if (start < end) {\n          onLoadMore(start, end);\n        }\n      });\n    });\n  }\n\n  handleMouseDown(mousePosition, currentCharts, e) {\n    this.triggerEvent(\"mousedown\", this.mutableState, e);\n  }\n\n  handleMouseEnter(e) {\n    this.triggerEvent(\"mouseenter\", {\n      show: true\n    }, e);\n  }\n\n  handleMouseMove(mouseXY, inputType, e) {\n    if (!this.waitingForMouseMoveAnimationFrame) {\n      this.waitingForMouseMoveAnimationFrame = true;\n      const {\n        chartConfig,\n        plotData,\n        xScale,\n        xAccessor\n      } = this.state;\n      const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n      const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n      this.triggerEvent(\"mousemove\", {\n        show: true,\n        mouseXY,\n        // prevMouseXY is used in interactive components\n        prevMouseXY: this.prevMouseXY,\n        currentItem,\n        currentCharts\n      }, e);\n      this.prevMouseXY = mouseXY;\n      this.mutableState = {\n        mouseXY,\n        currentItem,\n        currentCharts\n      };\n      requestAnimationFrame(() => {\n        this.clearMouseCanvas();\n        this.draw({\n          trigger: \"mousemove\"\n        });\n        this.waitingForMouseMoveAnimationFrame = false;\n      });\n    }\n  }\n\n  handleMouseLeave(e) {\n    this.triggerEvent(\"mouseleave\", {\n      show: false\n    }, e);\n    this.clearMouseCanvas();\n    this.draw({\n      trigger: \"mouseleave\"\n    });\n  }\n\n  handleDragStart({\n    startPos\n  }, e) {\n    this.triggerEvent(\"dragstart\", {\n      startPos\n    }, e);\n  }\n\n  handleDrag({\n    startPos,\n    mouseXY\n  }, e) {\n    const {\n      chartConfig,\n      plotData,\n      xScale,\n      xAccessor\n    } = this.state;\n    const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n    const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n    this.triggerEvent(\"drag\", {\n      startPos,\n      mouseXY,\n      currentItem,\n      currentCharts\n    }, e);\n    this.mutableState = {\n      mouseXY,\n      currentItem,\n      currentCharts\n    };\n    requestAnimationFrame(() => {\n      this.clearMouseCanvas();\n      this.draw({\n        trigger: \"drag\"\n      });\n    });\n  }\n\n  handleDragEnd({\n    mouseXY\n  }, e) {\n    this.triggerEvent(\"dragend\", {\n      mouseXY\n    }, e);\n    requestAnimationFrame(() => {\n      this.clearMouseCanvas();\n      this.draw({\n        trigger: \"dragend\"\n      });\n    });\n  }\n\n  handleClick(mousePosition, e) {\n    this.triggerEvent(\"click\", this.mutableState, e);\n    requestAnimationFrame(() => {\n      this.clearMouseCanvas();\n      this.draw({\n        trigger: \"click\"\n      });\n    });\n  }\n\n  handleDoubleClick(mousePosition, e) {\n    this.triggerEvent(\"dblclick\", {}, e);\n  }\n\n  getChildContext() {\n    const dimensions = getDimensions(this.props);\n    return {\n      fullData: this.fullData,\n      plotData: this.state.plotData,\n      width: dimensions.width,\n      height: dimensions.height,\n      chartConfig: this.state.chartConfig,\n      xScale: this.state.xScale,\n      xAccessor: this.state.xAccessor,\n      displayXAccessor: this.state.displayXAccessor,\n      chartCanvasType: this.props.type,\n      margin: this.props.margin,\n      ratio: this.props.ratio,\n      xAxisZoom: this.xAxisZoom,\n      yAxisZoom: this.yAxisZoom,\n      getCanvasContexts: this.getCanvasContexts,\n      redraw: this.redraw,\n      subscribe: this.subscribe,\n      unsubscribe: this.unsubscribe,\n      generateSubscriptionId: this.generateSubscriptionId,\n      getMutableState: this.getMutableState,\n      amIOnTop: this.amIOnTop,\n      setCursorClass: this.setCursorClass\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const reset = shouldResetChart(this.props, nextProps);\n    const interaction = isInteractionEnabled(this.state.xScale, this.state.xAccessor, this.state.plotData);\n    const {\n      chartConfig: initialChartConfig\n    } = this.state;\n    let newState;\n\n    if (!interaction || reset || !shallowEqual(this.props.xExtents, nextProps.xExtents)) {\n      // do reset\n      newState = resetChart(nextProps);\n      this.mutableState = {};\n    } else {\n      const [start, end] = this.state.xScale.domain();\n      const prevLastItem = last(this.fullData);\n      const calculatedState = calculateFullData(nextProps);\n      const {\n        xAccessor\n      } = calculatedState;\n      const lastItemWasVisible = xAccessor(prevLastItem) <= end && xAccessor(prevLastItem) >= start;\n      newState = updateChart(calculatedState, this.state.xScale, nextProps, lastItemWasVisible, initialChartConfig);\n    }\n\n    const {\n      fullData\n    } = newState,\n          state = __rest(newState, [\"fullData\"]);\n\n    if (!this.panInProgress) {\n      this.clearThreeCanvas();\n      this.setState(state);\n    }\n\n    this.fullData = fullData;\n  }\n\n  resetYDomain(chartId) {\n    const {\n      chartConfig\n    } = this.state;\n    let changed = false;\n    const newChartConfig = chartConfig.map(each => {\n      if ((isNotDefined(chartId) || each.id === chartId) && !shallowEqual(each.yScale.domain(), each.realYDomain)) {\n        changed = true;\n        return Object.assign(Object.assign({}, each), {\n          yScale: each.yScale.domain(each.realYDomain),\n          yPanEnabled: false\n        });\n      }\n\n      return each;\n    });\n\n    if (changed) {\n      this.clearThreeCanvas();\n      this.setState({\n        chartConfig: newChartConfig\n      });\n    }\n  }\n\n  shouldComponentUpdate() {\n    return !this.panInProgress;\n  }\n\n  render() {\n    const {\n      type = ChartCanvas.defaultProps.type,\n      useCrossHairStyleCursor,\n      onSelect,\n      height,\n      width,\n      margin = ChartCanvas.defaultProps.margin,\n      className,\n      zIndex = ChartCanvas.defaultProps.zIndex,\n      defaultFocus,\n      ratio,\n      mouseMoveEvent,\n      panEvent,\n      zoomEvent,\n      disableInteraction\n    } = this.props;\n    const {\n      plotData,\n      xScale,\n      xAccessor,\n      chartConfig\n    } = this.state;\n    const dimensions = getDimensions(this.props);\n    const interaction = isInteractionEnabled(xScale, xAccessor, plotData);\n    const cursorStyle = useCrossHairStyleCursor && interaction;\n    const cursor = getCursorStyle();\n    return React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        width,\n        height\n      },\n      className: className,\n      onClick: onSelect\n    }, React.createElement(CanvasContainer, {\n      ref: this.saveCanvasContainerNode,\n      type: type,\n      ratio: ratio,\n      width: width,\n      height: height,\n      zIndex: zIndex\n    }), React.createElement(\"svg\", {\n      className: className,\n      width: width,\n      height: height,\n      style: {\n        position: \"absolute\",\n        zIndex: zIndex + 5\n      }\n    }, cursor, React.createElement(\"defs\", null, React.createElement(\"clipPath\", {\n      id: \"chart-area-clip\"\n    }, React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: dimensions.width,\n      height: dimensions.height\n    })), chartConfig.map((each, idx) => React.createElement(\"clipPath\", {\n      key: idx,\n      id: `chart-area-clip-${each.id}`\n    }, React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: each.width,\n      height: each.height\n    })))), React.createElement(\"g\", {\n      transform: `translate(${margin.left + 0.5}, ${margin.top + 0.5})`\n    }, React.createElement(EventCapture, {\n      ref: this.saveEventCaptureNode,\n      useCrossHairStyleCursor: cursorStyle,\n      mouseMove: mouseMoveEvent && interaction,\n      zoom: zoomEvent && interaction,\n      pan: panEvent && interaction,\n      width: dimensions.width,\n      height: dimensions.height,\n      chartConfig: chartConfig,\n      xScale: xScale,\n      xAccessor: xAccessor,\n      focus: defaultFocus,\n      disableInteraction: disableInteraction,\n      getAllPanConditions: this.getAllPanConditions,\n      onContextMenu: this.handleContextMenu,\n      onClick: this.handleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onMouseDown: this.handleMouseDown,\n      onMouseMove: this.handleMouseMove,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave,\n      onDragStart: this.handleDragStart,\n      onDrag: this.handleDrag,\n      onDragComplete: this.handleDragEnd,\n      onZoom: this.handleZoom,\n      onPinchZoom: this.handlePinchZoom,\n      onPinchZoomEnd: this.handlePinchZoomEnd,\n      onPan: this.handlePan,\n      onPanEnd: this.handlePanEnd\n    }), React.createElement(\"g\", {\n      className: \"react-financial-charts-avoid-interaction\"\n    }, this.props.children))));\n  }\n\n}\nChartCanvas.defaultProps = {\n  margin: {\n    top: 0,\n    right: 40,\n    bottom: 40,\n    left: 0\n  },\n  type: \"hybrid\",\n  pointsPerPxThreshold: 2,\n  minPointsPerPxThreshold: 1 / 100,\n  className: \"react-financial-charts\",\n  zIndex: 1,\n  xExtents: [min, max],\n  postCalculator: identity,\n  padding: 0,\n  xAccessor: identity,\n  flipXScale: false,\n  useCrossHairStyleCursor: true,\n  defaultFocus: true,\n  onLoadMore: noop,\n  onSelect: noop,\n  mouseMoveEvent: true,\n  panEvent: true,\n  zoomEvent: true,\n  zoomMultiplier: 1.1,\n  clamp: false,\n  zoomAnchor: mouseBasedZoomAnchor,\n  maintainPointsPerPixelOnResize: true,\n  disableInteraction: false\n};\nChartCanvas.childContextTypes = {\n  plotData: PropTypes.array,\n  fullData: PropTypes.array,\n  chartConfig: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    origin: PropTypes.arrayOf(PropTypes.number).isRequired,\n    padding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n      top: PropTypes.number,\n      bottom: PropTypes.number\n    })]),\n    yExtents: PropTypes.arrayOf(PropTypes.func),\n    yExtentsProvider: PropTypes.func,\n    yScale: PropTypes.func.isRequired,\n    mouseCoordinates: PropTypes.shape({\n      at: PropTypes.string,\n      format: PropTypes.func\n    }),\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n  })).isRequired,\n  xScale: PropTypes.func.isRequired,\n  xAccessor: PropTypes.func.isRequired,\n  displayXAccessor: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  chartCanvasType: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired,\n  getCanvasContexts: PropTypes.func,\n  xAxisZoom: PropTypes.func,\n  yAxisZoom: PropTypes.func,\n  amIOnTop: PropTypes.func,\n  redraw: PropTypes.func,\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func,\n  setCursorClass: PropTypes.func,\n  generateSubscriptionId: PropTypes.func,\n  getMutableState: PropTypes.func\n};\n\nChartCanvas.ohlcv = d => ({\n  date: d.date,\n  open: d.open,\n  high: d.high,\n  low: d.low,\n  close: d.close,\n  volume: d.volume\n});","map":{"version":3,"sources":["../src/ChartCanvas.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAS,MAAM,IAAI,QAAnB,EAA6B,GAA7B,EAAkC,GAAlC,QAA6C,UAA7C;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SACI,WADJ,EAEI,OAFJ,EAGI,IAHJ,EAII,QAJJ,EAKI,SALJ,EAMI,YANJ,EAOI,IAPJ,EAQI,IARJ,EASI,YATJ,QAUO,SAVP;AAYA,SAGI,oBAHJ,QAMO,sBANP;AAQA,SAAS,gCAAT,EAA2C,gBAA3C,EAA6D,cAA7D,EAA6E,iBAA7E,QAAsG,uBAAtG;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AACA,OAAO,SAAP,MAAsB,mBAAtB;AAEA,MAAM,oBAAoB,GAAG,CACzB,YADyB,CAA7B;;AAIA,SAAS,gBAAT,CAA0B,SAA1B,EAAqC,SAArC,EAA8C;AAC1C,SAAO,CAAC,oBAAoB,CAAC,KAArB,CAA4B,GAAD,IAAQ;AACvC,UAAM,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,GAAD,CAAV,EAAiB,SAAS,CAAC,GAAD,CAA1B,CAA3B,CADuC,CAEvC;;AACA,WAAO,MAAP;AACH,GAJO,CAAR;AAKH;;AAED,SAAS,cAAT,GAAuB;AACnB,QAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAArB;AAwCA,SAAQ,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAO,IAAA,IAAI,EAAC;AAAZ,GAAA,EAAwB,YAAxB,CAAR;AACH;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAA4B;AACxB,SAAO;AACH,IAAA,MAAM,EAAE,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,MAAN,CAAa,GAA5B,GAAkC,KAAK,CAAC,MAAN,CAAa,MADpD;AAEH,IAAA,KAAK,EAAE,KAAK,CAAC,KAAN,GAAc,KAAK,CAAC,MAAN,CAAa,IAA3B,GAAkC,KAAK,CAAC,MAAN,CAAa;AAFnD,GAAP;AAIH;;AAED,SAAS,kBAAT,CAA4B,UAA5B,EAAsC;AAClC,SAAO,UAAU,GAAG,CAAC,CAAJ,GAAQ,CAAzB;AACH;;AAED,SAAS,iBAAT,CAA2B,KAA3B,EAAgC;AAC5B,QAAM;AAAE,IAAA,IAAI,EAAE,QAAR;AAAkB,IAAA,QAAlB;AAA4B,IAAA,MAA5B;AAAoC,IAAA,KAApC;AAA2C,IAAA,oBAA3C;AAAiE,IAAA;AAAjE,MAAgF,KAAtF;AACA,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,gBAAb;AAA+B,IAAA;AAA/B,MAA2D,KAAjE;AAEA,QAAM,YAAY,GAAG,SAAS,CAAC,QAAD,CAAT,GACf,QADe,GAEf,SAAS,KAAK,QAFpB;AAIA,QAAM;AAAE,IAAA;AAAF,MAAiB,SAAS,CAAC;AAC7B,IAAA,MAD6B;AAE7B,IAAA,YAF6B;AAG7B,IAAA,KAH6B;AAI7B,IAAA,oBAJ6B;AAK7B,IAAA,uBAL6B;AAM7B,IAAA;AAN6B,GAAD,CAAhC;AASA,SAAO;AACH,IAAA,SADG;AAEH,IAAA,gBAAgB,EAAE,gBAAgB,IAAI,SAFnC;AAGH,IAAA,MAAM,EAAE,MAAM,CAAC,IAAP,EAHL;AAIH,IAAA,QAJG;AAKH,IAAA;AALG,GAAP;AAOH;;AACD,SAAS,UAAT,CAAoB,KAApB,EAA2B,gBAAgB,GAAG,KAA9C,EAAmD;AAE/C,QAAM,KAAK,GAAG,cAAc,CAAC,KAAD,CAA5B;AACA,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,gBAAb;AAA+B,IAAA;AAA/B,MAA4C,KAAlD;AACA,QAAM;AAAE,IAAA,QAAQ,EAAE,eAAZ;AAA6B,IAAA;AAA7B,MAAwC,KAA9C;AACA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAA+B,KAArC;AAEA,QAAM,QAAQ,GAAG,cAAc,CAAC,eAAD,CAA/B;AAEA,QAAM,UAAU,GAAG,aAAa,CAAC,KAAD,CAAhC,CAT+C,CAW/C;;AACA,QAAM,WAAW,GAAG,gCAAgC,CAChD,iBAAiB,CAAC,UAAD,EAAa,QAAb,CAD+B,EAEhD;AAAE,IAAA,QAAF;AAAY,IAAA,SAAZ;AAAuB,IAAA,gBAAvB;AAAyC,IAAA;AAAzC,GAFgD,EAGhD,MAAM,CAAC,MAAP,EAHgD,CAApD;AAMA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACO,KADP,CAAA,EACY;AACR,IAAA,MADQ;AAER,IAAA,QAFQ;AAGR,IAAA;AAHQ,GADZ,CAAA;AAMH;;AAED,SAAS,WAAT,CACI,QADJ,EAEI,aAFJ,EAGI,KAHJ,EAII,kBAJJ,EAKI,kBALJ,EAKsB;AAGlB,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,MAAZ;AAAoB,IAAA,SAApB;AAA+B,IAAA,gBAA/B;AAAiD,IAAA;AAAjD,MAAgE,QAAtE;AAEA,QAAM,QAAQ,GAAG,IAAI,CAAC,QAAD,CAArB;AACA,QAAM,CAAC,KAAD,EAAQ,GAAR,IAAe,aAAa,CAAC,MAAd,EAArB;AAEA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA,QAAlB;AAA4B,IAAA,OAA5B;AAAqC,IAAA;AAArC,MAAoD,KAA1D;AACA,QAAM;AAAE,IAAA;AAAF,MAAqC,KAA3C;AACA,QAAM,SAAS,GAAG,kBAAkB,CAAC,UAAD,CAApC;AACA,QAAM,UAAU,GAAG,aAAa,CAAC,KAAD,CAAhC;AAEA,QAAM,aAAa,GAAG,SAAS,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB,EAA8B,SAA9B,CAA/B,CAbkB,CAelB;;AACA,MAAI,eAAJ;;AACA,MAAI,CAAC,kBAAD,IAAuB,GAAG,IAAI,SAAS,CAAC,QAAD,CAA3C,EAAuD;AACnD;AACA;AACA,UAAM,CAAC,UAAD,EAAa,QAAb,IAAyB,aAAa,CAAC,KAAd,EAA/B;AACA,UAAM,CAAC,aAAD,EAAgB,WAAhB,IAA+B,aAAa,CAAC,KAAd,EAArC;AACA,UAAM,eAAe,GAAI,CAAC,WAAW,GAAG,aAAf,KAAiC,QAAQ,GAAG,UAA5C,CAAD,IAA6D,GAAG,GAAG,KAAnE,CAAxB;AACA,UAAM,QAAQ,GAAG,8BAA8B,GACzC,GAAG,GAAG,eADmC,GAEzC,KAFN;AAIA,UAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC,QAAD,CAAV,CAA/B,CAVmD,CAWnD;;AACA,UAAM,QAAQ,GAAG,UAAU,CACvB,QADuB,EACb,CAAC,QAAD,EAAW,GAAX,CADa,EACI,SADJ,EACe,aADf,EAEvB;AAAE,MAAA,aAAa,EAAE,KAAjB;AAAwB,MAAA,WAAW,EAAE;AAAE,QAAA,QAAF;AAAY,QAAA;AAAZ;AAArC,KAFuB,CAA3B;AAIA,IAAA,eAAe,GAAG,QAAQ,CAAC,QAA3B;AACA,IAAA,aAAa,CAAC,MAAd,CAAqB,QAAQ,CAAC,MAA9B,EAjBmD,CAkBnD;AACH,GAnBD,MAmBO,IAAI,kBAAkB,IACtB,GAAG,GAAG,SAAS,CAAC,QAAD,CADf,EAC2B;AAC9B;AACA;AAEA;AACA,UAAM,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC,QAAD,CAAV,CAAb,GAAqC,aAAa,CAAC,KAAd,GAAsB,CAAtB,CAAhD;AACA,UAAM,CAAC,QAAD,EAAW,MAAX,IAAqB,aAAa,CAAC,KAAd,GAAsB,GAAtB,CAA2B,CAAD,IAAO,CAAC,GAAG,EAArC,EAAyC,GAAzC,CAA6C,aAAa,CAAC,MAA3D,CAA3B;AAEA,UAAM,QAAQ,GAAG,UAAU,CAAC,QAAD,EAAW,CAAC,QAAD,EAAW,MAAX,CAAX,EAA+B,SAA/B,EAA0C,aAA1C,CAA3B;AACA,IAAA,eAAe,GAAG,QAAQ,CAAC,QAA3B;AACA,IAAA,aAAa,CAAC,MAAd,CAAqB,QAAQ,CAAC,MAA9B,EAV8B,CAUU;AAC3C,GAhDiB,CAiDlB;;;AACA,QAAM,QAAQ,GAAG,cAAc,CAAC,eAAD,CAA/B,CAlDkB,CAoDlB;;AACA,QAAM,WAAW,GAAG,gCAAgC,CAChD,iBAAiB,CAAC,UAAD,EAAa,QAAb,EAAuB,kBAAvB,CAD+B,EAEhD;AAAE,IAAA,QAAF;AAAY,IAAA,SAAZ;AAAuB,IAAA,gBAAvB;AAAyC,IAAA;AAAzC,GAFgD,EAGhD,aAAa,CAAC,MAAd,EAHgD,CAApD;AAMA,SAAO;AACH,IAAA,MAAM,EAAE,aADL;AAEH,IAAA,SAFG;AAGH,IAAA,WAHG;AAIH,IAAA,QAJG;AAKH,IAAA,QALG;AAMH,IAAA;AANG,GAAP;AAQH;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAA6B;AAEzB,QAAM;AACF,IAAA,SAAS,EAAE,aADT;AACwB,IAAA,QAAQ,EAAE,YADlC;AACgD,IAAA,IADhD;AACsD,IAAA,OADtD;AAC+D,IAAA;AAD/D,MAEF,KAFJ;;AAIA,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,IAAyC,SAAS,CAAC,KAAK,CAAC,MAAN,CAAa,MAAd,CAAtD,EAA6E;AACzE,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,YAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,CAAL,CAAjB;AACA,YAAM,IAAI,GAAG,IAAI,CAAC,CAAD,CAAjB;;AACA,UAAI,aAAa,CAAC,IAAD,CAAb,GAAsB,aAAa,CAAC,IAAD,CAAvC,EAA+C;AAC3C,cAAM,IAAI,KAAJ,CAAU,2FAAV,CAAN;AACH;AACJ;AACJ;;AAED,QAAM,SAAS,GAAG,kBAAkB,CAAC,UAAD,CAApC;AACA,QAAM,UAAU,GAAG,aAAa,CAAC,KAAD,CAAhC;AAEA,QAAM,MAAM,GAAG,OAAO,YAAP,KAAwB,UAAxB,GACT,YAAY,CAAC,IAAD,CADH,GAET,QAAQ,CAAC,YAAY,CAAC,GAAb,CAAkB,CAAD,IAAO,OAAO,CAAC,CAAD,CAA/B,EAAoC,GAApC,CAAyC,IAAD,IAAU,IAAI,CAAC,IAAD,EAAO,aAAP,CAAtD,CAAD,CAFd;AAIA,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,gBAAb;AAA+B,IAAA,MAA/B;AAAuC,IAAA,QAAvC;AAAiD,IAAA;AAAjD,MAAgE,iBAAiB,CAAC,KAAD,CAAvF;AACA,QAAM,aAAa,GAAG,SAAS,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB,EAA8B,SAA9B,CAA/B;AAEA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA;AAAZ,MAAuB,UAAU,CAAC,QAAD,EAAW,MAAX,EAAmB,aAAnB,EAAkC,aAAlC,CAAvC;;AAEA,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,IAAyC,QAAQ,CAAC,MAAT,IAAmB,CAAhE,EAAmE;AAC/D,UAAM,IAAI,KAAJ,CAAU,WAAW,QAAQ,CAAC,MAAM,wDAApC,CAAN;AACH;;AACD,SAAO;AACH,IAAA,QADG;AAEH,IAAA,MAAM,EAAE,aAAa,CAAC,MAAd,CAAqB,MAArB,CAFL;AAGH,IAAA,SAHG;AAIH,IAAA,gBAJG;AAKH,IAAA,QALG;AAMH,IAAA;AANG,GAAP;AAQH;;AAED,SAAS,SAAT,CAAmB,MAAnB,EAA2B,UAA3B,EAAuC,OAAvC,EAAgD,SAAS,GAAG,CAA5D,EAA6D;AACzD,MAAI,MAAM,CAAC,gBAAX,EAA6B;AACzB,QAAI,KAAK,CAAC,OAAD,CAAT,EAAoB;AAAE,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AAAkE;;AACxF,IAAA,MAAM,CAAC,gBAAP,CAAwB,CAAC,CAAD,EAAI,UAAU,CAAC,KAAf,CAAxB,EAA+C,OAA/C;AACH,GAHD,MAGO,IAAI,MAAM,CAAC,OAAX,EAAoB;AACvB,QAAI,KAAK,CAAC,OAAD,CAAT,EAAoB;AAAE,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AAAkE;;AACxF,IAAA,MAAM,CAAC,KAAP,CAAa,CAAC,CAAD,EAAI,UAAU,CAAC,KAAf,CAAb;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,OAAO,GAAG,CAAzB;AACH,GAJM,MAIA;AACH,UAAM;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAAkB,KAAK,CAAC,OAAD,CAAL,GAClB,OADkB,GAElB;AAAE,MAAA,IAAI,EAAE,OAAR;AAAiB,MAAA,KAAK,EAAE;AAAxB,KAFN;;AAGA,QAAI,SAAS,GAAG,CAAhB,EAAmB;AACf,MAAA,MAAM,CAAC,KAAP,CAAa,CAAC,IAAD,EAAO,UAAU,CAAC,KAAX,GAAmB,KAA1B,CAAb;AACH,KAFD,MAEO;AACH,MAAA,MAAM,CAAC,KAAP,CAAa,CAAC,UAAU,CAAC,KAAX,GAAmB,KAApB,EAA2B,IAA3B,CAAb;AACH;AACJ;;AACD,SAAO,MAAP;AACH;;AAED,SAAS,gBAAT,CAA0B,KAA1B,EAA+B;AAC3B,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA;AAAb,MAA2B,KAAjC;AAEA,SAAO;AACH,IAAA,OAAO,EAAE,CAAC,IAAI,CAAC,GAAL,CAAS,SAAS,CAAC,CAAD,CAAlB,EAAuB,SAAS,CAAC,CAAD,CAAhC,CAAD,EAAuC,IAAI,CAAC,GAAL,CAAS,SAAS,CAAC,CAAD,CAAlB,EAAuB,SAAS,CAAC,CAAD,CAAhC,CAAvC,CADN;AAEH,IAAA,WAAW,EAAE,CAAC,IAAI,CAAC,GAAL,CAAS,SAAS,CAAC,CAAD,CAAlB,EAAuB,SAAS,CAAC,CAAD,CAAhC,CAAD,EAAuC,IAAI,CAAC,GAAL,CAAS,SAAS,CAAC,CAAD,CAAlB,EAAuB,SAAS,CAAC,CAAD,CAAhC,CAAvC;AAFV,GAAP;AAIH;;AAED,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,SAAtC,EAAiD,IAAjD,EAAqD;AACjD,QAAM,WAAW,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAD,CAAL,CAAV,CAAP,CAAN,IAAyC,SAAS,CAAC,MAAM,CAAC,MAAR,CAAtE;AACA,SAAO,WAAP;AACH;;AAsDD,OAAM,MAAO,WAAP,SAA2B,KAAK,CAAC,SAAjC,CAA8E;AA6FhF,EAAA,WAAA,CAAY,KAAZ,EAAmC;AAC/B,UAAM,KAAN;AAEA,SAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAK,iBAAL,GAAyB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAzB;AAEA,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK,kBAAL,GAA0B,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK,iBAAL,GAAyB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAK,iBAAL,GAAyB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAArB;AAEA,SAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAK,uBAAL,GAA+B,KAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAK,sBAAL,GAA8B,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAAZ;AACA,SAAK,MAAL,GAAc,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAA3B;AAEA,SAAK,aAAL,GAAqB,EAArB;AACA,SAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAK,oBAAL,GAA4B,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAK,uBAAL,GAA+B,KAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAK,cAAL,GAAsB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAvB;AAEA,SAAK,aAAL,GAAqB,KAArB;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,YAAL,GAAoB,EAApB;AACA,SAAK,kBAAL,GAA0B,CAA1B;;AAEA,UAAM,EAAA,GAAA,UAAA,CAAA,KAAA,EAAA,IAAA,CAAN;AAAA,UAAM;AAAE,MAAA;AAAF,QAAU,EAAhB;AAAA,UAAkB,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,CAAA,CAAlB;;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,QAAL,GAAgB,QAAhB;AACH;;AAEM,EAAA,oBAAoB,CAAC,IAAD,EAAK;AAC5B,SAAK,gBAAL,GAAwB,IAAxB;AACH;;AAEM,EAAA,uBAAuB,CAAC,IAAD,EAAK;AAC/B,SAAK,mBAAL,GAA2B,IAA3B;AACH;;AAEM,EAAA,eAAe,GAAA;AAClB,WAAO,KAAK,YAAZ;AACH;;AAEM,EAAA,WAAW,GAAA;AACd,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACO,KAAK,KADZ,CAAA,EACiB;AACb,MAAA,QAAQ,EAAE,KAAK;AADF,KADjB,CAAA;AAIH;;AAEM,EAAA,iBAAiB,GAAA;AACpB,QAAI,KAAK,mBAAT,EAA8B;AAC1B,aAAO,KAAK,mBAAL,CAAyB,iBAAzB,EAAP;AACH;AACJ;;AAEM,EAAA,sBAAsB,GAAA;AACzB,SAAK,kBAAL;AACA,WAAO,KAAK,kBAAZ;AACH;;AAEM,EAAA,eAAe,GAAA;AAClB,UAAM,QAAQ,GAAG,KAAK,iBAAL,EAAjB;;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,IAAzB,EAA+B;AAC3B,MAAA,WAAW,CAAC,CACR,QAAQ,CAAC,IADD,EAER,QAAQ,CAAC,UAFD,CAAD,EAGR,KAAK,KAAL,CAAW,KAHH,CAAX;AAIH;AACJ;;AAEM,EAAA,gBAAgB,GAAA;AACnB,UAAM,QAAQ,GAAG,KAAK,iBAAL,EAAjB;;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,UAAzB,EAAqC;AACjC,MAAA,WAAW,CAAC,CACR,QAAQ,CAAC,UADD,CAAD,EAER,KAAK,KAAL,CAAW,KAFH,CAAX;AAGH;AACJ;;AAEM,EAAA,gBAAgB,GAAA;AACnB,UAAM,QAAQ,GAAG,KAAK,iBAAL,EAAjB;;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,IAAzB,EAA+B;AAC3B,MAAA,WAAW,CAAC,CACR,QAAQ,CAAC,IADD,EAER,QAAQ,CAAC,UAFD,EAGR,QAAQ,CAAC,EAHD,CAAD,EAIR,KAAK,KAAL,CAAW,KAJH,CAAX;AAKH;AACJ;;AAEM,EAAA,SAAS,CAAC,EAAD,EAAK,IAAL,EAAS;AACrB,UAAM;AAAE,MAAA,gBAAgB,GAAG,OAAO,CAAC;AAC/B,QAAA,SAAS,EAAE,KADoB;AAE/B,QAAA,UAAU,EAAE;AAFmB,OAAD;AAA5B,QAGC,IAHP;AAIA,SAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,MAAnB,CAAyB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAC1C,MAAA;AAD0C,KAAA,EAEvC,IAFuC,CAAA,EAEnC;AACP,MAAA;AADO,KAFmC,CAAzB,CAArB;AAKH;;AAEM,EAAA,WAAW,CAAC,EAAD,EAAG;AACjB,SAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,MAAnB,CAA2B,IAAD,IAAU,IAAI,CAAC,EAAL,KAAY,EAAhD,CAArB;AACH;;AAEM,EAAA,mBAAmB,GAAA;AACtB,WAAO,KAAK,aAAL,CACF,GADE,CACG,IAAD,IAAU,IAAI,CAAC,gBAAL,EADZ,CAAP;AAEH;;AAEM,EAAA,cAAc,CAAC,SAAD,EAAU;AAC3B,QAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AAC/B,WAAK,gBAAL,CAAsB,cAAtB,CAAqC,SAArC;AACH;AACJ;;AAEM,EAAA,QAAQ,CAAC,EAAD,EAAG;AACd,UAAM,kBAAkB,GAAG,KAAK,aAAL,CACtB,MADsB,CACd,IAAD,IAAU,IAAI,CAAC,gBAAL,GAAwB,SADnB,CAA3B;AAGA,WAAO,kBAAkB,CAAC,MAAnB,GAA4B,CAA5B,IACA,IAAI,CAAC,kBAAD,CAAJ,CAAyB,EAAzB,KAAgC,EADvC;AAEH;;AAEM,EAAA,iBAAiB,CAAC,OAAD,EAAU,CAAV,EAAW;AAC/B,UAAM;AAAE,MAAA,SAAF;AAAa,MAAA,WAAb;AAA0B,MAAA,QAA1B;AAAoC,MAAA;AAApC,QAA+C,KAAK,KAA1D;AAEA,UAAM,aAAa,GAAG,gBAAgB,CAAC,WAAD,EAAc,OAAd,CAAtC;AACA,UAAM,WAAW,GAAG,cAAc,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,CAAlC;AAEA,SAAK,YAAL,CAAkB,aAAlB,EAAiC;AAC7B,MAAA,OAD6B;AAE7B,MAAA,WAF6B;AAG7B,MAAA;AAH6B,KAAjC,EAIG,CAJH;AAKH;;AAEM,EAAA,uBAAuB,CAAC,SAAD,EAAU;AACpC,UAAM;AACF,MAAA,SADE;AAEF,MAAA,gBAFE;AAGF,MAAA,MAAM,EAAE,aAHN;AAIF,MAAA,WAAW,EAAE,kBAJX;AAKF,MAAA,QAAQ,EAAE;AALR,QAMF,KAAK,KANT;AAQA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;AACA,UAAM;AAAE,MAAA;AAAF,QAAe,IAArB;AACA,UAAM;AAAE,MAAA;AAAF,QAAqB,KAAK,KAAhC;AAEA,UAAM;AAAE,MAAA,QAAQ,EAAE,cAAZ;AAA4B,MAAA;AAA5B,QAAuC,UAAU,CACnD,QADmD,EAEnD,SAFmD,EAGnD,SAHmD,EAInD,aAJmD,EAKnD;AACI,MAAA,eAAe,EAAE,eADrB;AAEI,MAAA,aAAa,EAAE,aAAa,CAAC,MAAd;AAFnB,KALmD,CAAvD;AAWA,UAAM,QAAQ,GAAG,cAAc,CAAC,cAAD,CAA/B;AACA,UAAM,YAAY,GAAG,aAAa,CAAC,IAAd,GAAqB,MAArB,CAA4B,MAA5B,CAArB,CAzBoC,CA2BpC;;AACA,UAAM,WAAW,GAAG,gCAAgC,CAChD,kBADgD,EAEhD;AAAE,MAAA,QAAF;AAAY,MAAA,SAAZ;AAAuB,MAAA,gBAAvB;AAAyC,MAAA;AAAzC,KAFgD,EAGhD,YAAY,CAAC,MAAb,EAHgD,CAApD;AAMA,WAAO;AACH,MAAA,MAAM,EAAE,YADL;AAEH,MAAA,QAFG;AAGH,MAAA;AAHG,KAAP;AAKH;;AAEM,EAAA,eAAe,CAAC,YAAD,EAAe,UAAf,EAAyB;AAC3C,UAAM;AAAE,MAAA,MAAM,EAAE;AAAV,QAAiC,YAAvC;AAEA,UAAM;AACF,MAAA,MAAM,EAAE,aADN;AAEF,MAAA,WAAW,EAAE,kBAFX;AAGF,MAAA,QAAQ,EAAE,eAHR;AAIF,MAAA,SAJE;AAKF,MAAA;AALE,QAMF,KAAK,KANT;AAOA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;AACA,UAAM;AAAE,MAAA;AAAF,QAAe,IAArB;AACA,UAAM;AAAE,MAAA;AAAF,QAAqB,KAAK,KAAhC;AAEA,UAAM;AAAE,MAAA,OAAO,EAAE,GAAX;AAAgB,MAAA,WAAW,EAAE;AAA7B,QAAqC,gBAAgB,CAAC,YAAD,CAA3D;AACA,UAAM;AAAE,MAAA,OAAO,EAAE,GAAX;AAAgB,MAAA,WAAW,EAAE;AAA7B,QAAqC,gBAAgB,CAAC,UAAD,CAA3D;AAEA,UAAM,CAAC,GAAG,kBAAkB,CAAC,KAAnB,GAA2B,CAA3B,CAAV;AAEA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,EAAE,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAZ,GAAkB,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAhC,KAAwC,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAApD,CAAX,CAAd;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAR,KAAgB,CAAC,GAAG,GAAG,CAAC,CAAD,CAAvB,IAA8B,CAAC,CAAC,GAAG,GAAG,CAAC,CAAD,CAAR,KAAgB,CAAC,GAAG,GAAG,CAAC,CAAD,CAAvB,CAA/B,KAAgE,CAAC,GAAG,GAAG,CAAC,CAAD,CAAR,IAAgB,CAAC,GAAG,GAAG,CAAC,CAAD,CAAvB,CAA/D,CAAf,CAAd;AAEA,UAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,KAAD,GAAS,GAAG,CAAC,CAAD,CAAZ,IAAmB,CAAC,KAAD,GAAS,GAAG,CAAC,CAAD,CAA/B,CAAX,CAAV;AACA,UAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAC,KAAK,GAAG,CAAT,KAAe,CAAC,GAAG,GAAG,CAAC,CAAD,CAAtB,KAA8B,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,CAAD,CAAX,CAAnC,CAAf,CAAV;AAEA,UAAM,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,CAAW,kBAAkB,CAAC,MAA9B,CAAlB,CAzB2C,CA0B3C;;AAEA,UAAM;AAAE,MAAA,QAAQ,EAAE,cAAZ;AAA4B,MAAA;AAA5B,QAAuC,UAAU,CACnD,QADmD,EAEnD,SAFmD,EAGnD,SAHmD,EAInD,kBAJmD,EAKnD;AACI,MAAA,eAAe,EAAE,eADrB;AAEI,MAAA,aAAa,EAAE,aAAa,CAAC,MAAd;AAFnB,KALmD,CAAvD;AAWA,UAAM,QAAQ,GAAG,cAAc,CAAC,cAAD,CAA/B;AACA,UAAM,YAAY,GAAG,aAAa,CAAC,IAAd,GAAqB,MAArB,CAA4B,MAA5B,CAArB;AAEA,UAAM,OAAO,GAAG,UAAU,CAAC,SAA3B,CA1C2C,CA4C3C;;AACA,UAAM,WAAW,GAAG,gCAAgC,CAChD,kBADgD,EAEhD;AAAE,MAAA,QAAF;AAAY,MAAA,SAAZ;AAAuB,MAAA,gBAAvB;AAAyC,MAAA;AAAzC,KAFgD,EAGhD,YAAY,CAAC,MAAb,EAHgD,CAApD;AAKA,UAAM,WAAW,GAAG,cAAc,CAAC,YAAD,EAAe,SAAf,EAA0B,OAA1B,EAAmC,QAAnC,CAAlC;AAEA,WAAO;AACH,MAAA,WADG;AAEH,MAAA,MAAM,EAAE,YAFL;AAGH,MAAA,QAHG;AAIH,MAAA,OAJG;AAKH,MAAA;AALG,KAAP;AAOH;;AAEM,EAAA,UAAU,GAAA;AACb,SAAK,gBAAL,CAAsB,UAAtB;AACA,SAAK,YAAL,CAAkB,YAAlB;AACH;;AAEM,EAAA,eAAe,CAAC,YAAD,EAAe,UAAf,EAA2B,CAA3B,EAA4B;AAC9C,QAAI,CAAC,KAAK,iCAAV,EAA6C;AACzC,WAAK,iCAAL,GAAyC,IAAzC;AACA,YAAM,KAAK,GAAG,KAAK,eAAL,CAAqB,YAArB,EAAmC,UAAnC,CAAd;AAEA,WAAK,YAAL,CAAkB,WAAlB,EAA+B,KAA/B,EAAsC,CAAtC;AAEA,WAAK,UAAL,GAAkB,UAAlB;AAEA,MAAA,qBAAqB,CAAC,MAAK;AACvB,aAAK,eAAL;AACA,aAAK,IAAL,CAAU;AAAE,UAAA,OAAO,EAAE;AAAX,SAAV;AACA,aAAK,iCAAL,GAAyC,KAAzC;AACH,OAJoB,CAArB;AAKH;AACJ;;AAEM,EAAA,kBAAkB,CAAC,YAAD,EAAe,CAAf,EAAgB;AACrC,UAAM;AAAE,MAAA;AAAF,QAAgB,KAAK,KAA3B;;AAEA,QAAI,KAAK,UAAT,EAAqB;AACjB,YAAM,KAAK,GAAG,KAAK,eAAL,CAAqB,YAArB,EAAmC,KAAK,UAAxC,CAAd;AACA,YAAM;AAAE,QAAA;AAAF,UAAa,KAAnB;AACA,WAAK,YAAL,CAAkB,WAAlB,EAA+B,KAA/B,EAAsC,CAAtC;AAEA,WAAK,UAAL,GAAkB,SAAlB;AAEA,WAAK,gBAAL;AAEA,YAAM;AAAE,QAAA;AAAF,UAAe,IAArB;AACA,YAAM,SAAS,GAAG,IAAI,CAAC,QAAD,CAAtB;AAEA,YAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAP,EAAD,CAAlB;AACA,YAAM,GAAG,GAAG,SAAS,CAAC,SAAD,CAArB;AACA,YAAM;AAAE,QAAA;AAAF,UAAiB,KAAK,KAA5B;AAEA,WAAK,QAAL,CAAc,KAAd,EAAqB,MAAK;AACtB,YAAI,KAAK,GAAG,GAAZ,EAAiB;AACb,UAAA,UAAU,CAAC,KAAD,EAAQ,GAAR,CAAV;AACH;AACJ,OAJD;AAKH;AACJ;;AAEM,EAAA,UAAU,CAAC,aAAD,EAAgB,OAAhB,EAAyB,CAAzB,EAA0B;AACvC,QAAI,KAAK,aAAT,EAAwB;AACpB;AACH;;AAED,UAAM;AAAE,MAAA,SAAF;AAAa,MAAA,MAAM,EAAE,aAArB;AAAoC,MAAA,QAAQ,EAAE;AAA9C,QAAkE,KAAK,KAA7E;AACA,UAAM;AACF,MAAA,cAAc,GAAG,WAAW,CAAC,YAAZ,CAAyB,cADxC;AAEF,MAAA;AAFE,QAGF,KAAK,KAHT;AAIA,UAAM;AAAE,MAAA;AAAF,QAAe,IAArB;AACA,UAAM,IAAI,GAAG,UAAU,CAAC;AACpB,MAAA,MAAM,EAAE,aADY;AAEpB,MAAA,SAFoB;AAGpB,MAAA,OAHoB;AAIpB,MAAA,QAAQ,EAAE,eAJU;AAKpB,MAAA;AALoB,KAAD,CAAvB;AAQA,UAAM,EAAE,GAAG,aAAa,CAAC,IAAD,CAAxB;AACA,UAAM,CAAC,GAAG,aAAa,GAAG,CAAhB,GAAoB,IAAI,cAAxB,GAAyC,IAAI,cAAvD;AACA,UAAM,SAAS,GAAG,aAAa,CAAC,KAAd,GAAsB,GAAtB,CAA2B,CAAD,IAAO,EAAE,GAAG,CAAC,CAAC,GAAG,EAAL,IAAW,CAAjD,EAAoD,GAApD,CAAwD,aAAa,CAAC,MAAtE,CAAlB;AAEA,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA,QAAV;AAAoB,MAAA;AAApB,QAAoC,KAAK,uBAAL,CAA6B,SAA7B,CAA1C;AAEA,UAAM,WAAW,GAAG,cAAc,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,CAAlC;AACA,UAAM,aAAa,GAAG,gBAAgB,CAAC,WAAD,EAAc,OAAd,CAAtC;AAEA,SAAK,gBAAL;AAEA,UAAM,SAAS,GAAG,IAAI,CAAC,QAAD,CAAtB;AAEA,UAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAP,EAAD,CAAlB;AACA,UAAM,GAAG,GAAG,SAAS,CAAC,SAAD,CAArB;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;AAEA,SAAK,YAAL,GAAoB;AAChB,MAAA,OADgB;AAEhB,MAAA,WAFgB;AAGhB,MAAA;AAHgB,KAApB;AAMA,SAAK,YAAL,CAAkB,MAAlB,EAA0B;AACtB,MAAA,MADsB;AAEtB,MAAA,QAFsB;AAGtB,MAAA,WAHsB;AAItB,MAAA,OAJsB;AAKtB,MAAA,aALsB;AAMtB,MAAA,WANsB;AAOtB,MAAA,IAAI,EAAE;AAPgB,KAA1B,EAQG,CARH;AAUA,SAAK,QAAL,CAAc;AACV,MAAA,MADU;AAEV,MAAA,QAFU;AAGV,MAAA;AAHU,KAAd,EAIG,MAAK;AACJ,UAAI,KAAK,GAAG,GAAZ,EAAiB;AACb,QAAA,UAAU,CAAC,KAAD,EAAQ,GAAR,CAAV;AACH;AACJ,KARD;AASH;;AAEM,EAAA,SAAS,CAAC,SAAD,EAAU;AACtB,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA,QAAV;AAAoB,MAAA;AAApB,QAAoC,KAAK,uBAAL,CAA6B,SAA7B,CAA1C;AACA,SAAK,gBAAL;AAEA,UAAM;AAAE,MAAA;AAAF,QAAgB,KAAK,KAA3B;AACA,UAAM;AAAE,MAAA;AAAF,QAAe,IAArB;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,QAAD,CAAtB;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAP,EAAD,CAAlB;AACA,UAAM,GAAG,GAAG,SAAS,CAAC,SAAD,CAArB;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;AAEA,SAAK,QAAL,CAAc;AACV,MAAA,MADU;AAEV,MAAA,QAFU;AAGV,MAAA;AAHU,KAAd,EAIG,MAAK;AACJ,UAAI,KAAK,GAAG,GAAZ,EAAiB;AAAE,QAAA,UAAU,CAAC,KAAD,EAAQ,GAAR,CAAV;AAAyB;AAC/C,KAND;AAOH;;AAEM,EAAA,SAAS,CAAC,OAAD,EAAU,SAAV,EAAmB;AAC/B,SAAK,gBAAL;AACA,UAAM;AAAE,MAAA,WAAW,EAAE;AAAf,QAAsC,KAAK,KAAjD;AACA,UAAM,WAAW,GAAG,kBAAkB,CACjC,GADe,CACV,IAAD,IAAS;AACV,UAAI,IAAI,CAAC,EAAL,KAAY,OAAhB,EAAyB;AACrB,cAAM;AAAE,UAAA;AAAF,YAAa,IAAnB;AACA,eAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACO,IADP,CAAA,EACW;AACP,UAAA,MAAM,EAAE,MAAM,CAAC,IAAP,GAAc,MAAd,CAAqB,SAArB,CADD;AAEP,UAAA,WAAW,EAAE;AAFN,SADX,CAAA;AAKH,OAPD,MAOO;AACH,eAAO,IAAP;AACH;AACJ,KAZe,CAApB;AAcA,SAAK,QAAL,CAAc;AACV,MAAA;AADU,KAAd;AAGH;;AAEM,EAAA,YAAY,CAAC,IAAD,EAAO,KAAP,EAAe,CAAf,EAAiB;AAEhC,SAAK,aAAL,CAAmB,OAAnB,CAA4B,IAAD,IAAS;AAChC,YAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,KAAK,KADD,CAAA,EACM;AACb,QAAA,QAAQ,EAAE,KAAK,QADF;AAEb,QAAA,aAAa,EAAE,KAAK;AAFP,OADN,CAAX;AAKA,MAAA,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,CAAlC;AACH,KAPD;AAQH;;AAEM,EAAA,IAAI,CAAC,KAAD,EAAM;AACb,SAAK,aAAL,CAAmB,OAAnB,CAA4B,IAAD,IAAS;AAChC,UAAI,SAAS,CAAC,IAAI,CAAC,IAAN,CAAb,EAA0B;AACtB,QAAA,IAAI,CAAC,IAAL,CAAU,KAAV;AACH;AACJ,KAJD;AAKH;;AAEM,EAAA,MAAM,GAAA;AACT,SAAK,gBAAL;AACA,SAAK,IAAL,CAAU;AAAE,MAAA,KAAK,EAAE;AAAT,KAAV;AACH;;AAEM,EAAA,SAAS,CAAC,OAAD,EAAU,aAAV,EAAyB;AAAE,IAAA,EAAF;AAAM,IAAA;AAAN,GAAzB,EAAqC,WAArC,EAAgD;AAC5D,UAAM;AAAE,MAAA,SAAF;AAAa,MAAA,gBAAb;AAA+B,MAAA,WAAW,EAAE;AAA5C,QAAmE,KAAK,KAA9E;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;AACA,UAAM;AAAE,MAAA;AAAF,QAAe,IAArB;AACA,UAAM;AAAE,MAAA;AAAF,QAAqB,KAAK,KAAhC;;AAEA,QAAI,YAAY,CAAC,aAAa,CAAC,MAAf,CAAhB,EAAwC;AACpC,YAAM,IAAI,KAAJ,CAAU,sDACV,8EADA,CAAN;AAEH;;AAED,UAAM,SAAS,GAAG,aAAa,CAAC,KAAd,GAAsB,GAAtB,CAA2B,CAAD,IAAO,CAAC,GAAG,EAArC,EAAyC,GAAzC,CAA6C,aAAa,CAAC,MAA3D,CAAlB;AAEA,UAAM;AAAE,MAAA,QAAQ,EAAE,cAAZ;AAA4B,MAAA;AAA5B,QAAuC,UAAU,CACnD,QADmD,EAEnD,SAFmD,EAGnD,SAHmD,EAInD,aAJmD,EAKnD;AACI,MAAA,eAAe,EAAE,KAAK,uCAD1B;AAEI,MAAA,aAAa,EAAE,KAAK;AAFxB,KALmD,CAAvD;AAWA,UAAM,YAAY,GAAG,aAAa,CAAC,IAAd,GAAqB,MAArB,CAA4B,MAA5B,CAArB;AACA,UAAM,QAAQ,GAAG,cAAc,CAAC,cAAD,CAA/B;AAEA,UAAM,WAAW,GAAG,cAAc,CAAC,YAAD,EAAe,SAAf,EAA0B,OAA1B,EAAmC,QAAnC,CAAlC;AACA,UAAM,WAAW,GAAG,gCAAgC,CAChD,kBADgD,EAEhD;AAAE,MAAA,QAAF;AAAY,MAAA,SAAZ;AAAuB,MAAA,gBAAvB;AAAyC,MAAA;AAAzC,KAFgD,EAGhD,YAAY,CAAC,MAAb,EAHgD,EAIhD,EAJgD,EAKhD,WALgD,CAApD;AAOA,UAAM,aAAa,GAAG,gBAAgB,CAAC,WAAD,EAAc,OAAd,CAAtC;AAEA,WAAO;AACH,MAAA,MAAM,EAAE,YADL;AAEH,MAAA,QAFG;AAGH,MAAA,WAHG;AAIH,MAAA,OAJG;AAKH,MAAA,aALG;AAMH,MAAA;AANG,KAAP;AAQH;;AAEM,EAAA,SAAS,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,EAAsC,WAAtC,EAAmD,CAAnD,EAAoD;AAChE,QAAI,CAAC,KAAK,2BAAV,EAAuC;AACnC,WAAK,2BAAL,GAAmC,IAAnC;AAEA,WAAK,uCAAL,GAA+C,KAAK,uCAAL,IAAgD,KAAK,KAAL,CAAW,QAA1G;AACA,WAAK,qCAAL,GAA6C,KAAK,qCAAL,IAA8C,KAAK,KAAL,CAAW,MAAX,CAAkB,MAAlB,EAA3F;AAEA,YAAM,KAAK,GAAG,KAAK,SAAL,CAAe,aAAf,EAA8B,cAA9B,EAA8C,IAA9C,EAAoD,WAApD,CAAd;AAEA,WAAK,uCAAL,GAA+C,KAAK,CAAC,QAArD;AACA,WAAK,qCAAL,GAA6C,KAAK,CAAC,MAAN,CAAa,MAAb,EAA7C;AAEA,WAAK,aAAL,GAAqB,IAArB;AAEA,WAAK,YAAL,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC,CAAhC;AAEA,WAAK,YAAL,GAAoB;AAChB,QAAA,OAAO,EAAE,KAAK,CAAC,OADC;AAEhB,QAAA,WAAW,EAAE,KAAK,CAAC,WAFH;AAGhB,QAAA,aAAa,EAAE,KAAK,CAAC;AAHL,OAApB;AAKA,MAAA,qBAAqB,CAAC,MAAK;AACvB,aAAK,2BAAL,GAAmC,KAAnC;AACA,aAAK,eAAL;AACA,aAAK,IAAL,CAAU;AAAE,UAAA,OAAO,EAAE;AAAX,SAAV;AACH,OAJoB,CAArB;AAKH;AACJ;;AAEM,EAAA,YAAY,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,EAAsC,WAAtC,EAAmD,CAAnD,EAAoD;AACnE,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,aAAf,EAA8B,cAA9B,EAA8C,IAA9C,EAAoD,WAApD,CAAd;AACA,SAAK,uCAAL,GAA+C,IAA/C;AACA,SAAK,qCAAL,GAA6C,IAA7C;AAEA,SAAK,aAAL,GAAqB,KAArB;AAEA,UAAM;AACF,MAAA,MADE;AAEF,MAAA,QAFE;AAGF,MAAA;AAHE,QAIF,KAJJ;AAMA,SAAK,YAAL,CAAkB,QAAlB,EAA4B,KAA5B,EAAmC,CAAnC;AAEA,IAAA,qBAAqB,CAAC,MAAK;AACvB,YAAM;AAAE,QAAA;AAAF,UAAgB,KAAK,KAA3B;AACA,YAAM;AAAE,QAAA;AAAF,UAAe,IAArB;AAEA,YAAM,SAAS,GAAG,IAAI,CAAC,QAAD,CAAtB;AACA,YAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAP,EAAD,CAAlB;AACA,YAAM,GAAG,GAAG,SAAS,CAAC,SAAD,CAArB;AAEA,YAAM;AAAE,QAAA;AAAF,UAAiB,KAAK,KAA5B;AAEA,WAAK,gBAAL;AAEA,WAAK,QAAL,CAAc;AACV,QAAA,MADU;AAEV,QAAA,QAFU;AAGV,QAAA;AAHU,OAAd,EAIG,MAAK;AACJ,YAAI,KAAK,GAAG,GAAZ,EAAiB;AAAE,UAAA,UAAU,CAAC,KAAD,EAAQ,GAAR,CAAV;AAAyB;AAC/C,OAND;AAOH,KAnBoB,CAArB;AAoBH;;AAEM,EAAA,eAAe,CAAC,aAAD,EAAgB,aAAhB,EAA+B,CAA/B,EAAgC;AAClD,SAAK,YAAL,CAAkB,WAAlB,EAA+B,KAAK,YAApC,EAAkD,CAAlD;AACH;;AAEM,EAAA,gBAAgB,CAAC,CAAD,EAAE;AACrB,SAAK,YAAL,CAAkB,YAAlB,EAAgC;AAC5B,MAAA,IAAI,EAAE;AADsB,KAAhC,EAEG,CAFH;AAGH;;AAEM,EAAA,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,CAArB,EAAsB;AACxC,QAAI,CAAC,KAAK,iCAAV,EAA6C;AACzC,WAAK,iCAAL,GAAyC,IAAzC;AAEA,YAAM;AAAE,QAAA,WAAF;AAAe,QAAA,QAAf;AAAyB,QAAA,MAAzB;AAAiC,QAAA;AAAjC,UAA+C,KAAK,KAA1D;AACA,YAAM,aAAa,GAAG,gBAAgB,CAAC,WAAD,EAAc,OAAd,CAAtC;AACA,YAAM,WAAW,GAAG,cAAc,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,CAAlC;AACA,WAAK,YAAL,CAAkB,WAAlB,EAA+B;AAC3B,QAAA,IAAI,EAAE,IADqB;AAE3B,QAAA,OAF2B;AAG3B;AACA,QAAA,WAAW,EAAE,KAAK,WAJS;AAK3B,QAAA,WAL2B;AAM3B,QAAA;AAN2B,OAA/B,EAOG,CAPH;AASA,WAAK,WAAL,GAAmB,OAAnB;AACA,WAAK,YAAL,GAAoB;AAChB,QAAA,OADgB;AAEhB,QAAA,WAFgB;AAGhB,QAAA;AAHgB,OAApB;AAMA,MAAA,qBAAqB,CAAC,MAAK;AACvB,aAAK,gBAAL;AACA,aAAK,IAAL,CAAU;AAAE,UAAA,OAAO,EAAE;AAAX,SAAV;AACA,aAAK,iCAAL,GAAyC,KAAzC;AACH,OAJoB,CAArB;AAKH;AACJ;;AAEM,EAAA,gBAAgB,CAAC,CAAD,EAAE;AACrB,SAAK,YAAL,CAAkB,YAAlB,EAAgC;AAAE,MAAA,IAAI,EAAE;AAAR,KAAhC,EAAiD,CAAjD;AACA,SAAK,gBAAL;AACA,SAAK,IAAL,CAAU;AAAE,MAAA,OAAO,EAAE;AAAX,KAAV;AACH;;AAEM,EAAA,eAAe,CAAC;AAAE,IAAA;AAAF,GAAD,EAAe,CAAf,EAAgB;AAClC,SAAK,YAAL,CAAkB,WAAlB,EAA+B;AAAE,MAAA;AAAF,KAA/B,EAA6C,CAA7C;AACH;;AAEM,EAAA,UAAU,CAAC;AAAE,IAAA,QAAF;AAAY,IAAA;AAAZ,GAAD,EAAwB,CAAxB,EAAyB;AACtC,UAAM;AAAE,MAAA,WAAF;AAAe,MAAA,QAAf;AAAyB,MAAA,MAAzB;AAAiC,MAAA;AAAjC,QAA+C,KAAK,KAA1D;AACA,UAAM,aAAa,GAAG,gBAAgB,CAAC,WAAD,EAAc,OAAd,CAAtC;AACA,UAAM,WAAW,GAAG,cAAc,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,CAAlC;AAEA,SAAK,YAAL,CAAkB,MAAlB,EAA0B;AACtB,MAAA,QADsB;AAEtB,MAAA,OAFsB;AAGtB,MAAA,WAHsB;AAItB,MAAA;AAJsB,KAA1B,EAKG,CALH;AAOA,SAAK,YAAL,GAAoB;AAChB,MAAA,OADgB;AAEhB,MAAA,WAFgB;AAGhB,MAAA;AAHgB,KAApB;AAMA,IAAA,qBAAqB,CAAC,MAAK;AACvB,WAAK,gBAAL;AACA,WAAK,IAAL,CAAU;AAAE,QAAA,OAAO,EAAE;AAAX,OAAV;AACH,KAHoB,CAArB;AAIH;;AAEM,EAAA,aAAa,CAAC;AAAE,IAAA;AAAF,GAAD,EAAc,CAAd,EAAe;AAC/B,SAAK,YAAL,CAAkB,SAAlB,EAA6B;AAAE,MAAA;AAAF,KAA7B,EAA0C,CAA1C;AAEA,IAAA,qBAAqB,CAAC,MAAK;AACvB,WAAK,gBAAL;AACA,WAAK,IAAL,CAAU;AAAE,QAAA,OAAO,EAAE;AAAX,OAAV;AACH,KAHoB,CAArB;AAIH;;AAEM,EAAA,WAAW,CAAC,aAAD,EAAgB,CAAhB,EAAiB;AAC/B,SAAK,YAAL,CAAkB,OAAlB,EAA2B,KAAK,YAAhC,EAA8C,CAA9C;AAEA,IAAA,qBAAqB,CAAC,MAAK;AACvB,WAAK,gBAAL;AACA,WAAK,IAAL,CAAU;AAAE,QAAA,OAAO,EAAE;AAAX,OAAV;AACH,KAHoB,CAArB;AAIH;;AAEM,EAAA,iBAAiB,CAAC,aAAD,EAAgB,CAAhB,EAAiB;AACrC,SAAK,YAAL,CAAkB,UAAlB,EAA8B,EAA9B,EAAkC,CAAlC;AACH;;AAEM,EAAA,eAAe,GAAA;AAClB,UAAM,UAAU,GAAG,aAAa,CAAC,KAAK,KAAN,CAAhC;AACA,WAAO;AACH,MAAA,QAAQ,EAAE,KAAK,QADZ;AAEH,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,QAFlB;AAGH,MAAA,KAAK,EAAE,UAAU,CAAC,KAHf;AAIH,MAAA,MAAM,EAAE,UAAU,CAAC,MAJhB;AAKH,MAAA,WAAW,EAAE,KAAK,KAAL,CAAW,WALrB;AAMH,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,MANhB;AAOH,MAAA,SAAS,EAAE,KAAK,KAAL,CAAW,SAPnB;AAQH,MAAA,gBAAgB,EAAE,KAAK,KAAL,CAAW,gBAR1B;AASH,MAAA,eAAe,EAAE,KAAK,KAAL,CAAW,IATzB;AAUH,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,MAVhB;AAWH,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAXf;AAYH,MAAA,SAAS,EAAE,KAAK,SAZb;AAaH,MAAA,SAAS,EAAE,KAAK,SAbb;AAcH,MAAA,iBAAiB,EAAE,KAAK,iBAdrB;AAeH,MAAA,MAAM,EAAE,KAAK,MAfV;AAgBH,MAAA,SAAS,EAAE,KAAK,SAhBb;AAiBH,MAAA,WAAW,EAAE,KAAK,WAjBf;AAkBH,MAAA,sBAAsB,EAAE,KAAK,sBAlB1B;AAmBH,MAAA,eAAe,EAAE,KAAK,eAnBnB;AAoBH,MAAA,QAAQ,EAAE,KAAK,QApBZ;AAqBH,MAAA,cAAc,EAAE,KAAK;AArBlB,KAAP;AAuBH;;AAEM,EAAA,gCAAgC,CAAC,SAAD,EAAU;AAC7C,UAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,KAAN,EAAa,SAAb,CAA9B;AAEA,UAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,KAAL,CAAW,MAAZ,EAAoB,KAAK,KAAL,CAAW,SAA/B,EAA0C,KAAK,KAAL,CAAW,QAArD,CAAxC;AACA,UAAM;AAAE,MAAA,WAAW,EAAE;AAAf,QAAsC,KAAK,KAAjD;AAEA,QAAI,QAAJ;;AACA,QAAI,CAAC,WAAD,IAAgB,KAAhB,IAAyB,CAAC,YAAY,CAAC,KAAK,KAAL,CAAW,QAAZ,EAAsB,SAAS,CAAC,QAAhC,CAA1C,EAAqF;AACjF;AACA,MAAA,QAAQ,GAAG,UAAU,CAAC,SAAD,CAArB;AACA,WAAK,YAAL,GAAoB,EAApB;AACH,KAJD,MAIO;AAEH,YAAM,CAAC,KAAD,EAAQ,GAAR,IAAe,KAAK,KAAL,CAAW,MAAX,CAAkB,MAAlB,EAArB;AACA,YAAM,YAAY,GAAG,IAAI,CAAC,KAAK,QAAN,CAAzB;AAEA,YAAM,eAAe,GAAG,iBAAiB,CAAC,SAAD,CAAzC;AACA,YAAM;AAAE,QAAA;AAAF,UAAgB,eAAtB;AACA,YAAM,kBAAkB,GAAG,SAAS,CAAC,YAAD,CAAT,IAA2B,GAA3B,IAAkC,SAAS,CAAC,YAAD,CAAT,IAA2B,KAAxF;AAEA,MAAA,QAAQ,GAAG,WAAW,CAClB,eADkB,EAElB,KAAK,KAAL,CAAW,MAFO,EAGlB,SAHkB,EAIlB,kBAJkB,EAKlB,kBALkB,CAAtB;AAOH;;AAED,UAAM;AAAE,MAAA;AAAF,QAAyB,QAA/B;AAAA,UAAkB,KAAA,GAAA,MAAA,CAAA,QAAA,EAAA,CAAA,UAAA,CAAA,CAAlB;;AAEA,QAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,WAAK,gBAAL;AAEA,WAAK,QAAL,CAAc,KAAd;AACH;;AACD,SAAK,QAAL,GAAgB,QAAhB;AACH;;AAEM,EAAA,YAAY,CAAC,OAAD,EAAQ;AACvB,UAAM;AAAE,MAAA;AAAF,QAAkB,KAAK,KAA7B;AACA,QAAI,OAAO,GAAG,KAAd;AACA,UAAM,cAAc,GAAG,WAAW,CAC7B,GADkB,CACb,IAAD,IAAS;AACV,UAAI,CAAC,YAAY,CAAC,OAAD,CAAZ,IAAyB,IAAI,CAAC,EAAL,KAAY,OAAtC,KACG,CAAC,YAAY,CAAC,IAAI,CAAC,MAAL,CAAY,MAAZ,EAAD,EAAuB,IAAI,CAAC,WAA5B,CADpB,EAC8D;AAC1D,QAAA,OAAO,GAAG,IAAV;AACA,eAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACO,IADP,CAAA,EACW;AACP,UAAA,MAAM,EAAE,IAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,IAAI,CAAC,WAAxB,CADD;AAEP,UAAA,WAAW,EAAE;AAFN,SADX,CAAA;AAKH;;AACD,aAAO,IAAP;AACH,KAZkB,CAAvB;;AAcA,QAAI,OAAJ,EAAa;AACT,WAAK,gBAAL;AACA,WAAK,QAAL,CAAc;AACV,QAAA,WAAW,EAAE;AADH,OAAd;AAGH;AACJ;;AAEM,EAAA,qBAAqB,GAAA;AACxB,WAAO,CAAC,KAAK,aAAb;AACH;;AAEM,EAAA,MAAM,GAAA;AAET,UAAM;AACF,MAAA,IAAI,GAAG,WAAW,CAAC,YAAZ,CAAyB,IAD9B;AAEF,MAAA,uBAFE;AAGF,MAAA,QAHE;AAIF,MAAA,MAJE;AAKF,MAAA,KALE;AAMF,MAAA,MAAM,GAAG,WAAW,CAAC,YAAZ,CAAyB,MANhC;AAOF,MAAA,SAPE;AAQF,MAAA,MAAM,GAAG,WAAW,CAAC,YAAZ,CAAyB,MARhC;AASF,MAAA,YATE;AAUF,MAAA,KAVE;AAWF,MAAA,cAXE;AAYF,MAAA,QAZE;AAaF,MAAA,SAbE;AAcF,MAAA;AAdE,QAeF,KAAK,KAfT;AAiBA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,MAAZ;AAAoB,MAAA,SAApB;AAA+B,MAAA;AAA/B,QAA+C,KAAK,KAA1D;AACA,UAAM,UAAU,GAAG,aAAa,CAAC,KAAK,KAAN,CAAhC;AAEA,UAAM,WAAW,GAAG,oBAAoB,CAAC,MAAD,EAAS,SAAT,EAAoB,QAApB,CAAxC;AAEA,UAAM,WAAW,GAAG,uBAAuB,IAAI,WAA/C;AACA,UAAM,MAAM,GAAG,cAAc,EAA7B;AACA,WACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,KAAK,EAAE;AAAE,QAAA,QAAQ,EAAE,UAAZ;AAAwB,QAAA,KAAxB;AAA+B,QAAA;AAA/B,OAAZ;AAAqD,MAAA,SAAS,EAAE,SAAhE;AAA2E,MAAA,OAAO,EAAE;AAApF,KAAA,EACI,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AACZ,MAAA,GAAG,EAAE,KAAK,uBADE;AAEZ,MAAA,IAAI,EAAE,IAFM;AAGZ,MAAA,KAAK,EAAE,KAHK;AAIZ,MAAA,KAAK,EAAE,KAJK;AAKZ,MAAA,MAAM,EAAE,MALI;AAMZ,MAAA,MAAM,EAAE;AANI,KAAhB,CADJ,EAQI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,SAAhB;AAA2B,MAAA,KAAK,EAAE,KAAlC;AAAyC,MAAA,MAAM,EAAE,MAAjD;AAAyD,MAAA,KAAK,EAAE;AAAE,QAAA,QAAQ,EAAE,UAAZ;AAAwB,QAAA,MAAM,EAAG,MAAM,GAAG;AAA1C;AAAhE,KAAA,EACK,MADL,EAEI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAU,MAAA,EAAE,EAAC;AAAb,KAAA,EACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,CAAC,EAAC,GAAR;AAAY,MAAA,CAAC,EAAC,GAAd;AAAkB,MAAA,KAAK,EAAE,UAAU,CAAC,KAApC;AAA2C,MAAA,MAAM,EAAE,UAAU,CAAC;AAA9D,KAAA,CADJ,CADJ,EAIK,WAAW,CACP,GADJ,CACQ,CAAC,IAAD,EAAO,GAAP,KAAe,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAU,MAAA,GAAG,EAAE,GAAf;AAAoB,MAAA,EAAE,EAAE,mBAAmB,IAAI,CAAC,EAAE;AAAlD,KAAA,EAChB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,CAAC,EAAC,GAAR;AAAY,MAAA,CAAC,EAAC,GAAd;AAAkB,MAAA,KAAK,EAAE,IAAI,CAAC,KAA9B;AAAqC,MAAA,MAAM,EAAE,IAAI,CAAC;AAAlD,KAAA,CADgB,CADvB,CAJL,CAFJ,EAWI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,MAAA,SAAS,EAAE,aAAa,MAAM,CAAC,IAAP,GAAc,GAAG,KAAK,MAAM,CAAC,GAAP,GAAa,GAAG;AAAjE,KAAA,EACI,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACT,MAAA,GAAG,EAAE,KAAK,oBADD;AAET,MAAA,uBAAuB,EAAE,WAFhB;AAGT,MAAA,SAAS,EAAE,cAAc,IAAI,WAHpB;AAIT,MAAA,IAAI,EAAE,SAAS,IAAI,WAJV;AAKT,MAAA,GAAG,EAAE,QAAQ,IAAI,WALR;AAMT,MAAA,KAAK,EAAE,UAAU,CAAC,KANT;AAOT,MAAA,MAAM,EAAE,UAAU,CAAC,MAPV;AAQT,MAAA,WAAW,EAAE,WARJ;AAST,MAAA,MAAM,EAAE,MATC;AAUT,MAAA,SAAS,EAAE,SAVF;AAWT,MAAA,KAAK,EAAE,YAXE;AAYT,MAAA,kBAAkB,EAAE,kBAZX;AAaT,MAAA,mBAAmB,EAAE,KAAK,mBAbjB;AAcT,MAAA,aAAa,EAAE,KAAK,iBAdX;AAeT,MAAA,OAAO,EAAE,KAAK,WAfL;AAgBT,MAAA,aAAa,EAAE,KAAK,iBAhBX;AAiBT,MAAA,WAAW,EAAE,KAAK,eAjBT;AAkBT,MAAA,WAAW,EAAE,KAAK,eAlBT;AAmBT,MAAA,YAAY,EAAE,KAAK,gBAnBV;AAoBT,MAAA,YAAY,EAAE,KAAK,gBApBV;AAqBT,MAAA,WAAW,EAAE,KAAK,eArBT;AAsBT,MAAA,MAAM,EAAE,KAAK,UAtBJ;AAuBT,MAAA,cAAc,EAAE,KAAK,aAvBZ;AAwBT,MAAA,MAAM,EAAE,KAAK,UAxBJ;AAyBT,MAAA,WAAW,EAAE,KAAK,eAzBT;AA0BT,MAAA,cAAc,EAAE,KAAK,kBA1BZ;AA2BT,MAAA,KAAK,EAAE,KAAK,SA3BH;AA4BT,MAAA,QAAQ,EAAE,KAAK;AA5BN,KAAb,CADJ,EAgCI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,MAAA,SAAS,EAAC;AAAb,KAAA,EACK,KAAK,KAAL,CAAW,QADhB,CAhCJ,CAXJ,CARJ,CADJ;AA2DH;;AA55B+E;AAElE,WAAA,CAAA,YAAA,GAAe;AACzB,EAAA,MAAM,EAAE;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,KAAK,EAAE,EAAjB;AAAqB,IAAA,MAAM,EAAE,EAA7B;AAAiC,IAAA,IAAI,EAAE;AAAvC,GADiB;AAEzB,EAAA,IAAI,EAAE,QAFmB;AAGzB,EAAA,oBAAoB,EAAE,CAHG;AAIzB,EAAA,uBAAuB,EAAE,IAAI,GAJJ;AAKzB,EAAA,SAAS,EAAE,wBALc;AAMzB,EAAA,MAAM,EAAE,CANiB;AAOzB,EAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,CAPe;AAQzB,EAAA,cAAc,EAAE,QARS;AASzB,EAAA,OAAO,EAAE,CATgB;AAUzB,EAAA,SAAS,EAAE,QAVc;AAWzB,EAAA,UAAU,EAAE,KAXa;AAYzB,EAAA,uBAAuB,EAAE,IAZA;AAazB,EAAA,YAAY,EAAE,IAbW;AAczB,EAAA,UAAU,EAAE,IAda;AAezB,EAAA,QAAQ,EAAE,IAfe;AAgBzB,EAAA,cAAc,EAAE,IAhBS;AAiBzB,EAAA,QAAQ,EAAE,IAjBe;AAkBzB,EAAA,SAAS,EAAE,IAlBc;AAmBzB,EAAA,cAAc,EAAE,GAnBS;AAoBzB,EAAA,KAAK,EAAE,KApBkB;AAqBzB,EAAA,UAAU,EAAE,oBArBa;AAsBzB,EAAA,8BAA8B,EAAE,IAtBP;AAuBzB,EAAA,kBAAkB,EAAE;AAvBK,CAAf;AA0BA,WAAA,CAAA,iBAAA,GAAoB;AAC9B,EAAA,QAAQ,EAAE,SAAS,CAAC,KADU;AAE9B,EAAA,QAAQ,EAAE,SAAS,CAAC,KAFU;AAG9B,EAAA,WAAW,EAAE,SAAS,CAAC,OAAV,CACT,SAAS,CAAC,KAAV,CAAgB;AACZ,IAAA,EAAE,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,EAA0D,UADlD;AAEZ,IAAA,MAAM,EAAE,SAAS,CAAC,OAAV,CAAkB,SAAS,CAAC,MAA5B,EAAoC,UAFhC;AAGZ,IAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,CACzB,SAAS,CAAC,MADe,EAEzB,SAAS,CAAC,KAAV,CAAgB;AACZ,MAAA,GAAG,EAAE,SAAS,CAAC,MADH;AAEZ,MAAA,MAAM,EAAE,SAAS,CAAC;AAFN,KAAhB,CAFyB,CAApB,CAHG;AAUZ,IAAA,QAAQ,EAAE,SAAS,CAAC,OAAV,CAAkB,SAAS,CAAC,IAA5B,CAVE;AAWZ,IAAA,gBAAgB,EAAE,SAAS,CAAC,IAXhB;AAYZ,IAAA,MAAM,EAAE,SAAS,CAAC,IAAV,CAAe,UAZX;AAaZ,IAAA,gBAAgB,EAAE,SAAS,CAAC,KAAV,CAAgB;AAC9B,MAAA,EAAE,EAAE,SAAS,CAAC,MADgB;AAE9B,MAAA,MAAM,EAAE,SAAS,CAAC;AAFY,KAAhB,CAbN;AAiBZ,IAAA,KAAK,EAAE,SAAS,CAAC,MAAV,CAAiB,UAjBZ;AAkBZ,IAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB;AAlBb,GAAhB,CADS,EAqBX,UAxB4B;AAyB9B,EAAA,MAAM,EAAE,SAAS,CAAC,IAAV,CAAe,UAzBO;AA0B9B,EAAA,SAAS,EAAE,SAAS,CAAC,IAAV,CAAe,UA1BI;AA2B9B,EAAA,gBAAgB,EAAE,SAAS,CAAC,IAAV,CAAe,UA3BH;AA4B9B,EAAA,KAAK,EAAE,SAAS,CAAC,MAAV,CAAiB,UA5BM;AA6B9B,EAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB,UA7BK;AA8B9B,EAAA,eAAe,EAAE,SAAS,CAAC,KAAV,CAAgB,CAAC,KAAD,EAAQ,QAAR,CAAhB,EAAmC,UA9BtB;AA+B9B,EAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB,UA/BK;AAgC9B,EAAA,KAAK,EAAE,SAAS,CAAC,MAAV,CAAiB,UAhCM;AAiC9B,EAAA,iBAAiB,EAAE,SAAS,CAAC,IAjCC;AAkC9B,EAAA,SAAS,EAAE,SAAS,CAAC,IAlCS;AAmC9B,EAAA,SAAS,EAAE,SAAS,CAAC,IAnCS;AAoC9B,EAAA,QAAQ,EAAE,SAAS,CAAC,IApCU;AAqC9B,EAAA,MAAM,EAAE,SAAS,CAAC,IArCY;AAsC9B,EAAA,SAAS,EAAE,SAAS,CAAC,IAtCS;AAuC9B,EAAA,WAAW,EAAE,SAAS,CAAC,IAvCO;AAwC9B,EAAA,cAAc,EAAE,SAAS,CAAC,IAxCI;AAyC9B,EAAA,sBAAsB,EAAE,SAAS,CAAC,IAzCJ;AA0C9B,EAAA,eAAe,EAAE,SAAS,CAAC;AA1CG,CAApB;;AA6CA,WAAA,CAAA,KAAA,GAAS,CAAD,KAAQ;AAAE,EAAA,IAAI,EAAE,CAAC,CAAC,IAAV;AAAgB,EAAA,IAAI,EAAE,CAAC,CAAC,IAAxB;AAA8B,EAAA,IAAI,EAAE,CAAC,CAAC,IAAtC;AAA4C,EAAA,GAAG,EAAE,CAAC,CAAC,GAAnD;AAAwD,EAAA,KAAK,EAAE,CAAC,CAAC,KAAjE;AAAwE,EAAA,MAAM,EAAE,CAAC,CAAC;AAAlF,CAAR,CAAR","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { extent as d3Extent, max, min } from \"d3-array\";\nimport * as PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { clearCanvas, functor, head, identity, isDefined, isNotDefined, last, noop, shallowEqual, } from \"./utils\";\nimport { mouseBasedZoomAnchor, } from \"./utils/zoomBehavior\";\nimport { getChartConfigWithUpdatedYScales, getCurrentCharts, getCurrentItem, getNewChartConfig } from \"./utils/ChartDataUtil\";\nimport { EventCapture } from \"./EventCapture\";\nimport { CanvasContainer } from \"./CanvasContainer\";\nimport evaluator from \"./scale/evaluator\";\nconst CANDIDATES_FOR_RESET = [\n    \"seriesName\",\n];\nfunction shouldResetChart(thisProps, nextProps) {\n    return !CANDIDATES_FOR_RESET.every((key) => {\n        const result = shallowEqual(thisProps[key], nextProps[key]);\n        // console.log(key, result);\n        return result;\n    });\n}\nfunction getCursorStyle() {\n    const tooltipStyle = `\n\t.react-financial-charts-grabbing-cursor {\n\t\tpointer-events: all;\n\t\tcursor: -moz-grabbing;\n\t\tcursor: -webkit-grabbing;\n\t\tcursor: grabbing;\n\t}\n\t.react-financial-charts-crosshair-cursor {\n\t\tpointer-events: all;\n\t\tcursor: crosshair;\n\t}\n\t.react-financial-charts-tooltip-hover {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-financial-charts-avoid-interaction {\n\t\tpointer-events: none;\n\t}\n\t.react-financial-charts-enable-interaction {\n\t\tpointer-events: all;\n\t}\n\t.react-financial-charts-tooltip {\n\t\tpointer-events: all;\n\t\tcursor: pointer;\n\t}\n\t.react-financial-charts-default-cursor {\n\t\tcursor: default;\n\t}\n\t.react-financial-charts-move-cursor {\n\t\tcursor: move;\n\t}\n\t.react-financial-charts-pointer-cursor {\n\t\tcursor: pointer;\n\t}\n\t.react-financial-charts-ns-resize-cursor {\n\t\tcursor: ns-resize;\n\t}\n\t.react-financial-charts-ew-resize-cursor {\n\t\tcursor: ew-resize;\n\t}`;\n    return (React.createElement(\"style\", { type: \"text/css\" }, tooltipStyle));\n}\nfunction getDimensions(props) {\n    return {\n        height: props.height - props.margin.top - props.margin.bottom,\n        width: props.width - props.margin.left - props.margin.right,\n    };\n}\nfunction getXScaleDirection(flipXScale) {\n    return flipXScale ? -1 : 1;\n}\nfunction calculateFullData(props) {\n    const { data: fullData, plotFull, xScale, clamp, pointsPerPxThreshold, flipXScale } = props;\n    const { xAccessor, displayXAccessor, minPointsPerPxThreshold } = props;\n    const useWholeData = isDefined(plotFull)\n        ? plotFull\n        : xAccessor === identity;\n    const { filterData } = evaluator({\n        xScale,\n        useWholeData,\n        clamp,\n        pointsPerPxThreshold,\n        minPointsPerPxThreshold,\n        flipXScale,\n    });\n    return {\n        xAccessor,\n        displayXAccessor: displayXAccessor || xAccessor,\n        xScale: xScale.copy(),\n        fullData,\n        filterData,\n    };\n}\nfunction resetChart(props, firstCalculation = false) {\n    const state = calculateState(props);\n    const { xAccessor, displayXAccessor, fullData } = state;\n    const { plotData: initialPlotData, xScale } = state;\n    const { postCalculator, children } = props;\n    const plotData = postCalculator(initialPlotData);\n    const dimensions = getDimensions(props);\n    // @ts-ignore\n    const chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children), { plotData, xAccessor, displayXAccessor, fullData }, xScale.domain());\n    return Object.assign(Object.assign({}, state), { xScale,\n        plotData,\n        chartConfig });\n}\nfunction updateChart(newState, initialXScale, props, lastItemWasVisible, initialChartConfig) {\n    const { fullData, xScale, xAccessor, displayXAccessor, filterData } = newState;\n    const lastItem = last(fullData);\n    const [start, end] = initialXScale.domain();\n    const { postCalculator, children, padding, flipXScale } = props;\n    const { maintainPointsPerPixelOnResize } = props;\n    const direction = getXScaleDirection(flipXScale);\n    const dimensions = getDimensions(props);\n    const updatedXScale = setXRange(xScale, dimensions, padding, direction);\n    // console.log(\"lastItemWasVisible =\", lastItemWasVisible, end, xAccessor(lastItem), end >= xAccessor(lastItem));\n    let initialPlotData;\n    if (!lastItemWasVisible || end >= xAccessor(lastItem)) {\n        // resize comes here...\n        // get plotData between [start, end] and do not change the domain\n        const [rangeStart, rangeEnd] = initialXScale.range();\n        const [newRangeStart, newRangeEnd] = updatedXScale.range();\n        const newDomainExtent = ((newRangeEnd - newRangeStart) / (rangeEnd - rangeStart)) * (end - start);\n        const newStart = maintainPointsPerPixelOnResize\n            ? end - newDomainExtent\n            : start;\n        const lastItemX = initialXScale(xAccessor(lastItem));\n        // console.log(\"pointsPerPixel => \", newStart, start, end, updatedXScale(end));\n        const response = filterData(fullData, [newStart, end], xAccessor, updatedXScale, { fallbackStart: start, fallbackEnd: { lastItem, lastItemX } });\n        initialPlotData = response.plotData;\n        updatedXScale.domain(response.domain);\n        // console.log(\"HERE!!!!!\", start, end);\n    }\n    else if (lastItemWasVisible\n        && end < xAccessor(lastItem)) {\n        // this is when a new item is added and last item was visible\n        // so slide over and show the new item also\n        // get plotData between [xAccessor(l) - (end - start), xAccessor(l)] and DO change the domain\n        const dx = initialXScale(xAccessor(lastItem)) - initialXScale.range()[1];\n        const [newStart, newEnd] = initialXScale.range().map((x) => x + dx).map(initialXScale.invert);\n        const response = filterData(fullData, [newStart, newEnd], xAccessor, updatedXScale);\n        initialPlotData = response.plotData;\n        updatedXScale.domain(response.domain); // if last item was visible, then shift\n    }\n    // plotData = getDataOfLength(fullData, showingInterval, plotData.length)\n    const plotData = postCalculator(initialPlotData);\n    // @ts-ignore\n    const chartConfig = getChartConfigWithUpdatedYScales(getNewChartConfig(dimensions, children, initialChartConfig), { plotData, xAccessor, displayXAccessor, fullData }, updatedXScale.domain());\n    return {\n        xScale: updatedXScale,\n        xAccessor,\n        chartConfig,\n        plotData,\n        fullData,\n        filterData,\n    };\n}\nfunction calculateState(props) {\n    const { xAccessor: inputXAccesor, xExtents: xExtentsProp, data, padding, flipXScale, } = props;\n    if (process.env.NODE_ENV !== \"production\" && isDefined(props.xScale.invert)) {\n        for (let i = 1; i < data.length; i++) {\n            const prev = data[i - 1];\n            const curr = data[i];\n            if (inputXAccesor(prev) > inputXAccesor(curr)) {\n                throw new Error(\"'data' is not sorted on 'xAccessor', send 'data' sorted in ascending order of 'xAccessor'\");\n            }\n        }\n    }\n    const direction = getXScaleDirection(flipXScale);\n    const dimensions = getDimensions(props);\n    const extent = typeof xExtentsProp === \"function\"\n        ? xExtentsProp(data)\n        : d3Extent(xExtentsProp.map((d) => functor(d)).map((each) => each(data, inputXAccesor)));\n    const { xAccessor, displayXAccessor, xScale, fullData, filterData } = calculateFullData(props);\n    const updatedXScale = setXRange(xScale, dimensions, padding, direction);\n    const { plotData, domain } = filterData(fullData, extent, inputXAccesor, updatedXScale);\n    if (process.env.NODE_ENV !== \"production\" && plotData.length <= 1) {\n        throw new Error(`Showing ${plotData.length} datapoints, review the 'xExtents' prop of ChartCanvas`);\n    }\n    return {\n        plotData,\n        xScale: updatedXScale.domain(domain),\n        xAccessor,\n        displayXAccessor,\n        fullData,\n        filterData,\n    };\n}\nfunction setXRange(xScale, dimensions, padding, direction = 1) {\n    if (xScale.rangeRoundPoints) {\n        if (isNaN(padding)) {\n            throw new Error(\"padding has to be a number for ordinal scale\");\n        }\n        xScale.rangeRoundPoints([0, dimensions.width], padding);\n    }\n    else if (xScale.padding) {\n        if (isNaN(padding)) {\n            throw new Error(\"padding has to be a number for ordinal scale\");\n        }\n        xScale.range([0, dimensions.width]);\n        xScale.padding(padding / 2);\n    }\n    else {\n        const { left, right } = isNaN(padding)\n            ? padding\n            : { left: padding, right: padding };\n        if (direction > 0) {\n            xScale.range([left, dimensions.width - right]);\n        }\n        else {\n            xScale.range([dimensions.width - right, left]);\n        }\n    }\n    return xScale;\n}\nfunction pinchCoordinates(pinch) {\n    const { touch1Pos, touch2Pos } = pinch;\n    return {\n        topLeft: [Math.min(touch1Pos[0], touch2Pos[0]), Math.min(touch1Pos[1], touch2Pos[1])],\n        bottomRight: [Math.max(touch1Pos[0], touch2Pos[0]), Math.max(touch1Pos[1], touch2Pos[1])],\n    };\n}\nfunction isInteractionEnabled(xScale, xAccessor, data) {\n    const interaction = !isNaN(xScale(xAccessor(head(data)))) && isDefined(xScale.invert);\n    return interaction;\n}\nexport class ChartCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getDataInfo = this.getDataInfo.bind(this);\n        this.getCanvasContexts = this.getCanvasContexts.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n        this.handleZoom = this.handleZoom.bind(this);\n        this.handlePinchZoom = this.handlePinchZoom.bind(this);\n        this.handlePinchZoomEnd = this.handlePinchZoomEnd.bind(this);\n        this.handlePan = this.handlePan.bind(this);\n        this.handlePanEnd = this.handlePanEnd.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.handleDragStart = this.handleDragStart.bind(this);\n        this.handleDrag = this.handleDrag.bind(this);\n        this.handleDragEnd = this.handleDragEnd.bind(this);\n        this.panHelper = this.panHelper.bind(this);\n        this.pinchZoomHelper = this.pinchZoomHelper.bind(this);\n        this.xAxisZoom = this.xAxisZoom.bind(this);\n        this.yAxisZoom = this.yAxisZoom.bind(this);\n        this.resetYDomain = this.resetYDomain.bind(this);\n        this.calculateStateForDomain = this.calculateStateForDomain.bind(this);\n        this.generateSubscriptionId = this.generateSubscriptionId.bind(this);\n        this.draw = this.draw.bind(this);\n        this.redraw = this.redraw.bind(this);\n        this.getAllPanConditions = this.getAllPanConditions.bind(this);\n        this.subscriptions = [];\n        this.subscribe = this.subscribe.bind(this);\n        this.unsubscribe = this.unsubscribe.bind(this);\n        this.amIOnTop = this.amIOnTop.bind(this);\n        this.saveEventCaptureNode = this.saveEventCaptureNode.bind(this);\n        this.saveCanvasContainerNode = this.saveCanvasContainerNode.bind(this);\n        this.setCursorClass = this.setCursorClass.bind(this);\n        this.getMutableState = this.getMutableState.bind(this);\n        this.panInProgress = false;\n        this.state = {};\n        this.mutableState = {};\n        this.lastSubscriptionId = 0;\n        const _a = resetChart(props, true), { fullData } = _a, state = __rest(_a, [\"fullData\"]);\n        this.state = state;\n        this.fullData = fullData;\n    }\n    saveEventCaptureNode(node) {\n        this.eventCaptureNode = node;\n    }\n    saveCanvasContainerNode(node) {\n        this.canvasContainerNode = node;\n    }\n    getMutableState() {\n        return this.mutableState;\n    }\n    getDataInfo() {\n        return Object.assign(Object.assign({}, this.state), { fullData: this.fullData });\n    }\n    getCanvasContexts() {\n        if (this.canvasContainerNode) {\n            return this.canvasContainerNode.getCanvasContexts();\n        }\n    }\n    generateSubscriptionId() {\n        this.lastSubscriptionId++;\n        return this.lastSubscriptionId;\n    }\n    clearBothCanvas() {\n        const canvases = this.getCanvasContexts();\n        if (canvases && canvases.axes) {\n            clearCanvas([\n                canvases.axes,\n                canvases.mouseCoord,\n            ], this.props.ratio);\n        }\n    }\n    clearMouseCanvas() {\n        const canvases = this.getCanvasContexts();\n        if (canvases && canvases.mouseCoord) {\n            clearCanvas([\n                canvases.mouseCoord,\n            ], this.props.ratio);\n        }\n    }\n    clearThreeCanvas() {\n        const canvases = this.getCanvasContexts();\n        if (canvases && canvases.axes) {\n            clearCanvas([\n                canvases.axes,\n                canvases.mouseCoord,\n                canvases.bg,\n            ], this.props.ratio);\n        }\n    }\n    subscribe(id, rest) {\n        const { getPanConditions = functor({\n            draggable: false,\n            panEnabled: true,\n        }) } = rest;\n        this.subscriptions = this.subscriptions.concat(Object.assign(Object.assign({ id }, rest), { getPanConditions }));\n    }\n    unsubscribe(id) {\n        this.subscriptions = this.subscriptions.filter((each) => each.id !== id);\n    }\n    getAllPanConditions() {\n        return this.subscriptions\n            .map((each) => each.getPanConditions());\n    }\n    setCursorClass(className) {\n        if (this.eventCaptureNode != null) {\n            this.eventCaptureNode.setCursorClass(className);\n        }\n    }\n    amIOnTop(id) {\n        const dragableComponents = this.subscriptions\n            .filter((each) => each.getPanConditions().draggable);\n        return dragableComponents.length > 0\n            && last(dragableComponents).id === id;\n    }\n    handleContextMenu(mouseXY, e) {\n        const { xAccessor, chartConfig, plotData, xScale } = this.state;\n        const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n        this.triggerEvent(\"contextmenu\", {\n            mouseXY,\n            currentItem,\n            currentCharts,\n        }, e);\n    }\n    calculateStateForDomain(newDomain) {\n        const { xAccessor, displayXAccessor, xScale: initialXScale, chartConfig: initialChartConfig, plotData: initialPlotData, } = this.state;\n        const { filterData } = this.state;\n        const { fullData } = this;\n        const { postCalculator } = this.props;\n        const { plotData: beforePlotData, domain } = filterData(fullData, newDomain, xAccessor, initialXScale, {\n            currentPlotData: initialPlotData,\n            currentDomain: initialXScale.domain(),\n        });\n        const plotData = postCalculator(beforePlotData);\n        const updatedScale = initialXScale.copy().domain(domain);\n        // @ts-ignore\n        const chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, { plotData, xAccessor, displayXAccessor, fullData }, updatedScale.domain());\n        return {\n            xScale: updatedScale,\n            plotData,\n            chartConfig,\n        };\n    }\n    pinchZoomHelper(initialPinch, finalPinch) {\n        const { xScale: initialPinchXScale } = initialPinch;\n        const { xScale: initialXScale, chartConfig: initialChartConfig, plotData: initialPlotData, xAccessor, displayXAccessor, } = this.state;\n        const { filterData } = this.state;\n        const { fullData } = this;\n        const { postCalculator } = this.props;\n        const { topLeft: iTL, bottomRight: iBR } = pinchCoordinates(initialPinch);\n        const { topLeft: fTL, bottomRight: fBR } = pinchCoordinates(finalPinch);\n        const e = initialPinchXScale.range()[1];\n        const xDash = Math.round(-(iBR[0] * fTL[0] - iTL[0] * fBR[0]) / (iTL[0] - iBR[0]));\n        const yDash = Math.round(e + ((e - iBR[0]) * (e - fTL[0]) - (e - iTL[0]) * (e - fBR[0])) / ((e - iTL[0]) - (e - iBR[0])));\n        const x = Math.round(-xDash * iTL[0] / (-xDash + fTL[0]));\n        const y = Math.round(e - (yDash - e) * (e - iTL[0]) / (yDash + (e - fTL[0])));\n        const newDomain = [x, y].map(initialPinchXScale.invert);\n        // var domainR = initial.right + right;\n        const { plotData: beforePlotData, domain } = filterData(fullData, newDomain, xAccessor, initialPinchXScale, {\n            currentPlotData: initialPlotData,\n            currentDomain: initialXScale.domain(),\n        });\n        const plotData = postCalculator(beforePlotData);\n        const updatedScale = initialXScale.copy().domain(domain);\n        const mouseXY = finalPinch.touch1Pos;\n        // @ts-ignore\n        const chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, { plotData, xAccessor, displayXAccessor, fullData }, updatedScale.domain());\n        const currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n        return {\n            chartConfig,\n            xScale: updatedScale,\n            plotData,\n            mouseXY,\n            currentItem,\n        };\n    }\n    cancelDrag() {\n        this.eventCaptureNode.cancelDrag();\n        this.triggerEvent(\"dragcancel\");\n    }\n    handlePinchZoom(initialPinch, finalPinch, e) {\n        if (!this.waitingForPinchZoomAnimationFrame) {\n            this.waitingForPinchZoomAnimationFrame = true;\n            const state = this.pinchZoomHelper(initialPinch, finalPinch);\n            this.triggerEvent(\"pinchzoom\", state, e);\n            this.finalPinch = finalPinch;\n            requestAnimationFrame(() => {\n                this.clearBothCanvas();\n                this.draw({ trigger: \"pinchzoom\" });\n                this.waitingForPinchZoomAnimationFrame = false;\n            });\n        }\n    }\n    handlePinchZoomEnd(initialPinch, e) {\n        const { xAccessor } = this.state;\n        if (this.finalPinch) {\n            const state = this.pinchZoomHelper(initialPinch, this.finalPinch);\n            const { xScale } = state;\n            this.triggerEvent(\"pinchzoom\", state, e);\n            this.finalPinch = undefined;\n            this.clearThreeCanvas();\n            const { fullData } = this;\n            const firstItem = head(fullData);\n            const start = head(xScale.domain());\n            const end = xAccessor(firstItem);\n            const { onLoadMore } = this.props;\n            this.setState(state, () => {\n                if (start < end) {\n                    onLoadMore(start, end);\n                }\n            });\n        }\n    }\n    handleZoom(zoomDirection, mouseXY, e) {\n        if (this.panInProgress) {\n            return;\n        }\n        const { xAccessor, xScale: initialXScale, plotData: initialPlotData } = this.state;\n        const { zoomMultiplier = ChartCanvas.defaultProps.zoomMultiplier, zoomAnchor, } = this.props;\n        const { fullData } = this;\n        const item = zoomAnchor({\n            xScale: initialXScale,\n            xAccessor,\n            mouseXY,\n            plotData: initialPlotData,\n            fullData,\n        });\n        const cx = initialXScale(item);\n        const c = zoomDirection > 0 ? 1 * zoomMultiplier : 1 / zoomMultiplier;\n        const newDomain = initialXScale.range().map((x) => cx + (x - cx) * c).map(initialXScale.invert);\n        const { xScale, plotData, chartConfig } = this.calculateStateForDomain(newDomain);\n        const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n        const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        this.clearThreeCanvas();\n        const firstItem = head(fullData);\n        const start = head(xScale.domain());\n        const end = xAccessor(firstItem);\n        const { onLoadMore } = this.props;\n        this.mutableState = {\n            mouseXY,\n            currentItem,\n            currentCharts,\n        };\n        this.triggerEvent(\"zoom\", {\n            xScale,\n            plotData,\n            chartConfig,\n            mouseXY,\n            currentCharts,\n            currentItem,\n            show: true,\n        }, e);\n        this.setState({\n            xScale,\n            plotData,\n            chartConfig,\n        }, () => {\n            if (start < end) {\n                onLoadMore(start, end);\n            }\n        });\n    }\n    xAxisZoom(newDomain) {\n        const { xScale, plotData, chartConfig } = this.calculateStateForDomain(newDomain);\n        this.clearThreeCanvas();\n        const { xAccessor } = this.state;\n        const { fullData } = this;\n        const firstItem = head(fullData);\n        const start = head(xScale.domain());\n        const end = xAccessor(firstItem);\n        const { onLoadMore } = this.props;\n        this.setState({\n            xScale,\n            plotData,\n            chartConfig,\n        }, () => {\n            if (start < end) {\n                onLoadMore(start, end);\n            }\n        });\n    }\n    yAxisZoom(chartId, newDomain) {\n        this.clearThreeCanvas();\n        const { chartConfig: initialChartConfig } = this.state;\n        const chartConfig = initialChartConfig\n            .map((each) => {\n            if (each.id === chartId) {\n                const { yScale } = each;\n                return Object.assign(Object.assign({}, each), { yScale: yScale.copy().domain(newDomain), yPanEnabled: true });\n            }\n            else {\n                return each;\n            }\n        });\n        this.setState({\n            chartConfig,\n        });\n    }\n    triggerEvent(type, props, e) {\n        this.subscriptions.forEach((each) => {\n            const state = Object.assign(Object.assign({}, this.state), { fullData: this.fullData, subscriptions: this.subscriptions });\n            each.listener(type, props, state, e);\n        });\n    }\n    draw(props) {\n        this.subscriptions.forEach((each) => {\n            if (isDefined(each.draw)) {\n                each.draw(props);\n            }\n        });\n    }\n    redraw() {\n        this.clearThreeCanvas();\n        this.draw({ force: true });\n    }\n    panHelper(mouseXY, initialXScale, { dx, dy }, chartsToPan) {\n        const { xAccessor, displayXAccessor, chartConfig: initialChartConfig } = this.state;\n        const { filterData } = this.state;\n        const { fullData } = this;\n        const { postCalculator } = this.props;\n        if (isNotDefined(initialXScale.invert)) {\n            throw new Error(\"xScale provided does not have an invert() method.\"\n                + \"You are likely using an ordinal scale. This scale does not support zoom, pan\");\n        }\n        const newDomain = initialXScale.range().map((x) => x - dx).map(initialXScale.invert);\n        const { plotData: beforePlotData, domain } = filterData(fullData, newDomain, xAccessor, initialXScale, {\n            currentPlotData: this.hackyWayToStopPanBeyondBounds__plotData,\n            currentDomain: this.hackyWayToStopPanBeyondBounds__domain,\n        });\n        const updatedScale = initialXScale.copy().domain(domain);\n        const plotData = postCalculator(beforePlotData);\n        const currentItem = getCurrentItem(updatedScale, xAccessor, mouseXY, plotData);\n        const chartConfig = getChartConfigWithUpdatedYScales(initialChartConfig, { plotData, xAccessor, displayXAccessor, fullData }, updatedScale.domain(), dy, chartsToPan);\n        const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        return {\n            xScale: updatedScale,\n            plotData,\n            chartConfig,\n            mouseXY,\n            currentCharts,\n            currentItem,\n        };\n    }\n    handlePan(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n        if (!this.waitingForPanAnimationFrame) {\n            this.waitingForPanAnimationFrame = true;\n            this.hackyWayToStopPanBeyondBounds__plotData = this.hackyWayToStopPanBeyondBounds__plotData || this.state.plotData;\n            this.hackyWayToStopPanBeyondBounds__domain = this.hackyWayToStopPanBeyondBounds__domain || this.state.xScale.domain();\n            const state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n            this.hackyWayToStopPanBeyondBounds__plotData = state.plotData;\n            this.hackyWayToStopPanBeyondBounds__domain = state.xScale.domain();\n            this.panInProgress = true;\n            this.triggerEvent(\"pan\", state, e);\n            this.mutableState = {\n                mouseXY: state.mouseXY,\n                currentItem: state.currentItem,\n                currentCharts: state.currentCharts,\n            };\n            requestAnimationFrame(() => {\n                this.waitingForPanAnimationFrame = false;\n                this.clearBothCanvas();\n                this.draw({ trigger: \"pan\" });\n            });\n        }\n    }\n    handlePanEnd(mousePosition, panStartXScale, dxdy, chartsToPan, e) {\n        const state = this.panHelper(mousePosition, panStartXScale, dxdy, chartsToPan);\n        this.hackyWayToStopPanBeyondBounds__plotData = null;\n        this.hackyWayToStopPanBeyondBounds__domain = null;\n        this.panInProgress = false;\n        const { xScale, plotData, chartConfig, } = state;\n        this.triggerEvent(\"panend\", state, e);\n        requestAnimationFrame(() => {\n            const { xAccessor } = this.state;\n            const { fullData } = this;\n            const firstItem = head(fullData);\n            const start = head(xScale.domain());\n            const end = xAccessor(firstItem);\n            const { onLoadMore } = this.props;\n            this.clearThreeCanvas();\n            this.setState({\n                xScale,\n                plotData,\n                chartConfig,\n            }, () => {\n                if (start < end) {\n                    onLoadMore(start, end);\n                }\n            });\n        });\n    }\n    handleMouseDown(mousePosition, currentCharts, e) {\n        this.triggerEvent(\"mousedown\", this.mutableState, e);\n    }\n    handleMouseEnter(e) {\n        this.triggerEvent(\"mouseenter\", {\n            show: true,\n        }, e);\n    }\n    handleMouseMove(mouseXY, inputType, e) {\n        if (!this.waitingForMouseMoveAnimationFrame) {\n            this.waitingForMouseMoveAnimationFrame = true;\n            const { chartConfig, plotData, xScale, xAccessor } = this.state;\n            const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n            const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n            this.triggerEvent(\"mousemove\", {\n                show: true,\n                mouseXY,\n                // prevMouseXY is used in interactive components\n                prevMouseXY: this.prevMouseXY,\n                currentItem,\n                currentCharts,\n            }, e);\n            this.prevMouseXY = mouseXY;\n            this.mutableState = {\n                mouseXY,\n                currentItem,\n                currentCharts,\n            };\n            requestAnimationFrame(() => {\n                this.clearMouseCanvas();\n                this.draw({ trigger: \"mousemove\" });\n                this.waitingForMouseMoveAnimationFrame = false;\n            });\n        }\n    }\n    handleMouseLeave(e) {\n        this.triggerEvent(\"mouseleave\", { show: false }, e);\n        this.clearMouseCanvas();\n        this.draw({ trigger: \"mouseleave\" });\n    }\n    handleDragStart({ startPos }, e) {\n        this.triggerEvent(\"dragstart\", { startPos }, e);\n    }\n    handleDrag({ startPos, mouseXY }, e) {\n        const { chartConfig, plotData, xScale, xAccessor } = this.state;\n        const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n        this.triggerEvent(\"drag\", {\n            startPos,\n            mouseXY,\n            currentItem,\n            currentCharts,\n        }, e);\n        this.mutableState = {\n            mouseXY,\n            currentItem,\n            currentCharts,\n        };\n        requestAnimationFrame(() => {\n            this.clearMouseCanvas();\n            this.draw({ trigger: \"drag\" });\n        });\n    }\n    handleDragEnd({ mouseXY }, e) {\n        this.triggerEvent(\"dragend\", { mouseXY }, e);\n        requestAnimationFrame(() => {\n            this.clearMouseCanvas();\n            this.draw({ trigger: \"dragend\" });\n        });\n    }\n    handleClick(mousePosition, e) {\n        this.triggerEvent(\"click\", this.mutableState, e);\n        requestAnimationFrame(() => {\n            this.clearMouseCanvas();\n            this.draw({ trigger: \"click\" });\n        });\n    }\n    handleDoubleClick(mousePosition, e) {\n        this.triggerEvent(\"dblclick\", {}, e);\n    }\n    getChildContext() {\n        const dimensions = getDimensions(this.props);\n        return {\n            fullData: this.fullData,\n            plotData: this.state.plotData,\n            width: dimensions.width,\n            height: dimensions.height,\n            chartConfig: this.state.chartConfig,\n            xScale: this.state.xScale,\n            xAccessor: this.state.xAccessor,\n            displayXAccessor: this.state.displayXAccessor,\n            chartCanvasType: this.props.type,\n            margin: this.props.margin,\n            ratio: this.props.ratio,\n            xAxisZoom: this.xAxisZoom,\n            yAxisZoom: this.yAxisZoom,\n            getCanvasContexts: this.getCanvasContexts,\n            redraw: this.redraw,\n            subscribe: this.subscribe,\n            unsubscribe: this.unsubscribe,\n            generateSubscriptionId: this.generateSubscriptionId,\n            getMutableState: this.getMutableState,\n            amIOnTop: this.amIOnTop,\n            setCursorClass: this.setCursorClass,\n        };\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        const reset = shouldResetChart(this.props, nextProps);\n        const interaction = isInteractionEnabled(this.state.xScale, this.state.xAccessor, this.state.plotData);\n        const { chartConfig: initialChartConfig } = this.state;\n        let newState;\n        if (!interaction || reset || !shallowEqual(this.props.xExtents, nextProps.xExtents)) {\n            // do reset\n            newState = resetChart(nextProps);\n            this.mutableState = {};\n        }\n        else {\n            const [start, end] = this.state.xScale.domain();\n            const prevLastItem = last(this.fullData);\n            const calculatedState = calculateFullData(nextProps);\n            const { xAccessor } = calculatedState;\n            const lastItemWasVisible = xAccessor(prevLastItem) <= end && xAccessor(prevLastItem) >= start;\n            newState = updateChart(calculatedState, this.state.xScale, nextProps, lastItemWasVisible, initialChartConfig);\n        }\n        const { fullData } = newState, state = __rest(newState, [\"fullData\"]);\n        if (!this.panInProgress) {\n            this.clearThreeCanvas();\n            this.setState(state);\n        }\n        this.fullData = fullData;\n    }\n    resetYDomain(chartId) {\n        const { chartConfig } = this.state;\n        let changed = false;\n        const newChartConfig = chartConfig\n            .map((each) => {\n            if ((isNotDefined(chartId) || each.id === chartId)\n                && !shallowEqual(each.yScale.domain(), each.realYDomain)) {\n                changed = true;\n                return Object.assign(Object.assign({}, each), { yScale: each.yScale.domain(each.realYDomain), yPanEnabled: false });\n            }\n            return each;\n        });\n        if (changed) {\n            this.clearThreeCanvas();\n            this.setState({\n                chartConfig: newChartConfig,\n            });\n        }\n    }\n    shouldComponentUpdate() {\n        return !this.panInProgress;\n    }\n    render() {\n        const { type = ChartCanvas.defaultProps.type, useCrossHairStyleCursor, onSelect, height, width, margin = ChartCanvas.defaultProps.margin, className, zIndex = ChartCanvas.defaultProps.zIndex, defaultFocus, ratio, mouseMoveEvent, panEvent, zoomEvent, disableInteraction, } = this.props;\n        const { plotData, xScale, xAccessor, chartConfig } = this.state;\n        const dimensions = getDimensions(this.props);\n        const interaction = isInteractionEnabled(xScale, xAccessor, plotData);\n        const cursorStyle = useCrossHairStyleCursor && interaction;\n        const cursor = getCursorStyle();\n        return (React.createElement(\"div\", { style: { position: \"relative\", width, height }, className: className, onClick: onSelect },\n            React.createElement(CanvasContainer, { ref: this.saveCanvasContainerNode, type: type, ratio: ratio, width: width, height: height, zIndex: zIndex }),\n            React.createElement(\"svg\", { className: className, width: width, height: height, style: { position: \"absolute\", zIndex: (zIndex + 5) } },\n                cursor,\n                React.createElement(\"defs\", null,\n                    React.createElement(\"clipPath\", { id: \"chart-area-clip\" },\n                        React.createElement(\"rect\", { x: \"0\", y: \"0\", width: dimensions.width, height: dimensions.height })),\n                    chartConfig\n                        .map((each, idx) => React.createElement(\"clipPath\", { key: idx, id: `chart-area-clip-${each.id}` },\n                        React.createElement(\"rect\", { x: \"0\", y: \"0\", width: each.width, height: each.height })))),\n                React.createElement(\"g\", { transform: `translate(${margin.left + 0.5}, ${margin.top + 0.5})` },\n                    React.createElement(EventCapture, { ref: this.saveEventCaptureNode, useCrossHairStyleCursor: cursorStyle, mouseMove: mouseMoveEvent && interaction, zoom: zoomEvent && interaction, pan: panEvent && interaction, width: dimensions.width, height: dimensions.height, chartConfig: chartConfig, xScale: xScale, xAccessor: xAccessor, focus: defaultFocus, disableInteraction: disableInteraction, getAllPanConditions: this.getAllPanConditions, onContextMenu: this.handleContextMenu, onClick: this.handleClick, onDoubleClick: this.handleDoubleClick, onMouseDown: this.handleMouseDown, onMouseMove: this.handleMouseMove, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave, onDragStart: this.handleDragStart, onDrag: this.handleDrag, onDragComplete: this.handleDragEnd, onZoom: this.handleZoom, onPinchZoom: this.handlePinchZoom, onPinchZoomEnd: this.handlePinchZoomEnd, onPan: this.handlePan, onPanEnd: this.handlePanEnd }),\n                    React.createElement(\"g\", { className: \"react-financial-charts-avoid-interaction\" }, this.props.children)))));\n    }\n}\nChartCanvas.defaultProps = {\n    margin: { top: 0, right: 40, bottom: 40, left: 0 },\n    type: \"hybrid\",\n    pointsPerPxThreshold: 2,\n    minPointsPerPxThreshold: 1 / 100,\n    className: \"react-financial-charts\",\n    zIndex: 1,\n    xExtents: [min, max],\n    postCalculator: identity,\n    padding: 0,\n    xAccessor: identity,\n    flipXScale: false,\n    useCrossHairStyleCursor: true,\n    defaultFocus: true,\n    onLoadMore: noop,\n    onSelect: noop,\n    mouseMoveEvent: true,\n    panEvent: true,\n    zoomEvent: true,\n    zoomMultiplier: 1.1,\n    clamp: false,\n    zoomAnchor: mouseBasedZoomAnchor,\n    maintainPointsPerPixelOnResize: true,\n    disableInteraction: false,\n};\nChartCanvas.childContextTypes = {\n    plotData: PropTypes.array,\n    fullData: PropTypes.array,\n    chartConfig: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n        origin: PropTypes.arrayOf(PropTypes.number).isRequired,\n        padding: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.shape({\n                top: PropTypes.number,\n                bottom: PropTypes.number,\n            }),\n        ]),\n        yExtents: PropTypes.arrayOf(PropTypes.func),\n        yExtentsProvider: PropTypes.func,\n        yScale: PropTypes.func.isRequired,\n        mouseCoordinates: PropTypes.shape({\n            at: PropTypes.string,\n            format: PropTypes.func,\n        }),\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n    })).isRequired,\n    xScale: PropTypes.func.isRequired,\n    xAccessor: PropTypes.func.isRequired,\n    displayXAccessor: PropTypes.func.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    chartCanvasType: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n    margin: PropTypes.object.isRequired,\n    ratio: PropTypes.number.isRequired,\n    getCanvasContexts: PropTypes.func,\n    xAxisZoom: PropTypes.func,\n    yAxisZoom: PropTypes.func,\n    amIOnTop: PropTypes.func,\n    redraw: PropTypes.func,\n    subscribe: PropTypes.func,\n    unsubscribe: PropTypes.func,\n    setCursorClass: PropTypes.func,\n    generateSubscriptionId: PropTypes.func,\n    getMutableState: PropTypes.func,\n};\nChartCanvas.ohlcv = (d) => ({ date: d.date, open: d.open, high: d.high, low: d.low, close: d.close, volume: d.volume });\n//# sourceMappingURL=ChartCanvas.js.map"]},"metadata":{},"sourceType":"module"}