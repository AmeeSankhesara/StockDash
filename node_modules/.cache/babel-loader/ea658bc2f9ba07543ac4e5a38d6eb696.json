{"ast":null,"code":"var _jsxFileName = \"/Users/ameesankhesara/Desktop/CourseWork/Spring-2020/StockDash/src/SearchBar.js\";\nimport React, { Component } from \"react\";\nimport \"./SearchBar.css\";\nimport { loadLatestQuote, getCompanyProfile, logo, symbols_company, sector_perf, getFullHistoricalData } from \"./RestApiCalls\";\nimport constructLatestQuote from \"./ConstructLatestQuote\";\nimport LoadLatestQuote from \"./LoadLatestQuote\";\nimport LoadCompanyProfile from \"./LoadCompanyProfile\";\nimport SectorPerformance from \"./SectorPerformance\";\nimport StockChartBar from \"./StockChartBar\";\nimport LoadStockTable from \"./LoadStockTable\"; //Search Bar (AutoComplete Textbox) with all results.\n\nclass SearchBar extends Component {\n  constructor(property) {\n    super(property);\n\n    this.onCompanyNameChange = e => {\n      const value = e.target.value;\n\n      if (value.length === 0) {\n        this.setState({\n          text: ''\n        });\n        this.setState({\n          suggestions: []\n        });\n        this.setState({\n          companyName: ''\n        }, this.getStock_MainFunction);\n      }\n\n      let suggest = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(`^${value}`, 'i');\n        suggest = this.state.companyNamesFromJSON.sort().filter(v => regex.test(v));\n      }\n\n      this.setState({\n        suggestions: suggest,\n        text: value\n      });\n    };\n\n    this.state = {\n      suggestions: [],\n      text: '',\n      companyNamesFromJSON: [],\n      company_symbol_json: [],\n      latestQuote: null,\n      companyName: \"\",\n      logo_img: null,\n      quote: null,\n      companyprofile: null,\n      sector_data: null,\n      stockPrice: [],\n      series: [{\n        data: []\n      }]\n    };\n    this.symbol = {\n      value: \"\"\n    };\n    this.getStock_MainFunction = this.getStock_MainFunction.bind(this);\n    this.onCompanyNameChange = this.onCompanyNameChange.bind(this);\n    this.calculateSuggestions = this.calculateSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.getCompanyNamesForSuggestion = this.getCompanyNamesForSuggestion.bind(this);\n  } //On Detecting change in textbox value, populate the company name suggestions\n  //If text is empty, reset the states.\n\n\n  //On selecting the company name from the drop down, call the main function: Get Stock\n  suggestionsSelected(value) {\n    this.setState({\n      text: value\n    });\n    this.setState({\n      suggestions: []\n    });\n    this.setState({\n      companyName: value\n    }, this.getStock_MainFunction);\n  } //Renders company name suggestions in a list\n\n\n  calculateSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    var i = 0;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      role: \"list\",\n      className: \"list-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, suggestions.map(item => /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listitem\",\n      className: \"list-item\",\n      key: i++,\n      onClick: () => this.suggestionsSelected(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 40\n      }\n    }, item)));\n  } //Given the company name, find the symbol to use in subsequent requests\n\n\n  getSymbolFromCompanyName(companyName) {\n    for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n      if (this.state.company_symbol_json[i].name.toLowerCase().includes(companyName.toLowerCase())) {\n        this.symbol.value = this.state.company_symbol_json[i].symbol;\n        return;\n      }\n    }\n  } //Main Function: Get response from all APIS: Latest Quote, Company Profile, Logo\n\n\n  getStock_MainFunction() {\n    if (this.state.companyName === undefined || this.state.companyName.length === 0) {\n      this.setState({\n        latestQuote: null\n      });\n      this.setState({\n        logo_img: null\n      });\n      this.setState({\n        quote: null\n      });\n      this.setState({\n        companyprofile: null\n      });\n      this.setState({\n        stockPrice: null\n      });\n    } else {\n      this.getSymbolFromCompanyName(this.state.companyName);\n      Promise.all([loadLatestQuote(this.symbol.value), getCompanyProfile(this.symbol.value), logo(this.symbol.value), getFullHistoricalData(this.symbol.value)]).then(values => {\n        let quote_data = values[0];\n        this.setState({\n          latestQuote: constructLatestQuote(quote_data)\n        });\n        this.setState({\n          logo_img: values[2]\n        });\n        let quote_temp = { ...this.state.latestQuote,\n          logo_img: this.state.logo_img\n        };\n        this.setState({\n          quote: quote_temp\n        });\n        this.setState({\n          companyprofile: values[1]['profile']\n        });\n        this.setState({\n          stockPrice: values[3]['historical']\n        });\n        this.setState({\n          stockPrice: values[3]\n        });\n        var stockdata = [];\n        values[3]['historical'].map(item => {\n          var stockdataArr = [];\n          stockdataArr.push(item.date, item.open, item.high, item.low, item.close);\n          stockdata.push(stockdataArr);\n        });\n        this.setState({\n          series: [{\n            data: stockdata\n          }]\n        });\n      });\n    }\n  } //Populate all the company Names to use for suggestions later\n\n\n  getCompanyNamesForSuggestion() {\n    var data = [];\n\n    for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n      if (this.state.company_symbol_json[i].name.length !== 0) {\n        data.push(this.state.company_symbol_json[i].name);\n      }\n    }\n\n    this.setState({\n      companyNamesFromJSON: data\n    });\n  } //Executed on load: Symbols and Company mapping data, Sector Performance\n\n\n  async componentDidMount() {\n    Promise.all([symbols_company(), sector_perf()]).then(values => {\n      this.setState({\n        company_symbol_json: values[0]\n      }, this.getCompanyNamesForSuggestion);\n      let data_temp = {};\n      data_temp = {\n        basicMaterials: values[1]['sectorPerformance'][0].changesPercentage,\n        CommunicationServices: values[1]['sectorPerformance'][1].changesPercentage,\n        Conglomerates: values[1]['sectorPerformance'][2].changesPercentage,\n        ConsumerCyclical: values[1]['sectorPerformance'][3].changesPercentage,\n        ConsumerDefensive: values[1]['sectorPerformance'][4].changesPercentage,\n        Energy: values[1]['sectorPerformance'][5].changesPercentage,\n        Financial: values[1]['sectorPerformance'][6].changesPercentage,\n        FinancialServices: values[1]['sectorPerformance'][7].changesPercentage,\n        Healthcare: values[1]['sectorPerformance'][8].changesPercentage,\n        IndustrialGoods: values[1]['sectorPerformance'][9].changesPercentage,\n        Industrials: values[1]['sectorPerformance'][10].changesPercentage,\n        RealEstate: values[1]['sectorPerformance'][11].changesPercentage,\n        Services: values[1]['sectorPerformance'][12].changesPercentage,\n        Technology: values[1]['sectorPerformance'][13].changesPercentage,\n        Utilities: values[1]['sectorPerformance'][14].changesPercentage\n      };\n      this.setState({\n        sector_data: data_temp\n      });\n    });\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoComplete\",\n      role: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: text,\n      placeholder: \"Enter name of organization\",\n      onChange: this.onCompanyNameChange,\n      type: \"text\",\n      \"aria-label\": \"Select company name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }), this.calculateSuggestions()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block_latestquote\",\n      role: \"contentinfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, this.state.quote == null ? this.state.sector_data == null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 83\n      }\n    }) : /*#__PURE__*/React.createElement(SectorPerformance, Object.assign({}, this.state.sector_data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 125\n      }\n    })) : /*#__PURE__*/React.createElement(LoadLatestQuote, Object.assign({}, this.state.quote, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 177\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block_latestquote\",\n      role: \"contentinfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, this.state.companyprofile == null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 58\n      }\n    }) : /*#__PURE__*/React.createElement(LoadCompanyProfile, Object.assign({}, this.state.companyprofile, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 99\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, this.state.stockPrice.length == 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 58\n      }\n    }) : /*#__PURE__*/React.createElement(StockChartBar, {\n      stockprice: this.state.stockPrice,\n      series: this.state.series,\n      symbol: this.symbol.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 99\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, this.state.stockPrice.length == 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null_condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 54\n      }\n    }) : /*#__PURE__*/React.createElement(LoadStockTable, {\n      stockprice: this.state.stockPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 95\n      }\n    })));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/ameesankhesara/Desktop/CourseWork/Spring-2020/StockDash/src/SearchBar.js"],"names":["React","Component","loadLatestQuote","getCompanyProfile","logo","symbols_company","sector_perf","getFullHistoricalData","constructLatestQuote","LoadLatestQuote","LoadCompanyProfile","SectorPerformance","StockChartBar","LoadStockTable","SearchBar","constructor","property","onCompanyNameChange","e","value","target","length","setState","text","suggestions","companyName","getStock_MainFunction","suggest","regex","RegExp","state","companyNamesFromJSON","sort","filter","v","test","company_symbol_json","latestQuote","logo_img","quote","companyprofile","sector_data","stockPrice","series","data","symbol","bind","calculateSuggestions","suggestionsSelected","getCompanyNamesForSuggestion","i","map","item","getSymbolFromCompanyName","name","toLowerCase","includes","undefined","Promise","all","then","values","quote_data","quote_temp","stockdata","stockdataArr","push","date","open","high","low","close","componentDidMount","data_temp","basicMaterials","changesPercentage","CommunicationServices","Conglomerates","ConsumerCyclical","ConsumerDefensive","Energy","Financial","FinancialServices","Healthcare","IndustrialGoods","Industrials","RealEstate","Services","Technology","Utilities","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./SearchBar.css\";\nimport { loadLatestQuote, getCompanyProfile, logo, symbols_company, sector_perf, getFullHistoricalData } from \"./RestApiCalls\";\nimport constructLatestQuote from \"./ConstructLatestQuote\";\nimport LoadLatestQuote from \"./LoadLatestQuote\";\nimport LoadCompanyProfile from \"./LoadCompanyProfile\";\nimport SectorPerformance from \"./SectorPerformance\";\nimport StockChartBar from \"./StockChartBar\";\nimport LoadStockTable from \"./LoadStockTable\";\n \n//Search Bar (AutoComplete Textbox) with all results.\nclass SearchBar extends Component {\n\n    constructor(property) {\n        super(property);\n        this.state = { suggestions: [], text: '', companyNamesFromJSON: [], company_symbol_json: [], latestQuote: null, companyName: \"\", logo_img: null, quote: null, companyprofile: null, sector_data: null, stockPrice:[], series: [{data:[]}] };\n        this.symbol = { value: \"\" };\n        this.getStock_MainFunction = this.getStock_MainFunction.bind(this);\n        this.onCompanyNameChange = this.onCompanyNameChange.bind(this);\n        this.calculateSuggestions = this.calculateSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.getCompanyNamesForSuggestion = this.getCompanyNamesForSuggestion.bind(this);\n\n    }\n\n    //On Detecting change in textbox value, populate the company name suggestions\n    //If text is empty, reset the states.\n    onCompanyNameChange = (e) => {\n        const value = e.target.value;\n        if (value.length === 0) {\n            this.setState({ text: '' });\n            this.setState({ suggestions: [] });\n            this.setState({ companyName: '' }, this.getStock_MainFunction);\n        }\n        let suggest = [];\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            suggest = this.state.companyNamesFromJSON.sort().filter(v => regex.test(v));\n        }\n        this.setState({ suggestions: suggest, text: value });\n\n    }\n\n    //On selecting the company name from the drop down, call the main function: Get Stock\n    suggestionsSelected(value) {\n        this.setState({ text: value });\n        this.setState({ suggestions: [] });\n        this.setState({ companyName: value }, this.getStock_MainFunction);\n    }\n\n    //Renders company name suggestions in a list\n    calculateSuggestions() {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        var i = 0;\n        return (<section role=\"list\" className=\"list-wrapper\">\n            {suggestions.map((item) => <div role=\"listitem\" className=\"list-item\" key={i++} onClick={() => this.suggestionsSelected(item)}>{item}</div>)}\n            </section>)\n    }\n\n    //Given the company name, find the symbol to use in subsequent requests\n    getSymbolFromCompanyName(companyName) {\n        for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n            if (\n                this.state.company_symbol_json[i].name\n                    .toLowerCase()\n                    .includes(companyName.toLowerCase())\n            ) {\n                this.symbol.value = this.state.company_symbol_json[i].symbol;\n                return;\n            }\n        }\n    }\n\n    //Main Function: Get response from all APIS: Latest Quote, Company Profile, Logo\n    getStock_MainFunction() {\n        if (this.state.companyName === undefined || this.state.companyName.length === 0) {\n            this.setState({ latestQuote: null });\n            this.setState({ logo_img: null });\n            this.setState({ quote: null });\n            this.setState({ companyprofile: null });\n            this.setState({stockPrice:null});\n        } else {\n            this.getSymbolFromCompanyName(this.state.companyName);\n            Promise.all([\n                loadLatestQuote(this.symbol.value),\n                getCompanyProfile(this.symbol.value),\n                logo(this.symbol.value),\n                getFullHistoricalData(this.symbol.value)\n            ]).then((values) => {\n                let quote_data = values[0];\n                this.setState({ latestQuote: constructLatestQuote(quote_data) });\n                this.setState({ logo_img: values[2] });\n                let quote_temp = { ...this.state.latestQuote, logo_img: this.state.logo_img };\n                this.setState({ quote: quote_temp });\n                this.setState({ companyprofile: values[1]['profile'] });\n                this.setState({stockPrice:values[3]['historical']})\n                this.setState({stockPrice:values[3]})\n                var stockdata=[];\n                values[3]['historical'].map(item=>\n                    {\n                        var stockdataArr = [];\n                        stockdataArr.push(item.date,item.open,item.high,item.low,item.close);\n                        stockdata.push(stockdataArr);\n                    });\n                this.setState({ series: [{\n                    data: stockdata}]\n                })\n            });\n        }\n    }\n\n    //Populate all the company Names to use for suggestions later\n    getCompanyNamesForSuggestion() {\n        var data = []\n        for (var i = 0; i < this.state.company_symbol_json.length; i++) {\n            if (this.state.company_symbol_json[i].name.length !== 0) {\n                data.push(this.state.company_symbol_json[i].name);\n            }\n        }\n        this.setState({ companyNamesFromJSON: data });\n    }\n\n    //Executed on load: Symbols and Company mapping data, Sector Performance\n    async componentDidMount() {\n        Promise.all([\n            symbols_company(),\n            sector_perf()\n        ]).then((values) => {\n            this.setState({ company_symbol_json: values[0] }, this.getCompanyNamesForSuggestion);\n            let data_temp = {}\n            data_temp = {\n                basicMaterials: values[1]['sectorPerformance'][0].changesPercentage,\n                CommunicationServices: values[1]['sectorPerformance'][1].changesPercentage,\n                Conglomerates: values[1]['sectorPerformance'][2].changesPercentage,\n                ConsumerCyclical: values[1]['sectorPerformance'][3].changesPercentage,\n                ConsumerDefensive: values[1]['sectorPerformance'][4].changesPercentage,\n                Energy: values[1]['sectorPerformance'][5].changesPercentage,\n                Financial: values[1]['sectorPerformance'][6].changesPercentage,\n                FinancialServices: values[1]['sectorPerformance'][7].changesPercentage,\n                Healthcare: values[1]['sectorPerformance'][8].changesPercentage,\n                IndustrialGoods: values[1]['sectorPerformance'][9].changesPercentage,\n                Industrials: values[1]['sectorPerformance'][10].changesPercentage,\n                RealEstate: values[1]['sectorPerformance'][11].changesPercentage,\n                Services: values[1]['sectorPerformance'][12].changesPercentage,\n                Technology: values[1]['sectorPerformance'][13].changesPercentage,\n                Utilities: values[1]['sectorPerformance'][14].changesPercentage\n            }\n            this.setState({ sector_data: data_temp });\n        });\n    }\n\n    render() {\n        const { text } = this.state;\n     \n        return (\n            <div role=\"main\">\n                <div className=\"AutoComplete\" role=\"search\">\n                    <input value={text} placeholder=\"Enter name of organization\" onChange={this.onCompanyNameChange} type=\"text\" aria-label=\"Select company name\" />\n                    {this.calculateSuggestions()}\n                </div>\n                <div className=\"block_latestquote\" role=\"contentinfo\">\n                    {this.state.quote == null ? (this.state.sector_data == null ? <div className=\"null_condition\" ></div> : <SectorPerformance{...this.state.sector_data} />) : <LoadLatestQuote{...this.state.quote} />}\n                </div>\n                <div className=\"block_latestquote\"  role=\"contentinfo\">\n                    {this.state.companyprofile == null ? <div className=\"null_condition\"></div> : <LoadCompanyProfile{...this.state.companyprofile} />}\n                </div>\n                <div>\n                    {this.state.stockPrice.length == 0 ? <div className=\"null_condition\"></div> : <StockChartBar stockprice={this.state.stockPrice} series={this.state.series} symbol={this.symbol.value}/>}\n                </div>\n                <div>\n                {this.state.stockPrice.length == 0 ? <div className=\"null_condition\"></div> : <LoadStockTable stockprice={this.state.stockPrice}/>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}