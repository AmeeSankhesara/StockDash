import * as React from "react";
import { head, isDefined, mapObject, noop } from "../utils";
import { getMorePropsForChart, getSelected } from "./utils";
import GenericComponent, { getMouseCanvas } from "../GenericComponent";
export class DrawingObjectSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.getInteraction = (moreProps) => {
            const { getInteractiveNodes, drawingObjectMap } = this.props;
            const interactiveNodes = getInteractiveNodes();
            const interactives = mapObject(interactiveNodes, (each) => {
                const key = drawingObjectMap[each.type];
                const valueArray = isDefined(key)
                    ? each.node.props[key]
                    : undefined;
                const valuePresent = isDefined(valueArray)
                    && Array.isArray(valueArray)
                    && valueArray.length > 0;
                if (valuePresent) {
                    const morePropsForChart = getMorePropsForChart(moreProps, each.chartId);
                    const objects = each.node.getSelectionState(morePropsForChart);
                    return {
                        type: each.type,
                        chartId: each.chartId,
                        objects,
                    };
                }
                return {
                    type: each.type,
                    chartId: each.chartId,
                    objects: [],
                };
            });
            return interactives;
        };
        this.handleClick = (moreProps, e) => {
            e.preventDefault();
            const { onSelect } = this.props;
            const { enabled } = this.props;
            if (!enabled) {
                return;
            }
            const interactives = this.getInteraction(moreProps);
            onSelect(interactives, moreProps);
        };
        this.handleDoubleClick = (moreProps, e) => {
            e.preventDefault();
            const { onDoubleClick } = this.props;
            const { enabled } = this.props;
            if (!enabled) {
                return;
            }
            const interactives = this.getInteraction(moreProps);
            const allSelected = getSelected(interactives);
            if (allSelected.length > 0) {
                const selected = head(allSelected);
                const item = {
                    type: selected.type,
                    chartId: selected.chartId,
                    object: head(selected.objects),
                };
                const morePropsForChart = getMorePropsForChart(moreProps, selected.chartId);
                onDoubleClick(item, morePropsForChart);
            }
        };
    }
    render() {
        return (React.createElement(GenericComponent, { svgDraw: noop, canvasToDraw: getMouseCanvas, canvasDraw: noop, onMouseDown: this.handleClick, onDoubleClick: this.handleDoubleClick, drawOn: ["mousemove", "pan", "drag"] }));
    }
}
DrawingObjectSelector.defaultProps = {
    enabled: true,
    onDoubleClick: noop,
};
//# sourceMappingURL=DrawingObjectSelector.js.map