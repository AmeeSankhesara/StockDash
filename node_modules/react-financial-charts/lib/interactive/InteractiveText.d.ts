import * as PropTypes from "prop-types";
import * as React from "react";
interface InteractiveTextProps {
    readonly onChoosePosition: any;
    readonly onDragComplete: any;
    readonly onSelect?: any;
    readonly defaultText: {
        bgFill: string;
        bgOpacity: number;
        bgStrokeWidth?: number;
        bgStroke?: string;
        textFill: string;
        fontFamily: string;
        fontWeight: string;
        fontStyle: string;
        fontSize: number;
        text: string;
    };
    readonly hoverText: object;
    readonly textList: any[];
    readonly enabled: boolean;
}
interface InteractiveTextState {
    current?: any;
    override?: any;
}
export declare class InteractiveText extends React.Component<InteractiveTextProps, InteractiveTextState> {
    static defaultProps: {
        onChoosePosition: () => void;
        onDragComplete: () => void;
        onSelect: () => void;
        defaultText: {
            bgFill: string;
            bgOpacity: number;
            bgStrokeWidth: number;
            textFill: string;
            fontFamily: string;
            fontSize: number;
            fontStyle: string;
            fontWeight: string;
            text: string;
        };
        hoverText: {
            enable: boolean;
            bgHeight: string;
            bgWidth: string;
            text: string;
            selectedText: string;
            fontFamily: string;
            fontSize: number;
            fill: string;
            bgFill: string;
            bgOpacity: number;
        };
        textList: never[];
    };
    static contextTypes: {
        subscribe: PropTypes.Validator<(...args: any[]) => any>;
        unsubscribe: PropTypes.Validator<(...args: any[]) => any>;
        generateSubscriptionId: PropTypes.Validator<(...args: any[]) => any>;
        chartId: PropTypes.Validator<string | number>;
    };
    private getSelectionState;
    private saveNodeType;
    private terminate;
    constructor(props: any);
    render(): JSX.Element;
    private readonly handleDraw;
    private readonly handleDragComplete;
    private readonly handleDrag;
}
export {};
