import * as React from "react";
interface EachFibRetracementProps {
    readonly x1: any;
    readonly x2: any;
    readonly y1: number;
    readonly y2: number;
    readonly yDisplayFormat: any;
    readonly type: string;
    readonly selected: boolean;
    readonly appearance: {
        stroke: string;
        strokeWidth: number;
        strokeOpacity: number;
        fontFamily: string;
        fontSize: number;
        fontFill: string;
        edgeStroke: string;
        edgeFill: string;
        nsEdgeFill: string;
        edgeStrokeWidth: number;
        r: number;
    };
    readonly interactive: boolean;
    readonly hoverText: {
        enable: boolean;
        fontFamily: string;
        fontSize: number;
        fill: string;
        text: string;
        bgFill: string;
        bgOpacity: number;
        bgWidth: number | string;
        bgHeight: number | string;
        selectedText: string;
    };
    readonly index?: number;
    readonly onDrag: any;
    readonly onDragComplete: any;
}
interface EachFibRetracementState {
    hover: boolean;
}
export declare class EachFibRetracement extends React.Component<EachFibRetracementProps, EachFibRetracementState> {
    static defaultProps: {
        yDisplayFormat: (d: any) => any;
        interactive: boolean;
        appearance: {
            stroke: string;
            strokeWidth: number;
            strokeOpacity: number;
            fontFamily: string;
            fontSize: number;
            fontFill: string;
            edgeStroke: string;
            edgeFill: string;
            nsEdgeFill: string;
            edgeStrokeWidth: number;
            r: number;
        };
        selected: boolean;
        onDrag: () => void;
        onDragComplete: () => void;
        hoverText: {
            enable: boolean;
        };
    };
    private dragStart;
    private isHover;
    private saveNodeType;
    constructor(props: any);
    render(): JSX.Element;
    private readonly handleEdge2Drag;
    private readonly handleEdge1Drag;
    private readonly handleLineNSResizeBottom;
    private readonly handleLineNSResizeTop;
    private readonly handleLineMove;
    private readonly handleLineDragStart;
    private readonly handleHover;
}
export {};
