import * as React from "react";
interface EachGannFanProps {
    startXY: number[];
    endXY: number[];
    dy?: number;
    interactive: boolean;
    selected: boolean;
    appearance: {
        stroke: string;
        strokeOpacity: number;
        fillOpacity: number;
        strokeWidth: number;
        edgeStroke: string;
        edgeFill: string;
        edgeStrokeWidth: number;
        r: number;
        fill: string[];
        fontFamily: string;
        fontSize: number;
        fontFill: string;
    };
    hoverText: {
        enable: boolean;
        fontFamily: string;
        fontSize: number;
        fill: string;
        text: string;
        bgFill: string;
        bgOpacity: number;
        bgWidth: number | string;
        bgHeight: number | string;
        selectedText: string;
    };
    index?: number;
    onDrag: any;
    onDragComplete: any;
}
interface EachGannFanState {
    hover: boolean;
}
export declare class EachGannFan extends React.Component<EachGannFanProps, EachGannFanState> {
    static defaultProps: {
        yDisplayFormat: (d: any) => any;
        interactive: boolean;
        selected: boolean;
        appearance: {
            stroke: string;
            fillOpacity: number;
            strokeOpacity: number;
            strokeWidth: number;
            edgeStroke: string;
            edgeFill: string;
            edgeStrokeWidth: number;
            r: number;
            fill: string[];
            fontFamily: string;
            fontSize: number;
            fontFill: string;
        };
        onDrag: () => void;
        onDragComplete: () => void;
        hoverText: {
            enable: boolean;
            bgHeight: number;
            bgWidth: number;
            text: string;
            fontFamily: string;
            fontSize: number;
            fill: string;
            bgFill: string;
            bgOpacity: number;
        };
    };
    private isHover;
    private dragStart;
    private saveNodeType;
    constructor(props: any);
    render(): JSX.Element;
    private readonly getEdgeCircle;
    private readonly handleLine1Edge2Drag;
    private readonly handleLine1Edge1Drag;
    private readonly handleFanDrag;
    private readonly handleDragStart;
    private readonly handleHover;
}
export {};
