export declare function discontinuousTimeScaleProviderBuilder(): {
    (data: any): {
        data: any;
        xScale: {
            (x: any): number;
            invert(x: any): number;
            domain(x: any): number[] | any;
            range(x: any): number[] | any;
            rangeRound(x: any): import("d3-scale").ScaleLinear<number, number>;
            clamp(x: any): boolean | any;
            interpolate(x: any): import("d3-scale").InterpolatorFactory<any, any> | any;
            ticks(m: any): number[];
            tickFormat(): (x: any) => any;
            value(x: any): any;
            nice(m: any): any;
            index(x: any): any;
            copy(): any;
        };
        xAccessor: (d: any) => any;
        displayXAccessor: any;
    };
    initialIndex(x: any): number | any;
    inputDateAccessor(x: any): (d: any) => any;
    indexAccessor(x: any): (d: any) => any;
    indexMutator(x: any): (d: any, idx: any) => any;
    withIndex(x: any): any;
    utc(): any;
    setLocale(locale: any, formatters?: null): any;
    indexCalculator(): (data: any) => {
        index: {
            index: any;
            level: any;
            date: Date;
            format: (date: Date) => string;
        }[];
    };
};
declare const _default: {
    (data: any): {
        data: any;
        xScale: {
            (x: any): number;
            invert(x: any): number;
            domain(x: any): number[] | any;
            range(x: any): number[] | any;
            rangeRound(x: any): import("d3-scale").ScaleLinear<number, number>;
            clamp(x: any): boolean | any;
            interpolate(x: any): import("d3-scale").InterpolatorFactory<any, any> | any;
            ticks(m: any): number[];
            tickFormat(): (x: any) => any;
            value(x: any): any;
            nice(m: any): any;
            index(x: any): any;
            copy(): any;
        };
        xAccessor: (d: any) => any;
        displayXAccessor: any;
    };
    initialIndex(x: any): number | any;
    inputDateAccessor(x: any): (d: any) => any;
    indexAccessor(x: any): (d: any) => any;
    indexMutator(x: any): (d: any, idx: any) => any;
    withIndex(x: any): any;
    utc(): any;
    setLocale(locale: any, formatters?: null): any;
    indexCalculator(): (data: any) => {
        index: {
            index: any;
            level: any;
            date: Date;
            format: (date: Date) => string;
        }[];
    };
};
export default _default;
