import * as React from "react";
interface StackedBarSeriesProps {
    readonly baseAt?: number | any;
    readonly direction?: "up" | "down";
    readonly stroke?: boolean;
    readonly width?: number | any;
    readonly opacity?: number;
    readonly fill?: string | any;
    readonly className?: string | any;
    readonly clip?: boolean;
}
export declare class StackedBarSeries extends React.Component<StackedBarSeriesProps> {
    static defaultProps: {
        baseAt: (xScale: any, yScale: any) => any;
        direction: string;
        className: string;
        stroke: boolean;
        fill: string;
        opacity: number;
        width: (props: {
            widthRatio: number;
        }, moreProps: {
            xScale: any;
        }) => number;
        widthRatio: number;
        clip: boolean;
        swapScales: boolean;
    };
    render(): JSX.Element;
    private readonly drawOnCanvas;
    private readonly renderSVG;
}
export declare function identityStack(): {
    (data: any): any[];
    keys(x: any): never[] | any;
};
export declare function drawOnCanvasHelper(ctx: any, props: any, moreProps: any, xAccessor: any, stackFn: any, defaultPostAction?: (d: any) => any, postRotateAction?: (array: any) => any): void;
export declare function svgHelper(props: any, moreProps: any, xAccessor: any, stackFn: any, defaultPostAction?: (d: any) => any, postRotateAction?: (array: any) => any): any;
export declare const rotateXY: (array: any) => any;
export declare function getBarsSVG2(props: any, bars: any): any;
export declare function drawOnCanvas2(props: any, ctx: CanvasRenderingContext2D, bars: any): void;
export declare function getBars(props: any, xAccessor: any, yAccessor: any, xScale: any, yScale: any, plotData: any, stack?: typeof identityStack, after?: (d: any) => any): any;
export {};
